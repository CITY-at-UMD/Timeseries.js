{"version":3,"file":"index.module.js","sources":["../src/lib/Timeseries.interval.js","../src/lib/Timeseries.fill.js","../src/lib/Timeseries.statistics.js","../src/lib/misc.js","../src/index.js","../src/lib/Timeseries.zero.js"],"sourcesContent":["import dayjs from \"dayjs\";\n\nconst msToInterval = ms => {\n\tlet start = dayjs();\n\tlet end = dayjs().add(ms);\n\tif (end.diff(start, \"month\", true) >= 11) {\n\t\treturn [\"year\", Math.ceil(end.diff(start, \"year\", true))];\n\t} else if (end.diff(start, \"day\", true) >= 28) {\n\t\treturn [\"month\", Math.ceil(end.diff(start, \"month\", true))];\n\t} else if (end.diff(start, \"hour\", true) >= 23) {\n\t\treturn [\"day\", Math.ceil(end.diff(start, \"day\", true))];\n\t} else if (end.diff(start, \"minute\", true) >= 55) {\n\t\treturn [\"hour\", Math.ceil(end.diff(start, \"hour\", true))];\n\t} else {\n\t\treturn [\"minute\", end.diff(start, \"minute\")];\n\t}\n};\nconst intervalToMS = ([unit, value]) => {\n\tlet start = dayjs();\n\tlet end = dayjs().add(value, unit);\n\treturn end.diff(start);\n};\nfunction calculateInterval(df, startDate, endDate) {\n\tif (!startDate) startDate = df.first.date;\n\tif (!endDate) endDate = df.last.date;\n\tfunction computeInterval(window) {\n\t\treturn window.last() - window.first();\n\t}\n\tconst intervals = df\n\t\t.between(startDate, endDate)\n\t\t.getIndex()\n\t\t.window(2)\n\t\t.select(computeInterval)\n\t\t.detectValues()\n\t\t.orderBy(row => row.Frequency);\n\n\tlet val = intervals.last().Value;\n\treturn msToInterval(val);\n}\nexport { msToInterval, intervalToMS, calculateInterval };\n","import dayjs from \"dayjs\";\nimport fromPairs from \"lodash/fromPairs\";\nimport toPairs from \"lodash/toPairs\";\n\nconst gapExists = ([duration, durationValue = 1]) => (pairA, pairB) => {\n\tconst startDate = pairA[0];\n\tconst endDate = pairB[0];\n\tlet gapSize = Math.floor(\n\t\tdayjs(endDate).diff(startDate, duration, true) / durationValue\n\t);\n\n\tif (gapSize > 0) return true;\n\treturn false;\n};\n\nconst valueFiller = (\n\tfillType,\n\t{ startValue, endValue, entryIndex, numEntries },\n\t{ overrideValue, dateFunction, date, flag }\n) => {\n\tif (\n\t\t[\"pad\", \"interpolate\", \"average\", \"dateFunction\", \"value\"].indexOf(\n\t\t\tfillType\n\t\t) === -1\n\t) {\n\t\tthrow new Error(\"fill Type not supported\");\n\t}\n\tlet value;\n\tif (fillType === \"pad\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\treturn [key, startValue[key]];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", \"pad\"];\n\t} else if (fillType === \"interpolate\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv =\n\t\t\t\t\tstartValue[key] +\n\t\t\t\t\t(entryIndex + 1) *\n\t\t\t\t\t\t((endValue[key] - startValue[key]) / (numEntries + 1));\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"average\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv = (startValue[key] + endValue[key]) / numEntries;\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"dateFunction\" && dateFunction) {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv = dateFunction(date);\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"value\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv;\n\t\t\t\tif (typeof overrideValue === \"number\") {\n\t\t\t\t\tnv = overrideValue;\n\t\t\t\t} else {\n\t\t\t\t\tnv = overrideValue[key];\n\t\t\t\t}\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\treturn [key, null];\n\t\t\t})\n\t\t);\n\t\tflag = [\"fill\"];\n\t}\n\treturn { ...value, flag };\n};\n\nconst gapFill = (\n\tfillType,\n\t[duration, durationValue],\n\t{ overrideValue, dateFunction, flag } = {}\n) => (pairA, pairB) => {\n\t// Fill values forward.\n\n\tconst startDate = dayjs(pairA[0]);\n\tconst endDate = dayjs(pairB[0]);\n\tlet gapSize = Math.floor(\n\t\tdayjs(endDate).diff(startDate, duration) / durationValue\n\t);\n\tconst numEntries = gapSize - 1;\n\tconst startValue = pairA[1];\n\tconst endValue = pairB[1];\n\tconst newEntries = [];\n\tfor (let entryIndex = 0; entryIndex < numEntries; ++entryIndex) {\n\t\tlet adjustment = valueFiller(\n\t\t\t\tfillType,\n\t\t\t\t{ startValue, endValue, entryIndex, numEntries },\n\t\t\t\t{\n\t\t\t\t\toverrideValue,\n\t\t\t\t\tdateFunction,\n\t\t\t\t\tflag\n\t\t\t\t}\n\t\t\t),\n\t\t\tdate = dayjs(startDate)\n\t\t\t\t.add((entryIndex + 1) * durationValue, duration)\n\t\t\t\t.toDate();\n\t\tlet e = [date.valueOf(), Object.assign({}, adjustment, { date })];\n\t\tnewEntries.push(e);\n\t}\n\n\treturn newEntries;\n};\n\n// Basic Fill Functions\nconst averageMonthlyMap = df =>\n\tnew Map(\n\t\tdf\n\t\t\t.group(\"month\")\n\t\t\t.select(group => ({\n\t\t\t\tmonth: group.first().date.month(),\n\t\t\t\tvalue: group\n\t\t\t\t\t.getSeries(\"value\")\n\t\t\t\t\t.where(v => v)\n\t\t\t\t\t.average()\n\t\t\t}))\n\t\t\t.toArray()\n\t\t\t.map(({ month, value }) => [month, value])\n\t);\nconst fillMonthlyByMap = monthMap => row => monthMap.get(row.date.month());\n\nconst pad = (df, { validOnly = true, series = \"value\" } = {}) => row => {\n\tlet values = df\n\t\t.before(row.date.toDate())\n\t\t.getSeries(series)\n\t\t.where(v => v);\n\tlet value = values.count() > 0 ? values.last() : 0;\n\t// console.log(row.date.toDate(), value);\n\treturn value;\n};\nconst annualAverage = (\n\tdf,\n\t{ validOnly = true, series = \"value\", years = 3, defaultValue } = {}\n) => row => {\n\tdf = df.subset([\"date\", series]).before(row.date.toDate());\n\tlet values = df\n\t\t.where(r => r.date.year(row.date.year()).isSame(row.date))\n\t\t.after(row.date.subtract(years, \"year\"))\n\t\t.getSeries(series)\n\t\t.where(v => v)\n\t\t.bake();\n\n\tlet value;\n\tif (values.count() < years) {\n\t\tvalue = values\n\t\t\t.appendPair([\n\t\t\t\tnull,\n\t\t\t\tdf\n\t\t\t\t\t.getSeries(series)\n\t\t\t\t\t.where(v => v)\n\t\t\t\t\t.average()\n\t\t\t])\n\t\t\t.average();\n\t} else {\n\t\tvalue = values.average();\n\t}\n\treturn value;\n};\nexport {\n\tgapExists,\n\tgapFill,\n\taverageMonthlyMap,\n\tfillMonthlyByMap,\n\tpad,\n\tannualAverage\n};\n","// Source: https://www.itl.nist.gov/div898/handbook/eda/section3/eda35h3.htm\n// https://vsp.pnnl.gov/help/Vsample/Rosners_Outlier_Test.htm\n// https://www.itl.nist.gov/div898/handbook/prc/section1/prc16.htm\n// https://www.math.ucla.edu/~tom/distributions/KolSmir2.html?\nimport { DataFrame } from \"data-forge\";\nimport {\n  sampleStandardDeviation,\n  mean as _mean,\n  max,\n  median as _median,\n  medianAbsoluteDeviation,\n  quantile\n} from \"simple-statistics\";\nimport { Studentt } from \"distributions\";\nimport dayjs from \"dayjs\";\n\nfunction rval(df) {\n  let values = df.deflate(row => row.x).toArray();\n  let std = sampleStandardDeviation(values);\n  let mean = _mean(values);\n  if (std === 0) {\n    let ndf = df.generateSeries({ ares: row => 0 });\n    return { R: 0, std, mean, df: ndf };\n  }\n  let ndf = new DataFrame({\n    values: values.map(x => ({\n      x,\n      ares: Math.abs(x - mean) / std\n    }))\n  });\n  let R = max(ndf.deflate(row => row.ares).toArray());\n  return { R, df: ndf, std, mean };\n}\n\nfunction pValue(n, i, alpha) {\n  let p = 1 - alpha / (2 * (n - i + 1));\n  return p;\n}\nfunction tValue(p, degreeOfFreedom) {\n  let qt = new Studentt(degreeOfFreedom);\n  let t = qt.inv(p);\n  return t;\n}\n//\nfunction lambdaTest(n, i, alpha) {\n  let p = pValue(n, i, alpha);\n  let df = n - i - 1;\n  let t = tValue(p, df);\n  let lambda =\n    (t * (n - i)) /\n    Math.sqrt((n - i - 1 + Math.pow(t, 2)) * (n - i + 1));\n  return { lambda, p, t };\n}\nfunction rosnerTest(dataset = [], k = 10, alpha = 0.05) {\n  let dataframe = new DataFrame({\n    values: dataset.map(x => ({ x }))\n  });\n  let n = dataframe.getSeries(\"x\").count();\n  let newdf;\n  let i = 1;\n  let outliers = [];\n  let trip = false;\n  while (i <= k) {\n    let pair = {};\n    let s = Date.now();\n    if (i === 1) {\n      let { R, df, mean, std } = rval(dataframe);\n      newdf = df.where(row => row.ares !== R);\n      pair = Object.assign({}, pair, {\n        mean,\n        std,\n        Value: df\n          .where(row => row.ares === R)\n          .getSeries(\"x\")\n          .first(),\n        R\n      });\n    } else {\n      let { R, df, mean, std } = rval(newdf);\n      newdf = df.where(row => row.ares !== R);\n      pair = Object.assign({}, pair, {\n        mean,\n        std,\n        Value: df\n          .where(row => row.ares === R)\n          .getSeries(\"x\")\n          .first(),\n        R\n      });\n    }\n    let { lambda, p, t } = lambdaTest(n, i, alpha);\n    pair = Object.assign({}, pair, { lambda });\n    outliers.push(pair);\n    if (trip && pair.R > pair.lambda) trip = false;\n    if (pair.R === 0) break;\n    if (pair.R < pair.lambda) {\n      if (trip) {\n        break;\n      } else {\n        trip = true;\n      }\n    }\n    i++;\n  }\n  outliers = new DataFrame(outliers)\n    .generateSeries({\n      outlier: row => row.R > row.lambda\n    })\n    .takeWhile(row => row.outlier);\n  let outlierValues = outliers\n    .where(row => row.Value > 0)\n    .deflate(row => row.Value);\n  let thresholds = {\n    lower: 0,\n    upper:\n      outlierValues.count() > 0 ? outlierValues.min() : Infinity\n  };\n  return {\n    outliers,\n    thresholds,\n    iterations: i\n  };\n}\nconst modz = (value, mad, median) => {\n  return (0.6745 * (value - median)) / mad;\n};\nfunction modifiedZScoreTest(values) {\n  let median = _median(values);\n  let mad = medianAbsoluteDeviation(values);\n  values = values\n    .sort((a, b) => b - a)\n    .filter(v => v > 0)\n    .map(v => [v, modz(v, mad, median)]);\n  let outliers = values.filter(\n    ([v, modz]) => Math.abs(modz) >= 3.5\n  );\n  let upper = Math.min(\n    ...[Infinity, ...outliers.map(v => v[0])]\n  );\n  // let score,\n  // \tvalue,\n  // \tthreshold = Infinity,\n  // \tindex = 0;\n  // do {\n  // \tvalue = values[index];\n  // \tscore = modz(value, mad, median);\n  // \tif (Math.abs(score) >= 3.5) threshold = value;\n  // } while (score >= 3.5);\n  return { thresholds: { upper, lower: 0 } };\n}\nfunction boxPlotTest(values) {\n  let q1 = quantile(values, 0.25);\n  let q3 = quantile(values, 0.75);\n  let iqr = q3 - q1;\n  return {\n    thresholds: {\n      lowerInner: q1 - 1.5 * iqr,\n      upperInner: q1 - 3 * iqr,\n      lowerOuter: q3 + 1.5 * iqr,\n      upperOuter: q3 + 3 * iqr\n    }\n  };\n}\nfunction calculateOutlierThresholds(\n  df,\n  { k, filterZeros = true } = {}\n) {\n  let values = df\n    .where(\n      row =>\n        row.flag === null ||\n        row.flag === undefined ||\n        Array.isArray(row.flag)\n    )\n    .where(row => !isNaN(row.value) && row.value !== null)\n    .getSeries(\"value\")\n    .bake();\n  if (filterZeros) values = values.where(value => value > 0);\n  if (!k) {\n    k =\n      values.count() < 1000\n        ? Math.floor(values.count() * 0.15)\n        : Math.min(...[1000, Math.floor(values.count() * 0.02)]);\n  }\n  if (values.count < 5) return {};\n  let { outliers, threshold } = rosnerTest(values.toArray(), k);\n  return { outliers, threshold };\n}\n\nfunction zeroCheck(df, threshold = 2) {\n  let zeroGroups = df\n    .variableWindow((a, b) => {\n      return a.value === b.value && a.value === 0;\n    })\n    .where(window => window.getIndex().count() >= threshold);\n  let zeroSummary = zeroGroups\n    .select(window => ({\n      start: window.first().date,\n      end: window.last().date,\n      count: window.count()\n    }))\n    .inflate(); // Series -> dataframe.\n  // .toArray()\n  return { zeroSummary, zeroGroups };\n}\n\nfunction zeroReplacement(df, threshold) {\n  let { zeroGroups } = zeroCheck(df, threshold);\n  zeroGroups.forEach(dff => {\n    dff = dff.transformSeries({\n      value: value => null,\n      flag: value => [\"zero\"]\n    });\n    df = DataFrame.merge([df, dff]);\n  });\n  return df;\n}\nfunction isOutlier(value, { lower, upper }) {\n  if (value < lower || value >= upper) {\n    return true;\n  }\n  return false;\n}\nfunction validMean(df) {\n  let values = df\n    .getSeries(\"value\")\n    .where(value => typeof value === \"number\");\n  return values.average();\n}\nfunction validMonthlyMeanMap(df) {\n  let dateComparison = row =>\n    dayjs(row.date)\n      .startOf(\"month\")\n      .month();\n\n  df = df\n    .where(row => typeof row.value === \"number\")\n    .groupBy(dateComparison)\n    .select(group => ({\n      month: new Date(group.first().date).getMonth(),\n      value: group.deflate(row => row.value).average()\n    }));\n  return new Map(\n    df.toArray().map(({ month, value }) => [month, value])\n  );\n}\n\nfunction quality(df) {\n  let count = df.getIndex().count();\n  let valid = df\n    .getSeries(\"flag\")\n    .where(\n      value =>\n        value === null ||\n        (Array.isArray(value) && value.length === 0)\n    )\n    .count();\n  let missing = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"missing\") !== -1)\n    .count();\n  let dirty = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"clean\") !== -1)\n    .count();\n  let zerod = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"zero\") !== -1)\n    .count();\n  let breakdown = {\n    valid: valid / count,\n    missing: missing / count,\n    invalid: (dirty + zerod) / count\n  };\n  let report = {\n    accuracy: (1 - dirty / count) * 4,\n    completeness: 4 * breakdown.valid,\n    consistency: 4 * ((count - missing - zerod) / count)\n  };\n  return { breakdown, report, count };\n}\n\nexport {\n  rosnerTest,\n  modifiedZScoreTest,\n  boxPlotTest,\n  calculateOutlierThresholds,\n  zeroReplacement,\n  isOutlier,\n  validMean,\n  validMonthlyMeanMap,\n  quality\n};\n","import dayjs from \"dayjs\";\nexport const annualScale = (start, end) =>\n\t365 / dayjs(end).diff(dayjs(start), \"day\");\nexport const calculateChange = (baseline, value) =>\n\t(value - baseline) / baseline;\n","import dayjs from \"dayjs\";\nimport dataForge from \"data-forge\";\nimport { msToInterval, intervalToMS } from \"./lib/Timeseries.interval\";\nimport isEqual from \"lodash/isEqual\";\nimport has from \"lodash/has\";\nimport get from \"lodash/get\";\nimport fromPairs from \"lodash/fromPairs\";\nimport {\n\tgapExists,\n\tgapFill,\n\taverageMonthlyMap,\n\tfillMonthlyByMap,\n\tpad,\n\tannualAverage\n} from \"./lib/Timeseries.fill\";\nimport {\n\tckmeans,\n\tmax,\n\tmedianAbsoluteDeviation,\n\tquantile\n} from \"simple-statistics\";\n\nimport {\n\trosnerTest,\n\tboxPlotTest,\n\tmodifiedZScoreTest\n} from \"./lib/Timeseries.statistics\";\nimport { annualScale, calculateChange } from \"./lib/misc\";\nimport { zeroCheck } from \"./lib/Timeseries.zero\";\n\nexport default Timeseries;\n// Fill Options\nexport { averageMonthlyMap, fillMonthlyByMap, pad, annualAverage };\nfunction Timeseries(data, options = {}) {\n\t// const { msIndex } = options;\n\tif (data instanceof Timeseries) {\n\t\treturn data;\n\t}\n\tif (data instanceof dataForge.DataFrame) {\n\t\tdata = data.toArray();\n\t}\n\n\tdata = data\n\t\t.map(({ date, ...others }) => ({ date: dayjs(date), ...others }))\n\t\t.sort((a, b) => a.date.valueOf() - b.date.valueOf());\n\tlet config = {\n\t\t// columns: ['date', 'value', 'raw', 'flag'],\n\t\tvalues: data,\n\t\tindex: data.map(({ date }) => date.toDate()),\n\t\tconsiderAllRows: true\n\t};\n\tdataForge.DataFrame.call(this, config);\n}\n\nTimeseries.prototype = Object.create(dataForge.DataFrame.prototype);\nTimeseries.prototype.constructor = Timeseries;\n\n// Getters\nfunction getValueColumns() {\n\treturn this.detectTypes()\n\t\t.where(row => row.Type === \"number\")\n\t\t.distinct(row => row.Column)\n\t\t.getSeries(\"Column\")\n\t\t.toArray();\n}\nfunction interval() {\n\tconst computeInterval = window => window.last() - window.first();\n\tconst intervals = this.getIndex()\n\t\t.window(2)\n\t\t.select(computeInterval)\n\t\t.detectValues()\n\t\t.orderBy(row => -row.Frequency);\n\t// .orderBy(row => row.Value);\n\n\tlet val = intervals.first().Value;\n\n\treturn msToInterval(val);\n}\n\nfunction dateRange(unit, adjustment) {\n\tlet start = dayjs(this.first().date),\n\t\tend = dayjs(this.last().date);\n\tif (adjustment) {\n\t\tstart = start.startOf(adjustment);\n\t\tend = end.endOf(adjustment);\n\t}\n\treturn end.diff(start, unit);\n}\nTimeseries.prototype.getValueColumns = getValueColumns;\nTimeseries.prototype.getInterval = interval;\nTimeseries.prototype.getDateRange = dateRange;\n\n// Methods\nfunction calculateThresholdOptions({\n\tk,\n\tfilterZeros = true,\n\tfilterNegative = true\n} = {}) {\n\tlet noflags = this.where(\n\t\trow =>\n\t\t\trow.flag === null ||\n\t\t\trow.flag === undefined ||\n\t\t\t(Array.isArray(row.flag) && row.flag.length === 0)\n\t)\n\t\t.where(row => !isNaN(row.value) && row.value !== null)\n\t\t.getSeries(\"value\");\n\tif (filterZeros) noflags = noflags.where(value => value !== 0);\n\tif (filterNegative) noflags = noflags.where(value => value > 0);\n\tif (!k) {\n\t\tk =\n\t\t\tnoflags.count() < 1000\n\t\t\t\t? Math.floor(noflags.count() * 0.15)\n\t\t\t\t: Math.min(...[1000, Math.floor(noflags.count() * 0.02)]);\n\t}\n\tif (noflags.count() < 5) return {};\n\tlet { thresholds: esd } = rosnerTest(noflags.toArray(), k);\n\tlet { thresholds: box } = boxPlotTest(noflags.toArray());\n\tlet { thresholds: modz } = modifiedZScoreTest(noflags.toArray());\n\treturn { esd, box, modz };\n}\n\nfunction getBestThreshold() {\n\ttry {\n\t\tlet thresholds = this.calculateThresholdOptions();\n\t\tconst thresholdGroups = ckmeans(\n\t\t\t[\n\t\t\t\tget(thresholds, \"esd.upper\", null),\n\t\t\t\tget(thresholds, \"modz.upper\", null),\n\t\t\t\tget(thresholds, \"box.lowerOuter\", null),\n\t\t\t\tget(thresholds, \"box.upperOuter\", null)\n\t\t\t].filter(v => v),\n\t\t\t2\n\t\t);\n\t\tlet threshold_actual = max(\n\t\t\tthresholdGroups.reduce((a, b) => (a.length > b.length ? a : b))\n\t\t);\n\t\treturn threshold_actual;\n\t} catch (error) {\n\t\tconsole.error(error);\n\t\tthrow new Error(\"Cannot determine threshold\");\n\t}\n}\n\nfunction calculateStatistics(options = {}) {\n\tconst {\n\t\tcolumn = \"value\",\n\t\tfilterZeros = false,\n\t\tfilterNegative = true\n\t} = options;\n\tlet series = this.deflate(row => row[column]).where(value => !isNaN(value));\n\tif (filterNegative) series = series.where(value => value >= 0);\n\tif (filterZeros) series = series.where(value => value !== 0);\n\tlet median = series.median();\n\tlet mean = series.average();\n\tlet count = series.count();\n\tlet std = series.std();\n\tlet min = series.min();\n\tlet max = series.max();\n\tlet mad = medianAbsoluteDeviation(series.toArray());\n\tlet q1 = quantile(series.toArray(), 0.25);\n\tlet q3 = quantile(series.toArray(), 0.75);\n\tlet iqr = q3 - q1;\n\tlet stats = {\n\t\tmedian,\n\t\tmean,\n\t\tcount,\n\t\tstd,\n\t\tmin,\n\t\tmax,\n\t\tmad,\n\t\tq1,\n\t\tq3,\n\t\tiqr\n\t};\n\treturn stats;\n}\n\nTimeseries.prototype.calculateStatistics = calculateStatistics;\nTimeseries.prototype.calculateThresholdOptions = calculateThresholdOptions;\nTimeseries.prototype.getBestThreshold = getBestThreshold;\n\n// Chainable Methods\nfunction transformAllSeries(adjustmentFunction, { exclude }) {\n\tlet df = this;\n\tlet columns = (columns = df\n\t\t.detectTypes()\n\t\t.where(row => row.Type === \"number\")\n\t\t.distinct(row => row.Column)\n\t\t.getSeries(\"Column\")\n\t\t.toArray());\n\tif (exclude && Array.isArray(exclude)) {\n\t\tcolumns = columns.filter(col => exclude.indexOf(col) === -1);\n\t}\n\tcolumns.forEach(col => {\n\t\tdf = df.transformSeries({\n\t\t\t[col]: value => {\n\t\t\t\tif (isNaN(value)) {\n\t\t\t\t\treturn value;\n\t\t\t\t} else {\n\t\t\t\t\treturn adjustmentFunction(value);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\treturn df;\n}\n\nTimeseries.prototype.transformAllSeries = transformAllSeries;\n\nfunction reset() {\n\tlet df = this.withSeries({\n\t\tvalue: row =>\n\t\t\trow.flag && Array.isArray(row.flag) && row.flag.length > 0\n\t\t\t\t? row.raw\n\t\t\t\t: row.value\n\t})\n\t\t.subset([\"date\", \"value\"])\n\t\t.where(row => !isNaN(row.value) && row.value !== null);\n\treturn new Timeseries(df);\n}\nTimeseries.prototype.reset = reset;\n\nfunction group(interval, toArray) {\n\tif ([\"hour\", \"day\", \"month\", \"year\"].indexOf(interval) === -1)\n\t\tthrow new Error(\"interval type not supported\");\n\tlet dateComparison = row => dayjs(row.date).startOf(interval);\n\tlet groups = this.groupBy(dateComparison);\n\treturn groups;\n}\n\nTimeseries.prototype.group = group;\n\nfunction removeOutliers({ series = \"value\", lower, upper } = {}) {\n\tif (lower > upper) throw new Error(\"thresholds invalid\");\n\tlet outlierCheck = (value, lower, upper) => value < lower || value > upper;\n\n\tlet outliers = this.where(row => outlierCheck(row[series], lower, upper))\n\t\t.generateSeries({\n\t\t\traw: row => row[series],\n\t\t\tflag: ({ flag = [] }) => [\"outlier\", ...flag]\n\t\t})\n\t\t.transformSeries({\n\t\t\t[series]: value => null\n\t\t});\n\n\tlet merged = this.merge(outliers);\n\treturn new Timeseries(merged);\n}\n\nTimeseries.prototype.removeOutliers = removeOutliers;\nTimeseries.prototype.clean = removeOutliers;\n\nfunction downsample([duration, value], fillType = \"sum\") {\n\tif ([\"hour\", \"day\", \"month\", \"year\"].indexOf(duration) === -1)\n\t\tthrow new Error(\"interval type not supported\");\n\tif ([\"sum\", \"avg\", \"median\"].indexOf(fillType) === -1) {\n\t\tthrow new Error(\"aggregation type not suppported, only:\");\n\t}\n\tlet dateComparison = row => row.date.startOf(duration);\n\tlet valueColumns = this.getValueColumns();\n\tif (value) {\n\t\tdateComparison = row => row.date.startOf(duration).add(value, duration);\n\t}\n\tlet df = this.groupBy(dateComparison)\n\t\t.select(group => {\n\t\t\tconst date = group.first().date.startOf(duration);\n\t\t\treturn {\n\t\t\t\tdate,\n\t\t\t\t...fromPairs([\n\t\t\t\t\t...valueColumns.map(col => {\n\t\t\t\t\t\tlet value;\n\t\t\t\t\t\tswitch (fillType) {\n\t\t\t\t\t\t\tcase \"median\":\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.median();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"avg\":\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.average();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t// sum\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.sum();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn [col, value];\n\t\t\t\t\t}),\n\t\t\t\t\t...group\n\t\t\t\t\t\t.getColumnNames()\n\t\t\t\t\t\t.filter(col => col !== \"date\")\n\t\t\t\t\t\t.filter(col => valueColumns.indexOf(col) === -1)\n\t\t\t\t\t\t.map(col => {\n\t\t\t\t\t\t\tlet value = group\n\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t.distinct()\n\t\t\t\t\t\t\t\t.toArray();\n\t\t\t\t\t\t\tif (value.length === 1) value = value[0];\n\t\t\t\t\t\t\treturn [col, value];\n\t\t\t\t\t\t})\n\t\t\t\t])\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => dayjs(row.date).toDate());\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.downsample = downsample;\n\nfunction upsample([duration, value], fillType = \"avg\") {\n\t// Dont use this b/c it has the raw and flag values\n\tlet df = this.fillGaps(\n\t\tgapExists([duration, value]),\n\t\tgapFill(fillType, [duration, value])\n\t);\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.upsample = upsample;\n\nfunction populate(value, type = \"avg\") {\n\tlet v;\n\tswitch (type) {\n\t\tcase \"fill\":\n\t\t\tv = value;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tv = value / this.count();\n\t\t\tbreak;\n\t}\n\tlet df = this.generateSeries({ value: row => v });\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.populate = populate;\n\nfunction reduceToValue(columnNames) {\n\tfunction chooseValue(row, columnNames = []) {\n\t\tlet values = columnNames.map(n => row[n]).filter(v => v);\n\t\treturn values[0] || 0;\n\t}\n\tlet df = this.generateSeries({\n\t\tvalue: row => chooseValue(row, columnNames)\n\t}).subset([\"date\", \"value\"]);\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.reduceToValue = reduceToValue;\n\n// Baseline Functions\n\nfunction rollingPercentChange(col = \"value\") {\n\tlet df = this;\n\tlet delta = df.withSeries(\"delta\", full.getSeries(\"value\").percentChange());\n\treturn new Timeseries(delta);\n}\n\nTimeseries.prototype.rollingPercentChange = rollingPercentChange;\nfunction baselinePercentChange(baselineDF) {\n\t// Only Change in Year\n\tif (!(baselineDF instanceof Timeseries))\n\t\tbaselineDF = new Timeseries(baselineDF);\n\tlet dfwb;\n\tif (baselineDF.count() > 1) {\n\t\tlet interval = this.getInterval();\n\t\tlet baselineInterval = baselineDF.interval;\n\t\tif (!isEqual(interval, baselineInterval)) {\n\t\t\tconsole.error(interval, baselineInterval);\n\t\t\tthrow new Error(\"baseline and data intervals do not match\");\n\t\t}\n\t\tlet indexer;\n\t\tswitch (interval[0]) {\n\t\t\tcase \"day\":\n\t\t\t\tindexer = date => `${date.month()}-${date.date()}`;\n\t\t\t\tbreak;\n\t\t\tcase \"month\":\n\t\t\t\tindexer = date => date.month();\n\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tindexer = date => 0;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tlet indexedBaseline = baselineDF.withIndex(row => indexer(row.date));\n\t\tlet getBaselineValue = index => {\n\t\t\tlet at = indexedBaseline.at(index);\n\t\t\tif (at && has(at, \"value\")) {\n\t\t\t\treturn at.value;\n\t\t\t} else {\n\t\t\t\treturn indexedBaseline.getSeries(\"value\").average();\n\t\t\t}\n\t\t};\n\t\tdfwb = this.generateSeries({\n\t\t\tbaseline: row => getBaselineValue(indexer(row.date))\n\t\t});\n\t} else {\n\t\tdfwb = this.generateSeries({\n\t\t\tbaseline: row => baselineDF.first().value\n\t\t});\n\t}\n\tdfwb = dfwb.generateSeries({\n\t\tdelta: row => calculateChange(row.baseline, row.value)\n\t});\n\treturn new Timeseries(dfwb);\n}\n\nTimeseries.prototype.baselinePercentChange = baselinePercentChange;\nTimeseries.prototype.addBaselineDelta = baselinePercentChange;\n\nfunction annualIntensity(normalizeValue = 1) {\n\tlet interval = this.getInterval();\n\tlet annual = this.groupBy(row => row.date.year())\n\t\t.select(group => {\n\t\t\tlet startDate = group.first().date;\n\t\t\tlet endDate = group\n\t\t\t\t.last()\n\t\t\t\t.date.add(interval[1] || 1, interval[0] || \"month\");\n\t\t\tlet scaler = annualScale(startDate, endDate);\n\t\t\treturn {\n\t\t\t\tstartDate,\n\t\t\t\tendDate,\n\t\t\t\t...fromPairs(\n\t\t\t\t\tthis.getValueColumns().map(col => [\n\t\t\t\t\t\tcol,\n\t\t\t\t\t\t(group\n\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t.where(v => v)\n\t\t\t\t\t\t\t.sum() *\n\t\t\t\t\t\t\tscaler) /\n\t\t\t\t\t\t\tnormalizeValue\n\t\t\t\t\t])\n\t\t\t\t)\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.renameSeries({ startDate: \"date\" })\n\t\t.dropSeries(\"endDate\");\n\treturn new Timeseries(annual);\n}\n\nTimeseries.prototype.annualIntensity = annualIntensity;\n\n// Fill Functions\n\nfunction fillMissing() {\n\tlet df = this;\n\tlet startDate = df.first().date.toDate(),\n\t\tendDate = df.last().date.toDate();\n\tlet interval = df.getInterval();\n\tlet bdf = Timeseries.blank(startDate, endDate, interval, \"missing\").withIndex(\n\t\trow => row.date.valueOf()\n\t);\n\tlet m = bdf.merge(df.withIndex(row => row.date.valueOf())).generateSeries({\n\t\tflag: row =>\n\t\t\trow.value === null || row.value === undefined ? row.flag : undefined\n\t});\n\tm = new Timeseries(m);\n\treturn m;\n}\nTimeseries.prototype.fillMissing = fillMissing;\n\nfunction fillNull({ series = \"value\", value, callback }) {\n\tconst seriesCheck = row => row[series] === null || row[series] === undefined;\n\tif (callback) {\n\t\tlet df = this.generateSeries({\n\t\t\tflag: row =>\n\t\t\t\tseriesCheck(row) ? [\"fill\", ...(row.flag || [])] : row.flag,\n\t\t\t[series]: row => (seriesCheck(row) ? callback(row) : row[series])\n\t\t});\n\t\treturn new Timeseries(df);\n\t} else if (value) {\n\t\tlet df = this.generateSeries({\n\t\t\tflag: row => (seriesCheck(row) ? [\"fill\", ...(row.flag || [])] : row.flag)\n\t\t}).transformSeries({\n\t\t\t[series]: currentValue =>\n\t\t\t\tcurrentValue === null || currentValue === undefined\n\t\t\t\t\t? value\n\t\t\t\t\t: currentValue\n\t\t});\n\t\treturn new Timeseries(df);\n\t} else {\n\t\treturn this;\n\t}\n}\nTimeseries.prototype.fillNull = fillNull;\n\nfunction zeroReplacement(threshold) {\n\tlet df = this;\n\tlet { zeroGroups } = zeroCheck(df, threshold);\n\tlet dfs = zeroGroups.toArray().map((zdf, i) => {\n\t\tzdf = zdf\n\t\t\t.transformSeries({\n\t\t\t\tvalue: () => null,\n\t\t\t\traw: () => 0,\n\t\t\t\tflag: value => [\"zero\", ...(value || [])]\n\t\t\t})\n\t\t\t.withIndex(row => new Date(row.date).valueOf());\n\t\treturn zdf;\n\t});\n\tlet merged = df.withIndex(row => row.date.valueOf()).merge(...dfs);\n\treturn new Timeseries(merged);\n}\nTimeseries.prototype.zeroReplacement = zeroReplacement;\n\nfunction monthlyWithQual() {\n\tlet interval = this.getInterval();\n\tlet ms = intervalToMS(interval);\n\tconst duration = \"month\";\n\tlet dateComparison = row =>\n\t\tdayjs(row.date)\n\t\t\t.startOf()\n\t\t\t.valueOf();\n\tlet ts = this.groupBy(dateComparison)\n\t\t.select(group => {\n\t\t\tconst date = dayjs(group.first().date)\n\t\t\t\t.startOf(duration)\n\t\t\t\t.toDate();\n\t\t\tlet fullCount = Math.floor(\n\t\t\t\tdayjs(date)\n\t\t\t\t\t.endOf(\"month\")\n\t\t\t\t\t.diff(dayjs(date), \"millisecond\") / ms\n\t\t\t);\n\t\t\tlet days = new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\n\t\t\tlet count = group\n\t\t\t\t.getSeries(\"value\")\n\t\t\t\t.where(v => v && v !== 0)\n\t\t\t\t.toArray().length;\n\t\t\tlet value = group\n\t\t\t\t.getSeries(\"value\")\n\t\t\t\t.where(v => !isNaN(v))\n\t\t\t\t.sum();\n\t\t\treturn {\n\t\t\t\tdate,\n\t\t\t\tvalue: isNaN(value) ? 0 : value,\n\t\t\t\tcount,\n\t\t\t\tfullCount,\n\t\t\t\tscore: count / fullCount\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => row.date.toDate());\n\treturn new Timeseries(ts);\n}\nTimeseries.prototype.monthlyWithQual = monthlyWithQual;\n\nfunction threeYearAverage(date, series = \"value\", defaultValue) {\n\tdate = dayjs(date);\n\tif (!defaultValue)\n\t\tdefaultValue = this.getSeries(series)\n\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t.average();\n\n\t// let months = df\n\t// \t.before(date.valueOf())\n\t// \t.where(row => dayjs(row.date).month() === date.month())\n\t// \t.where(row => row.score > 0.9)\n\t// \t.tail(3);\n\tlet months = this.before(date.toDate())\n\t\t.where(row => row.date.month() === date.month())\n\t\t.orderBy(row => dayjs(row.date))\n\t\t.tail(3);\n\t// .where(row => row.score > 0.9);\n\tif (months.count() > 0) {\n\t\tlet val = months\n\t\t\t.getSeries(series)\n\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t.average();\n\t\treturn val;\n\t} else {\n\t\treturn defaultValue;\n\t}\n}\nTimeseries.prototype.threeYearAverage = threeYearAverage;\n\nfunction averageFill() {\n\tlet df = this;\n\tlet avg = df\n\t\t// .where(row => row.score ?row.score >= 0.9)\n\t\t.getSeries(\"value\")\n\t\t.where(v => !isNaN(v) && v !== null)\n\t\t.average();\n\tlet monthlyAvg = df\n\t\t.generateSeries({\n\t\t\trollingAverage: row => df.threeYearAverage(row.date, \"value\", avg)\n\t\t})\n\t\t.generateSeries({\n\t\t\tflag: row => (row.value ? row.flag : [\"filled\", ...(row.flag || [])])\n\t\t})\n\t\t.generateSeries({\n\t\t\tvalue: row => (row.value ? row.value : row.rollingAverage)\n\t\t})\n\t\t.dropSeries([\"rollingAverage\"]);\n\treturn new Timeseries(monthlyAvg);\n}\n\nTimeseries.prototype.averageFill = averageFill;\n\n// Static Methods\nfunction blank(startDate, endDate, [duration, value = 1], flag) {\n\tif ([\"minute\", \"hour\", \"day\", \"month\", \"year\"].indexOf(duration) < 0) {\n\t\tconsole.error(interval);\n\t\tthrow new Error(\"interval type not supported\");\n\t}\n\tstartDate = dayjs(startDate);\n\tendDate = dayjs(endDate);\n\tlet dates = [startDate];\n\tlet interval = intervalToMS([duration, value]);\n\twhile (dates[dates.length - 1].valueOf() < endDate.valueOf()) {\n\t\tdates.push(dayjs(dates[dates.length - 1]).add(value, duration));\n\t}\n\tlet df = new Timeseries(dates.map(date => ({ date })));\n\n\tif (flag) {\n\t\tdf = new Timeseries(\n\t\t\tdf.generateSeries({\n\t\t\t\tflag: row => [flag]\n\t\t\t})\n\t\t);\n\t}\n\n\treturn df;\n}\nTimeseries.blank = blank;\nfunction aggregate(dataframes) {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df => new Timeseries(df));\n\tconst valueColumns = new Set(\n\t\tdataframes.map(df => df.getValueColumns()).reduce((a, b) => a.concat(b), [])\n\t);\n\tconst concatenated = dataForge.DataFrame.concat(dataframes)\n\t\t.groupBy(row => row.date)\n\t\t.select(group => {\n\t\t\tconst date = group.first().date;\n\t\t\tlet o = { date };\n\t\t\tvalueColumns.forEach(c => (o[c] = group.deflate(row => row[c]).sum()));\n\t\t\tgroup\n\t\t\t\t.getColumnNames()\n\t\t\t\t.filter(col => col !== \"date\")\n\t\t\t\t.filter(col => valueColumns.has(col) === -1)\n\t\t\t\t.forEach(col => {\n\t\t\t\t\tlet value = group\n\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t.distinct()\n\t\t\t\t\t\t.toArray();\n\t\t\t\t\tif (value.length === 1) value = value[0];\n\t\t\t\t\to[col] = value;\n\t\t\t\t\treturn;\n\t\t\t\t});\n\t\t\treturn o;\n\t\t})\n\t\t.inflate();\n\t// .toArray();\n\n\treturn new Timeseries(concatenated);\n}\nTimeseries.aggregate = aggregate;\nTimeseries.concat = dataframes => {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df =>\n\t\tnew Timeseries(df).withIndex(row => row.date.valueOf())\n\t);\n\tlet df = dataForge.DataFrame.concat(dataframes);\n\treturn new Timeseries(df);\n};\nTimeseries.merge = dataframes => {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df =>\n\t\tnew Timeseries(df).withIndex(row => row.date.valueOf())\n\t);\n\tlet df = dataForge.DataFrame.merge(dataframes);\n\treturn new Timeseries(df);\n};\n","import { DataFrame } from \"data-forge\";\n\nconst zerogrouping = dataframe => {\n  // group sequential\n  let df = dataframe.variableWindow(\n    (a, b) => a.value === b.value\n  );\n};\n\nfunction zeroCheck(df, threshold = 2) {\n  let zeroGroups = df\n    .variableWindow((a, b) => {\n      return a.value === b.value && a.value === 0;\n    })\n    .where(window => window.getIndex().count() >= threshold);\n  let zeroSummary = zeroGroups\n    .select(window => ({\n      start: window.first().date,\n      end: window.last().date,\n      count: window.count()\n    }))\n    .inflate(); // Series -> dataframe.\n  // .toArray()\n  return { zeroSummary, zeroGroups };\n}\n\nfunction zeroReplacement(df, threshold) {\n  let { zeroGroups } = zeroCheck(df, threshold);\n  let dfs = zeroGroups.toArray().map(zdf => {\n    zdf = zdf\n      .transformSeries({\n        value: () => null,\n        raw: 0,\n        flag: value => [\"zero\", ...(value || [])]\n      })\n      .withIndex(row => new Date(row.date).valueOf());\n    return zdf;\n  });\n  let merged = DataFrame.merge([df, ...dfs]);\n\n  return merged;\n}\nexport { zerogrouping, zeroReplacement, zeroCheck };\n"],"names":["intervalToMS","unit","value","start","dayjs","add","diff","valueFiller","fillType","startValue","endValue","entryIndex","numEntries","overrideValue","dateFunction","date","flag","indexOf","Error","fromPairs","toPairs","map","key","averageMonthlyMap","df","Map","group","select","month","first","getSeries","where","v","average","toArray","fillMonthlyByMap","monthMap","row","get","pad","series","values","before","toDate","count","last","annualAverage","years","subset","r","year","isSame","after","subtract","bake","appendPair","rval","deflate","x","std","sampleStandardDeviation","mean","_mean","ndf","generateSeries","ares","R","DataFrame","Math","abs","max","lambdaTest","n","i","alpha","p","pValue","t","degreeOfFreedom","Studentt","inv","tValue","lambda","sqrt","pow","modz","mad","median","modifiedZScoreTest","_median","medianAbsoluteDeviation","outliers","sort","a","b","filter","thresholds","upper","min","Infinity","lower","calculateChange","baseline","Timeseries","data","options","dataForge","config","others","valueOf","index","considerAllRows","call","this","removeOutliers","outlierCheck","raw","transformSeries","merge","baselinePercentChange","baselineDF","dfwb","indexer","interval","getInterval","baselineInterval","isEqual","console","error","indexedBaseline","withIndex","at","has","delta","prototype","Object","create","constructor","getValueColumns","detectTypes","Type","distinct","Column","ms","end","getIndex","window","detectValues","orderBy","Frequency","Value","ceil","getDateRange","adjustment","startOf","endOf","calculateStatistics","column","filterZeros","filterNegative","isNaN","q1","quantile","q3","iqr","calculateThresholdOptions","k","noflags","Array","isArray","length","floor","esd","dataset","newdf","dataframe","trip","pair","assign","push","outlierValues","outlier","takeWhile","iterations","rosnerTest","box","lowerInner","upperInner","lowerOuter","upperOuter","getBestThreshold","thresholdGroups","ckmeans","reduce","transformAllSeries","adjustmentFunction","exclude","columns","col","forEach","reset","withSeries","groupBy","clean","downsample","duration","dateComparison","valueColumns","sum","getColumnNames","inflate","upsample","fillGaps","durationValue","pairA","pairB","startDate","gapExists","endDate","newEntries","e","gapFill","populate","type","reduceToValue","columnNames","chooseValue","rollingPercentChange","full","percentChange","addBaselineDelta","annualIntensity","normalizeValue","scaler","_this","renameSeries","dropSeries","fillMissing","m","blank","undefined","fillNull","callback","seriesCheck","currentValue","zeroReplacement","threshold","dfs","zeroGroups","variableWindow","zeroSummary","zeroCheck","zdf","Date","monthlyWithQual","fullCount","getFullYear","getMonth","getDate","score","threeYearAverage","defaultValue","months","tail","averageFill","avg","rollingAverage","dates","aggregate","dataframes","Set","concat","o","c"],"mappings":"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"}
{"version":3,"file":"index.module.js","sources":["../src/lib/Timeseries.interval.js","../src/lib/Timeseries.fill.js","../src/lib/Timeseries.statistics.js","../src/lib/misc.js","../src/index.js","../src/lib/Timeseries.zero.js"],"sourcesContent":["import dayjs from \"dayjs\";\n\nconst msToInterval = ms => {\n\tlet start = dayjs();\n\tlet end = dayjs().add(ms);\n\tif (end.diff(start, \"month\", true) >= 11) {\n\t\treturn [\"year\", Math.ceil(end.diff(start, \"year\", true))];\n\t} else if (end.diff(start, \"day\", true) >= 28) {\n\t\treturn [\"month\", Math.ceil(end.diff(start, \"month\", true))];\n\t} else if (end.diff(start, \"hour\", true) >= 23) {\n\t\treturn [\"day\", Math.ceil(end.diff(start, \"day\", true))];\n\t} else if (end.diff(start, \"minute\", true) >= 55) {\n\t\treturn [\"hour\", Math.ceil(end.diff(start, \"hour\", true))];\n\t} else {\n\t\treturn [\"minute\", end.diff(start, \"minute\")];\n\t}\n};\nconst intervalToMS = ([unit, value]) => {\n\tlet start = dayjs();\n\tlet end = dayjs().add(value, unit);\n\treturn end.diff(start);\n};\nfunction calculateInterval(df, startDate, endDate) {\n\tif (!startDate) startDate = df.first.date;\n\tif (!endDate) endDate = df.last.date;\n\tfunction computeInterval(window) {\n\t\treturn window.last() - window.first();\n\t}\n\tconst intervals = df\n\t\t.between(startDate, endDate)\n\t\t.getIndex()\n\t\t.window(2)\n\t\t.select(computeInterval)\n\t\t.detectValues()\n\t\t.orderBy(row => row.Frequency);\n\n\tlet val = intervals.last().Value;\n\treturn msToInterval(val);\n}\nexport { msToInterval, intervalToMS, calculateInterval };\n","import dayjs from \"dayjs\";\nimport fromPairs from \"lodash/fromPairs\";\nimport toPairs from \"lodash/toPairs\";\n\nconst gapExists = ([duration, durationValue = 1]) => (pairA, pairB) => {\n\tconst startDate = pairA[0];\n\tconst endDate = pairB[0];\n\tlet gapSize = Math.floor(\n\t\tdayjs(endDate).diff(startDate, duration, true) / durationValue\n\t);\n\n\tif (gapSize > 0) return true;\n\treturn false;\n};\n\nconst valueFiller = (\n\tfillType,\n\t{ startValue, endValue, entryIndex, numEntries },\n\t{ overrideValue, dateFunction, date, flag }\n) => {\n\tif (\n\t\t[\"pad\", \"interpolate\", \"average\", \"dateFunction\", \"value\"].indexOf(\n\t\t\tfillType\n\t\t) === -1\n\t) {\n\t\tthrow new Error(\"fill Type not supported\");\n\t}\n\tlet value;\n\tif (fillType === \"pad\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\treturn [key, startValue[key]];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", \"pad\"];\n\t} else if (fillType === \"interpolate\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv =\n\t\t\t\t\tstartValue[key] +\n\t\t\t\t\t(entryIndex + 1) *\n\t\t\t\t\t\t((endValue[key] - startValue[key]) / (numEntries + 1));\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"average\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv = (startValue[key] + endValue[key]) / numEntries;\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"dateFunction\" && dateFunction) {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv = dateFunction(date);\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"value\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv;\n\t\t\t\tif (typeof overrideValue === \"number\") {\n\t\t\t\t\tnv = overrideValue;\n\t\t\t\t} else {\n\t\t\t\t\tnv = overrideValue[key];\n\t\t\t\t}\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\treturn [key, null];\n\t\t\t})\n\t\t);\n\t\tflag = [\"fill\"];\n\t}\n\treturn { ...value, flag };\n};\n\nconst gapFill = (\n\tfillType,\n\t[duration, durationValue],\n\t{ overrideValue, dateFunction, flag } = {}\n) => (pairA, pairB) => {\n\t// Fill values forward.\n\n\tconst startDate = dayjs(pairA[0]);\n\tconst endDate = dayjs(pairB[0]);\n\tlet gapSize = Math.floor(\n\t\tdayjs(endDate).diff(startDate, duration) / durationValue\n\t);\n\tconst numEntries = gapSize - 1;\n\tconst startValue = pairA[1];\n\tconst endValue = pairB[1];\n\tconst newEntries = [];\n\tfor (let entryIndex = 0; entryIndex < numEntries; ++entryIndex) {\n\t\tlet adjustment = valueFiller(\n\t\t\t\tfillType,\n\t\t\t\t{ startValue, endValue, entryIndex, numEntries },\n\t\t\t\t{\n\t\t\t\t\toverrideValue,\n\t\t\t\t\tdateFunction,\n\t\t\t\t\tflag\n\t\t\t\t}\n\t\t\t),\n\t\t\tdate = dayjs(startDate)\n\t\t\t\t.add((entryIndex + 1) * durationValue, duration)\n\t\t\t\t.toDate();\n\t\tlet e = [date.valueOf(), Object.assign({}, adjustment, { date })];\n\t\tnewEntries.push(e);\n\t}\n\n\treturn newEntries;\n};\n\n// Basic Fill Functions\nconst averageMonthlyMap = df =>\n\tnew Map(\n\t\tdf\n\t\t\t.group(\"month\")\n\t\t\t.select(group => ({\n\t\t\t\tmonth: group.first().date.month(),\n\t\t\t\tvalue: group\n\t\t\t\t\t.getSeries(\"value\")\n\t\t\t\t\t.where(v => v)\n\t\t\t\t\t.average()\n\t\t\t}))\n\t\t\t.toArray()\n\t\t\t.map(({ month, value }) => [month, value])\n\t);\nconst annualMonthlyAverageMap = df =>\n\tnew Map(\n\t\tdf\n\t\t\t.groupBy(row => row.date.year())\n\t\t\t.select(group => {\n\t\t\t\tconst date = group.first().date.startOf(\"year\");\n\t\t\t\tlet ts = new Timeseries(group).downsample([\"month\", 1], \"avg\");\n\t\t\t\tlet avg = ts.getSeries(\"value\").average();\n\t\t\t\tlet map = averageMonthlyMap(ts);\n\t\t\t\tmap.set(\"avg\", avg);\n\t\t\t\treturn [date.year(), map];\n\t\t\t})\n\t\t\t.toArray()\n\t);\nconst monthlyRollingAverageMap = (df, { years = 3, series = \"value\" } = {}) => {\n\tlet months = df\n\t\t.groupBy(row => row.date.startOf(\"month\").toDate())\n\t\t.select(group => {\n\t\t\tlet date = group.first().date.startOf(\"month\");\n\t\t\tlet value = group\n\t\t\t\t.getSeries(series)\n\t\t\t\t.where(v => v)\n\t\t\t\t.average();\n\t\t\treturn { date, value };\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => row.date.toDate())\n\t\t.bake();\n\tlet data = months\n\t\t.groupBy(row => row.date.month())\n\t\t.select(group => {\n\t\t\tlet averages = new Map(\n\t\t\t\tgroup\n\t\t\t\t\t.rollingWindow(years)\n\t\t\t\t\t.select(window => [\n\t\t\t\t\t\twindow.last().date.year(),\n\t\t\t\t\t\twindow.getSeries(series).average()\n\t\t\t\t\t])\n\t\t\t);\n\t\t\tlet na = group\n\t\t\t\t.where(row => !averages.has(row.date.year()))\n\t\t\t\t.forEach(row => {\n\t\t\t\t\tlet value =\n\t\t\t\t\t\tmonths.before(row.date.toDate()).count() > 0\n\t\t\t\t\t\t\t? months.before(row.date.toDate()).last()[series]\n\t\t\t\t\t\t\t: months.getSeries(series).average();\n\t\t\t\t\taverages.set(row.date.year(), value);\n\t\t\t\t});\n\n\t\t\tlet month = group.first().date.month();\n\t\t\treturn [month, averages];\n\t\t})\n\t\t.toArray();\n\treturn new Map(data);\n};\n\nconst fillMonthlyByMap = monthMap => row => monthMap.get(row.date.month());\nconst fillMonthlyBAnnualyMap = annualMonthlyMap => row =>\n\tannualMonthlyMap.get(row.date.month()).get(row.date.year());\n\nconst pad = (df, { validOnly = true, series = \"value\" } = {}) => row => {\n\tlet values = df\n\t\t.before(row.date.toDate())\n\t\t.getSeries(series)\n\t\t.where(v => v);\n\tlet value = values.count() > 0 ? values.last() : 0;\n\t// console.log(row.date.toDate(), value);\n\treturn value;\n};\nconst annualAverage = (\n\tdf,\n\t{ validOnly = true, series = \"value\", years = 3, defaultValue } = {}\n) => row => {\n\tlet subset = df\n\t\t.subset([\"date\", series])\n\t\t.after(row.date.subtract(years, \"year\").toDate())\n\t\t.before(row.date.toDate())\n\t\t.bake();\n\tlet values = subset\n\t\t.where(r => r.date.month() === row.date.month())\n\t\t.where(r => r.date.date() === row.date.date())\n\t\t.where(r => r.date.hour() === row.date.hour())\n\t\t.where(r => r.date.minute() === row.date.minute())\n\t\t.getSeries(series)\n\t\t.where(v => v);\n\n\tlet value;\n\tif (values.count() < years) {\n\t\tvalue = values\n\t\t\t.appendPair([\n\t\t\t\tnull,\n\t\t\t\tsubset\n\t\t\t\t\t.getSeries(series)\n\t\t\t\t\t.where(v => v)\n\t\t\t\t\t.average()\n\t\t\t])\n\t\t\t.average();\n\t} else {\n\t\tvalue = values.average();\n\t}\n\t// console.log(row.date.toDate(), values.toArray(), value);\n\treturn value;\n};\nexport {\n\tgapExists,\n\tgapFill,\n\taverageMonthlyMap,\n\tfillMonthlyByMap,\n\tpad,\n\tannualAverage,\n\tannualMonthlyAverageMap,\n\tmonthlyRollingAverageMap,\n\tfillMonthlyBAnnualyMap\n};\n","// Source: https://www.itl.nist.gov/div898/handbook/eda/section3/eda35h3.htm\n// https://vsp.pnnl.gov/help/Vsample/Rosners_Outlier_Test.htm\n// https://www.itl.nist.gov/div898/handbook/prc/section1/prc16.htm\n// https://www.math.ucla.edu/~tom/distributions/KolSmir2.html?\nimport { DataFrame } from \"data-forge\";\nimport {\n  sampleStandardDeviation,\n  mean as _mean,\n  max,\n  median as _median,\n  medianAbsoluteDeviation,\n  quantile\n} from \"simple-statistics\";\nimport { Studentt } from \"distributions\";\nimport dayjs from \"dayjs\";\n\nfunction rval(df) {\n  let values = df.deflate(row => row.x).toArray();\n  let std = sampleStandardDeviation(values);\n  let mean = _mean(values);\n  if (std === 0) {\n    let ndf = df.generateSeries({ ares: row => 0 });\n    return { R: 0, std, mean, df: ndf };\n  }\n  let ndf = new DataFrame({\n    values: values.map(x => ({\n      x,\n      ares: Math.abs(x - mean) / std\n    }))\n  });\n  let R = max(ndf.deflate(row => row.ares).toArray());\n  return { R, df: ndf, std, mean };\n}\n\nfunction pValue(n, i, alpha) {\n  let p = 1 - alpha / (2 * (n - i + 1));\n  return p;\n}\nfunction tValue(p, degreeOfFreedom) {\n  let qt = new Studentt(degreeOfFreedom);\n  let t = qt.inv(p);\n  return t;\n}\n//\nfunction lambdaTest(n, i, alpha) {\n  let p = pValue(n, i, alpha);\n  let df = n - i - 1;\n  let t = tValue(p, df);\n  let lambda =\n    (t * (n - i)) /\n    Math.sqrt((n - i - 1 + Math.pow(t, 2)) * (n - i + 1));\n  return { lambda, p, t };\n}\nfunction rosnerTest(dataset = [], k = 10, alpha = 0.05) {\n  let dataframe = new DataFrame({\n    values: dataset.map(x => ({ x }))\n  });\n  let n = dataframe.getSeries(\"x\").count();\n  let newdf;\n  let i = 1;\n  let outliers = [];\n  let trip = false;\n  while (i <= k) {\n    let pair = {};\n    let s = Date.now();\n    if (i === 1) {\n      let { R, df, mean, std } = rval(dataframe);\n      newdf = df.where(row => row.ares !== R);\n      pair = Object.assign({}, pair, {\n        mean,\n        std,\n        Value: df\n          .where(row => row.ares === R)\n          .getSeries(\"x\")\n          .first(),\n        R\n      });\n    } else {\n      let { R, df, mean, std } = rval(newdf);\n      newdf = df.where(row => row.ares !== R);\n      pair = Object.assign({}, pair, {\n        mean,\n        std,\n        Value: df\n          .where(row => row.ares === R)\n          .getSeries(\"x\")\n          .first(),\n        R\n      });\n    }\n    let { lambda, p, t } = lambdaTest(n, i, alpha);\n    pair = Object.assign({}, pair, { lambda });\n    outliers.push(pair);\n    if (trip && pair.R > pair.lambda) trip = false;\n    if (pair.R === 0) break;\n    if (pair.R < pair.lambda) {\n      if (trip) {\n        break;\n      } else {\n        trip = true;\n      }\n    }\n    i++;\n  }\n  outliers = new DataFrame(outliers)\n    .generateSeries({\n      outlier: row => row.R > row.lambda\n    })\n    .takeWhile(row => row.outlier);\n  let outlierValues = outliers\n    .where(row => row.Value > 0)\n    .deflate(row => row.Value);\n  let thresholds = {\n    lower: 0,\n    upper:\n      outlierValues.count() > 0 ? outlierValues.min() : Infinity\n  };\n  return {\n    outliers,\n    thresholds,\n    iterations: i\n  };\n}\nconst modz = (value, mad, median) => {\n  return (0.6745 * (value - median)) / mad;\n};\nfunction modifiedZScoreTest(values) {\n  let median = _median(values);\n  let mad = medianAbsoluteDeviation(values);\n  values = values\n    .sort((a, b) => b - a)\n    .filter(v => v > 0)\n    .map(v => [v, modz(v, mad, median)]);\n  let outliers = values.filter(\n    ([v, modz]) => Math.abs(modz) >= 3.5\n  );\n  let upper = Math.min(\n    ...[Infinity, ...outliers.map(v => v[0])]\n  );\n  // let score,\n  // \tvalue,\n  // \tthreshold = Infinity,\n  // \tindex = 0;\n  // do {\n  // \tvalue = values[index];\n  // \tscore = modz(value, mad, median);\n  // \tif (Math.abs(score) >= 3.5) threshold = value;\n  // } while (score >= 3.5);\n  return { thresholds: { upper, lower: 0 } };\n}\nfunction boxPlotTest(values) {\n  let q1 = quantile(values, 0.25);\n  let q3 = quantile(values, 0.75);\n  let iqr = q3 - q1;\n  return {\n    thresholds: {\n      lowerInner: q1 - 1.5 * iqr,\n      upperInner: q1 - 3 * iqr,\n      lowerOuter: q3 + 1.5 * iqr,\n      upperOuter: q3 + 3 * iqr\n    }\n  };\n}\nfunction calculateOutlierThresholds(\n  df,\n  { k, filterZeros = true } = {}\n) {\n  let values = df\n    .where(\n      row =>\n        row.flag === null ||\n        row.flag === undefined ||\n        Array.isArray(row.flag)\n    )\n    .where(row => !isNaN(row.value) && row.value !== null)\n    .getSeries(\"value\")\n    .bake();\n  if (filterZeros) values = values.where(value => value > 0);\n  if (!k) {\n    k =\n      values.count() < 1000\n        ? Math.floor(values.count() * 0.15)\n        : Math.min(...[1000, Math.floor(values.count() * 0.02)]);\n  }\n  if (values.count < 5) return {};\n  let { outliers, threshold } = rosnerTest(values.toArray(), k);\n  return { outliers, threshold };\n}\n\nfunction zeroCheck(df, threshold = 2) {\n  let zeroGroups = df\n    .variableWindow((a, b) => {\n      return a.value === b.value && a.value === 0;\n    })\n    .where(window => window.getIndex().count() >= threshold);\n  let zeroSummary = zeroGroups\n    .select(window => ({\n      start: window.first().date,\n      end: window.last().date,\n      count: window.count()\n    }))\n    .inflate(); // Series -> dataframe.\n  // .toArray()\n  return { zeroSummary, zeroGroups };\n}\n\nfunction zeroReplacement(df, threshold) {\n  let { zeroGroups } = zeroCheck(df, threshold);\n  zeroGroups.forEach(dff => {\n    dff = dff.transformSeries({\n      value: value => null,\n      flag: value => [\"zero\"]\n    });\n    df = DataFrame.merge([df, dff]);\n  });\n  return df;\n}\nfunction isOutlier(value, { lower, upper }) {\n  if (value < lower || value >= upper) {\n    return true;\n  }\n  return false;\n}\nfunction validMean(df) {\n  let values = df\n    .getSeries(\"value\")\n    .where(value => typeof value === \"number\");\n  return values.average();\n}\nfunction validMonthlyMeanMap(df) {\n  let dateComparison = row =>\n    dayjs(row.date)\n      .startOf(\"month\")\n      .month();\n\n  df = df\n    .where(row => typeof row.value === \"number\")\n    .groupBy(dateComparison)\n    .select(group => ({\n      month: new Date(group.first().date).getMonth(),\n      value: group.deflate(row => row.value).average()\n    }));\n  return new Map(\n    df.toArray().map(({ month, value }) => [month, value])\n  );\n}\n\nfunction quality(df) {\n  let count = df.getIndex().count();\n  let valid = df\n    .getSeries(\"flag\")\n    .where(\n      value =>\n        value === null ||\n        (Array.isArray(value) && value.length === 0)\n    )\n    .count();\n  let missing = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"missing\") !== -1)\n    .count();\n  let dirty = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"clean\") !== -1)\n    .count();\n  let zerod = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"zero\") !== -1)\n    .count();\n  let breakdown = {\n    valid: valid / count,\n    missing: missing / count,\n    invalid: (dirty + zerod) / count\n  };\n  let report = {\n    accuracy: (1 - dirty / count) * 4,\n    completeness: 4 * breakdown.valid,\n    consistency: 4 * ((count - missing - zerod) / count)\n  };\n  return { breakdown, report, count };\n}\n\nexport {\n  rosnerTest,\n  modifiedZScoreTest,\n  boxPlotTest,\n  calculateOutlierThresholds,\n  zeroReplacement,\n  isOutlier,\n  validMean,\n  validMonthlyMeanMap,\n  quality\n};\n","import dayjs from \"dayjs\";\nexport const annualScale = (start, end) =>\n\t365 / dayjs(end).diff(dayjs(start), \"day\");\nexport const calculateChange = (baseline, value) =>\n\t(value - baseline) / baseline;\n","import dayjs from \"dayjs\";\nimport dataForge from \"data-forge\";\nimport { msToInterval, intervalToMS } from \"./lib/Timeseries.interval\";\nimport isEqual from \"lodash/isEqual\";\nimport has from \"lodash/has\";\nimport get from \"lodash/get\";\nimport fromPairs from \"lodash/fromPairs\";\nimport {\n\tgapExists,\n\tgapFill,\n\taverageMonthlyMap,\n\tfillMonthlyByMap,\n\tpad,\n\tannualAverage,\n\tannualMonthlyAverageMap,\n\tmonthlyRollingAverageMap,\n\tfillMonthlyBAnnualyMap\n} from \"./lib/Timeseries.fill\";\nimport {\n\tckmeans,\n\tmax,\n\tmedianAbsoluteDeviation,\n\tquantile\n} from \"simple-statistics\";\n\nimport {\n\trosnerTest,\n\tboxPlotTest,\n\tmodifiedZScoreTest\n} from \"./lib/Timeseries.statistics\";\nimport { annualScale, calculateChange } from \"./lib/misc\";\nimport { zeroCheck } from \"./lib/Timeseries.zero\";\n\nexport default Timeseries;\n// Fill Options\nexport {\n\tannualAverage,\n\taverageMonthlyMap,\n\tannualMonthlyAverageMap,\n\tmonthlyRollingAverageMap,\n\tfillMonthlyBAnnualyMap,\n\tfillMonthlyByMap,\n\tpad\n};\nfunction Timeseries(data, options = {}) {\n\t// const { msIndex } = options;\n\tif (data instanceof Timeseries) {\n\t\treturn data;\n\t}\n\tif (data instanceof dataForge.DataFrame) {\n\t\tdata = data.toArray();\n\t}\n\n\tdata = data\n\t\t.map(({ date, ...others }) => ({ date: dayjs(date), ...others }))\n\t\t.sort((a, b) => a.date.valueOf() - b.date.valueOf());\n\tlet config = {\n\t\t// columns: ['date', 'value', 'raw', 'flag'],\n\t\tvalues: data,\n\t\tindex: data.map(({ date }) => date.toDate()),\n\t\tconsiderAllRows: true\n\t};\n\tdataForge.DataFrame.call(this, config);\n}\n\nTimeseries.prototype = Object.create(dataForge.DataFrame.prototype);\nTimeseries.prototype.constructor = Timeseries;\n\n// Getters\nfunction getValueColumns() {\n\treturn this.detectTypes()\n\t\t.where(row => row.Type === \"number\")\n\t\t.distinct(row => row.Column)\n\t\t.getSeries(\"Column\")\n\t\t.toArray();\n}\nfunction interval() {\n\tconst computeInterval = window => window.last() - window.first();\n\tconst intervals = this.getIndex()\n\t\t.window(2)\n\t\t.select(computeInterval)\n\t\t.detectValues()\n\t\t.orderBy(row => -row.Frequency);\n\t// .orderBy(row => row.Value);\n\n\tlet val = intervals.first().Value;\n\n\treturn msToInterval(val);\n}\n\nfunction dateRange(unit, adjustment) {\n\tlet start = dayjs(this.first().date),\n\t\tend = dayjs(this.last().date);\n\tif (adjustment) {\n\t\tstart = start.startOf(adjustment);\n\t\tend = end.endOf(adjustment);\n\t}\n\treturn end.diff(start, unit);\n}\nTimeseries.prototype.getValueColumns = getValueColumns;\nTimeseries.prototype.getInterval = interval;\nTimeseries.prototype.getDateRange = dateRange;\n\n// Methods\nfunction calculateThresholdOptions({\n\tk,\n\tfilterZeros = true,\n\tfilterNegative = true\n} = {}) {\n\tlet noflags = this.where(\n\t\trow =>\n\t\t\trow.flag === null ||\n\t\t\trow.flag === undefined ||\n\t\t\t(Array.isArray(row.flag) && row.flag.length === 0)\n\t)\n\t\t.where(row => !isNaN(row.value) && row.value !== null)\n\t\t.getSeries(\"value\");\n\tif (filterZeros) noflags = noflags.where(value => value !== 0);\n\tif (filterNegative) noflags = noflags.where(value => value > 0);\n\tif (!k) {\n\t\tk =\n\t\t\tnoflags.count() < 1000\n\t\t\t\t? Math.floor(noflags.count() * 0.15)\n\t\t\t\t: Math.min(...[1000, Math.floor(noflags.count() * 0.02)]);\n\t}\n\tif (noflags.count() < 5) return {};\n\tlet { thresholds: esd } = rosnerTest(noflags.toArray(), k);\n\tlet { thresholds: box } = boxPlotTest(noflags.toArray());\n\tlet { thresholds: modz } = modifiedZScoreTest(noflags.toArray());\n\treturn { esd, box, modz };\n}\n\nfunction getBestThreshold() {\n\ttry {\n\t\tlet thresholds = this.calculateThresholdOptions();\n\t\tconst thresholdGroups = ckmeans(\n\t\t\t[\n\t\t\t\tget(thresholds, \"esd.upper\", null),\n\t\t\t\tget(thresholds, \"modz.upper\", null),\n\t\t\t\tget(thresholds, \"box.lowerOuter\", null),\n\t\t\t\tget(thresholds, \"box.upperOuter\", null)\n\t\t\t].filter(v => v),\n\t\t\t2\n\t\t);\n\t\tlet threshold_actual = max(\n\t\t\tthresholdGroups.reduce((a, b) => (a.length > b.length ? a : b))\n\t\t);\n\t\treturn threshold_actual;\n\t} catch (error) {\n\t\tconsole.error(error);\n\t\tthrow new Error(\"Cannot determine threshold\");\n\t}\n}\n\nfunction calculateStatistics(options = {}) {\n\tconst {\n\t\tcolumn = \"value\",\n\t\tfilterZeros = false,\n\t\tfilterNegative = true\n\t} = options;\n\tlet series = this.deflate(row => row[column]).where(value => !isNaN(value));\n\tif (filterNegative) series = series.where(value => value >= 0);\n\tif (filterZeros) series = series.where(value => value !== 0);\n\tlet median = series.median();\n\tlet mean = series.average();\n\tlet count = series.count();\n\tlet std = series.std();\n\tlet min = series.min();\n\tlet max = series.max();\n\tlet mad = medianAbsoluteDeviation(series.toArray());\n\tlet q1 = quantile(series.toArray(), 0.25);\n\tlet q3 = quantile(series.toArray(), 0.75);\n\tlet iqr = q3 - q1;\n\tlet stats = {\n\t\tmedian,\n\t\tmean,\n\t\tcount,\n\t\tstd,\n\t\tmin,\n\t\tmax,\n\t\tmad,\n\t\tq1,\n\t\tq3,\n\t\tiqr\n\t};\n\treturn stats;\n}\n\nTimeseries.prototype.calculateStatistics = calculateStatistics;\nTimeseries.prototype.calculateThresholdOptions = calculateThresholdOptions;\nTimeseries.prototype.getBestThreshold = getBestThreshold;\n\n// Chainable Methods\nfunction transformAllSeries(adjustmentFunction, { exclude }) {\n\tlet df = this;\n\tlet columns = (columns = df\n\t\t.detectTypes()\n\t\t.where(row => row.Type === \"number\")\n\t\t.distinct(row => row.Column)\n\t\t.getSeries(\"Column\")\n\t\t.toArray());\n\tif (exclude && Array.isArray(exclude)) {\n\t\tcolumns = columns.filter(col => exclude.indexOf(col) === -1);\n\t}\n\tcolumns.forEach(col => {\n\t\tdf = df.transformSeries({\n\t\t\t[col]: value => {\n\t\t\t\tif (isNaN(value)) {\n\t\t\t\t\treturn value;\n\t\t\t\t} else {\n\t\t\t\t\treturn adjustmentFunction(value);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\treturn df;\n}\n\nTimeseries.prototype.transformAllSeries = transformAllSeries;\n\nfunction reset() {\n\tlet df = this.withSeries({\n\t\tvalue: row =>\n\t\t\trow.flag && Array.isArray(row.flag) && row.flag.length > 0\n\t\t\t\t? row.raw\n\t\t\t\t: row.value\n\t})\n\t\t.subset([\"date\", \"value\"])\n\t\t.where(row => !isNaN(row.value) && row.value !== null);\n\treturn new Timeseries(df);\n}\nTimeseries.prototype.reset = reset;\n\nfunction group(interval, toArray) {\n\tif ([\"hour\", \"day\", \"month\", \"year\"].indexOf(interval) === -1)\n\t\tthrow new Error(\"interval type not supported\");\n\tlet dateComparison = row => dayjs(row.date).startOf(interval);\n\tlet groups = this.groupBy(dateComparison);\n\treturn groups;\n}\n\nTimeseries.prototype.group = group;\n\nfunction removeOutliers({ series = \"value\", lower, upper } = {}) {\n\tif (lower > upper) throw new Error(\"thresholds invalid\");\n\tlet outlierCheck = (value, lower, upper) => value < lower || value > upper;\n\n\tlet outliers = this.where(row => outlierCheck(row[series], lower, upper))\n\t\t.generateSeries({\n\t\t\traw: row => row[series],\n\t\t\tflag: ({ flag = [] }) => [\"outlier\", ...flag]\n\t\t})\n\t\t.transformSeries({\n\t\t\t[series]: value => null\n\t\t});\n\n\tlet merged = this.merge(outliers);\n\treturn new Timeseries(merged);\n}\n\nTimeseries.prototype.removeOutliers = removeOutliers;\nTimeseries.prototype.clean = removeOutliers;\n\nfunction downsample([duration, value], fillType = \"sum\") {\n\tif ([\"hour\", \"day\", \"month\", \"year\"].indexOf(duration) === -1)\n\t\tthrow new Error(\"interval type not supported\");\n\tif ([\"sum\", \"avg\", \"median\"].indexOf(fillType) === -1) {\n\t\tthrow new Error(\"aggregation type not suppported, only:\");\n\t}\n\tlet dateComparison = row => row.date.startOf(duration);\n\tlet valueColumns = this.getValueColumns();\n\tif (value) {\n\t\tdateComparison = row => row.date.startOf(duration).add(value, duration);\n\t}\n\tlet df = this.groupBy(dateComparison)\n\t\t.select(group => {\n\t\t\tconst date = group.first().date.startOf(duration);\n\t\t\treturn {\n\t\t\t\tdate,\n\t\t\t\t...fromPairs([\n\t\t\t\t\t...valueColumns.map(col => {\n\t\t\t\t\t\tlet value;\n\t\t\t\t\t\tswitch (fillType) {\n\t\t\t\t\t\t\tcase \"median\":\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.median();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"avg\":\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.average();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t// sum\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.sum();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn [col, value];\n\t\t\t\t\t}),\n\t\t\t\t\t...group\n\t\t\t\t\t\t.getColumnNames()\n\t\t\t\t\t\t.filter(col => col !== \"date\")\n\t\t\t\t\t\t.filter(col => valueColumns.indexOf(col) === -1)\n\t\t\t\t\t\t.map(col => {\n\t\t\t\t\t\t\tlet value = group\n\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t.distinct()\n\t\t\t\t\t\t\t\t.toArray();\n\t\t\t\t\t\t\tif (value.length === 1) value = value[0];\n\t\t\t\t\t\t\treturn [col, value];\n\t\t\t\t\t\t})\n\t\t\t\t])\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => dayjs(row.date).toDate());\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.downsample = downsample;\n\nfunction upsample([duration, value], fillType = \"avg\") {\n\t// Dont use this b/c it has the raw and flag values\n\tlet df = this.fillGaps(\n\t\tgapExists([duration, value]),\n\t\tgapFill(fillType, [duration, value])\n\t);\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.upsample = upsample;\n\nfunction populate(value, type = \"avg\") {\n\tlet v;\n\tswitch (type) {\n\t\tcase \"fill\":\n\t\t\tv = value;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tv = value / this.count();\n\t\t\tbreak;\n\t}\n\tlet df = this.generateSeries({ value: row => v });\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.populate = populate;\n\nfunction reduceToValue(columnNames) {\n\tfunction chooseValue(row, columnNames = []) {\n\t\tlet values = columnNames.map(n => row[n]).filter(v => v);\n\t\treturn values[0] || 0;\n\t}\n\tlet df = this.generateSeries({\n\t\tvalue: row => chooseValue(row, columnNames)\n\t}).subset([\"date\", \"value\"]);\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.reduceToValue = reduceToValue;\n\n// Baseline Functions\n\nfunction rollingPercentChange(col = \"value\") {\n\tlet df = this;\n\tlet delta = df.withSeries(\"delta\", full.getSeries(\"value\").percentChange());\n\treturn new Timeseries(delta);\n}\n\nTimeseries.prototype.rollingPercentChange = rollingPercentChange;\nfunction baselinePercentChange(baselineDF) {\n\t// Only Change in Year\n\tif (!(baselineDF instanceof Timeseries))\n\t\tbaselineDF = new Timeseries(baselineDF);\n\tlet dfwb;\n\tif (baselineDF.count() > 1) {\n\t\tlet interval = this.getInterval();\n\t\tlet baselineInterval = baselineDF.interval;\n\t\tif (!isEqual(interval, baselineInterval)) {\n\t\t\tconsole.error(interval, baselineInterval);\n\t\t\tthrow new Error(\"baseline and data intervals do not match\");\n\t\t}\n\t\tlet indexer;\n\t\tswitch (interval[0]) {\n\t\t\tcase \"day\":\n\t\t\t\tindexer = date => `${date.month()}-${date.date()}`;\n\t\t\t\tbreak;\n\t\t\tcase \"month\":\n\t\t\t\tindexer = date => date.month();\n\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tindexer = date => 0;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tlet indexedBaseline = baselineDF.withIndex(row => indexer(row.date));\n\t\tlet getBaselineValue = index => {\n\t\t\tlet at = indexedBaseline.at(index);\n\t\t\tif (at && has(at, \"value\")) {\n\t\t\t\treturn at.value;\n\t\t\t} else {\n\t\t\t\treturn indexedBaseline.getSeries(\"value\").average();\n\t\t\t}\n\t\t};\n\t\tdfwb = this.generateSeries({\n\t\t\tbaseline: row => getBaselineValue(indexer(row.date))\n\t\t});\n\t} else {\n\t\tdfwb = this.generateSeries({\n\t\t\tbaseline: row => baselineDF.first().value\n\t\t});\n\t}\n\tdfwb = dfwb.generateSeries({\n\t\tdelta: row => calculateChange(row.baseline, row.value)\n\t});\n\treturn new Timeseries(dfwb);\n}\n\nTimeseries.prototype.baselinePercentChange = baselinePercentChange;\nTimeseries.prototype.addBaselineDelta = baselinePercentChange;\n\nfunction annualIntensity(normalizeValue = 1) {\n\tlet interval = this.getInterval();\n\tlet annual = this.groupBy(row => row.date.year())\n\t\t.select(group => {\n\t\t\tlet startDate = group.first().date;\n\t\t\tlet endDate = group\n\t\t\t\t.last()\n\t\t\t\t.date.add(interval[1] || 1, interval[0] || \"month\");\n\t\t\tlet scaler = annualScale(startDate, endDate);\n\t\t\treturn {\n\t\t\t\tstartDate,\n\t\t\t\tendDate,\n\t\t\t\t...fromPairs(\n\t\t\t\t\tthis.getValueColumns().map(col => [\n\t\t\t\t\t\tcol,\n\t\t\t\t\t\t(group\n\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t.where(v => v)\n\t\t\t\t\t\t\t.sum() *\n\t\t\t\t\t\t\tscaler) /\n\t\t\t\t\t\t\tnormalizeValue\n\t\t\t\t\t])\n\t\t\t\t)\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.renameSeries({ startDate: \"date\" })\n\t\t.dropSeries(\"endDate\");\n\treturn new Timeseries(annual);\n}\n\nTimeseries.prototype.annualIntensity = annualIntensity;\n\n// Fill Functions\n\nfunction fillMissing() {\n\tlet df = this;\n\tlet startDate = df.first().date.toDate(),\n\t\tendDate = df.last().date.toDate();\n\tlet interval = df.getInterval();\n\tlet bdf = Timeseries.blank(startDate, endDate, interval, \"missing\").withIndex(\n\t\trow => row.date.valueOf()\n\t);\n\tlet m = bdf.merge(df.withIndex(row => row.date.valueOf())).generateSeries({\n\t\tflag: row =>\n\t\t\trow.value === null || row.value === undefined ? row.flag : undefined\n\t});\n\tm = new Timeseries(m);\n\treturn m;\n}\nTimeseries.prototype.fillMissing = fillMissing;\n\nfunction fillNull({ series = \"value\", value, callback }) {\n\tconst seriesCheck = row => row[series] === null || row[series] === undefined;\n\tif (callback) {\n\t\tlet df = this.generateSeries({\n\t\t\tflag: row =>\n\t\t\t\tseriesCheck(row) ? [\"fill\", ...(row.flag || [])] : row.flag,\n\t\t\t[series]: row => (seriesCheck(row) ? callback(row) : row[series])\n\t\t});\n\t\treturn new Timeseries(df);\n\t} else if (value) {\n\t\tlet df = this.generateSeries({\n\t\t\tflag: row => (seriesCheck(row) ? [\"fill\", ...(row.flag || [])] : row.flag)\n\t\t}).transformSeries({\n\t\t\t[series]: currentValue =>\n\t\t\t\tcurrentValue === null || currentValue === undefined\n\t\t\t\t\t? value\n\t\t\t\t\t: currentValue\n\t\t});\n\t\treturn new Timeseries(df);\n\t} else {\n\t\treturn this;\n\t}\n}\nTimeseries.prototype.fillNull = fillNull;\n\nfunction zeroReplacement(threshold) {\n\tlet df = this;\n\tlet { zeroGroups } = zeroCheck(df, threshold);\n\tlet dfs = zeroGroups.toArray().map((zdf, i) => {\n\t\tzdf = zdf\n\t\t\t.transformSeries({\n\t\t\t\tvalue: () => null,\n\t\t\t\traw: () => 0,\n\t\t\t\tflag: value => [\"zero\", ...(value || [])]\n\t\t\t})\n\t\t\t.withIndex(row => new Date(row.date).valueOf());\n\t\treturn zdf;\n\t});\n\tlet merged = df.withIndex(row => row.date.valueOf()).merge(...dfs);\n\treturn new Timeseries(merged);\n}\nTimeseries.prototype.zeroReplacement = zeroReplacement;\n\nfunction monthlyWithQual() {\n\tlet interval = this.getInterval();\n\tlet ms = intervalToMS(interval);\n\tconst duration = \"month\";\n\tlet dateComparison = row =>\n\t\tdayjs(row.date)\n\t\t\t.startOf()\n\t\t\t.valueOf();\n\tlet ts = this.groupBy(dateComparison)\n\t\t.select(group => {\n\t\t\tconst date = dayjs(group.first().date)\n\t\t\t\t.startOf(duration)\n\t\t\t\t.toDate();\n\t\t\tlet fullCount = Math.floor(\n\t\t\t\tdayjs(date)\n\t\t\t\t\t.endOf(\"month\")\n\t\t\t\t\t.diff(dayjs(date), \"millisecond\") / ms\n\t\t\t);\n\t\t\tlet days = new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\n\t\t\tlet count = group\n\t\t\t\t.getSeries(\"value\")\n\t\t\t\t.where(v => v && v !== 0)\n\t\t\t\t.toArray().length;\n\t\t\tlet value = group\n\t\t\t\t.getSeries(\"value\")\n\t\t\t\t.where(v => !isNaN(v))\n\t\t\t\t.sum();\n\t\t\treturn {\n\t\t\t\tdate,\n\t\t\t\tvalue: isNaN(value) ? 0 : value,\n\t\t\t\tcount,\n\t\t\t\tfullCount,\n\t\t\t\tscore: count / fullCount\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => row.date.toDate());\n\treturn new Timeseries(ts);\n}\nTimeseries.prototype.monthlyWithQual = monthlyWithQual;\n\nfunction threeYearAverage(date, series = \"value\", defaultValue) {\n\tdate = dayjs(date);\n\tif (!defaultValue)\n\t\tdefaultValue = this.getSeries(series)\n\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t.average();\n\n\t// let months = df\n\t// \t.before(date.valueOf())\n\t// \t.where(row => dayjs(row.date).month() === date.month())\n\t// \t.where(row => row.score > 0.9)\n\t// \t.tail(3);\n\tlet months = this.before(date.toDate())\n\t\t.where(row => row.date.month() === date.month())\n\t\t.orderBy(row => dayjs(row.date))\n\t\t.tail(3);\n\t// .where(row => row.score > 0.9);\n\tif (months.count() > 0) {\n\t\tlet val = months\n\t\t\t.getSeries(series)\n\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t.average();\n\t\treturn val;\n\t} else {\n\t\treturn defaultValue;\n\t}\n}\nTimeseries.prototype.threeYearAverage = threeYearAverage;\n\nfunction averageFill() {\n\tlet df = this;\n\tlet avg = df\n\t\t// .where(row => row.score ?row.score >= 0.9)\n\t\t.getSeries(\"value\")\n\t\t.where(v => !isNaN(v) && v !== null)\n\t\t.average();\n\tlet monthlyAvg = df\n\t\t.generateSeries({\n\t\t\trollingAverage: row => df.threeYearAverage(row.date, \"value\", avg)\n\t\t})\n\t\t.generateSeries({\n\t\t\tflag: row => (row.value ? row.flag : [\"filled\", ...(row.flag || [])])\n\t\t})\n\t\t.generateSeries({\n\t\t\tvalue: row => (row.value ? row.value : row.rollingAverage)\n\t\t})\n\t\t.dropSeries([\"rollingAverage\"]);\n\treturn new Timeseries(monthlyAvg);\n}\n\nTimeseries.prototype.averageFill = averageFill;\n\n// Static Methods\nfunction blank(startDate, endDate, [duration, value = 1], flag) {\n\tif ([\"minute\", \"hour\", \"day\", \"month\", \"year\"].indexOf(duration) < 0) {\n\t\tconsole.error(interval);\n\t\tthrow new Error(\"interval type not supported\");\n\t}\n\tstartDate = dayjs(startDate);\n\tendDate = dayjs(endDate);\n\tlet dates = [startDate];\n\tlet interval = intervalToMS([duration, value]);\n\twhile (dates[dates.length - 1].valueOf() < endDate.valueOf()) {\n\t\tdates.push(dayjs(dates[dates.length - 1]).add(value, duration));\n\t}\n\tlet df = new Timeseries(dates.map(date => ({ date })));\n\n\tif (flag) {\n\t\tdf = new Timeseries(\n\t\t\tdf.generateSeries({\n\t\t\t\tflag: row => [flag]\n\t\t\t})\n\t\t);\n\t}\n\n\treturn df;\n}\nTimeseries.blank = blank;\nfunction aggregate(dataframes) {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df => new Timeseries(df));\n\tconst valueColumns = new Set(\n\t\tdataframes.map(df => df.getValueColumns()).reduce((a, b) => a.concat(b), [])\n\t);\n\tconst concatenated = dataForge.DataFrame.concat(dataframes)\n\t\t.groupBy(row => row.date)\n\t\t.select(group => {\n\t\t\tconst date = group.first().date;\n\t\t\tlet o = { date };\n\t\t\tvalueColumns.forEach(c => (o[c] = group.deflate(row => row[c]).sum()));\n\t\t\tgroup\n\t\t\t\t.getColumnNames()\n\t\t\t\t.filter(col => col !== \"date\")\n\t\t\t\t.filter(col => valueColumns.has(col) === -1)\n\t\t\t\t.forEach(col => {\n\t\t\t\t\tlet value = group\n\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t.distinct()\n\t\t\t\t\t\t.toArray();\n\t\t\t\t\tif (value.length === 1) value = value[0];\n\t\t\t\t\to[col] = value;\n\t\t\t\t\treturn;\n\t\t\t\t});\n\t\t\treturn o;\n\t\t})\n\t\t.inflate();\n\t// .toArray();\n\n\treturn new Timeseries(concatenated);\n}\nTimeseries.aggregate = aggregate;\nTimeseries.concat = dataframes => {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df =>\n\t\tnew Timeseries(df).withIndex(row => row.date.valueOf())\n\t);\n\tlet df = dataForge.DataFrame.concat(dataframes);\n\treturn new Timeseries(df);\n};\nTimeseries.merge = dataframes => {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df =>\n\t\tnew Timeseries(df).withIndex(row => row.date.valueOf())\n\t);\n\tlet df = dataForge.DataFrame.merge(dataframes);\n\treturn new Timeseries(df);\n};\n","import { DataFrame } from \"data-forge\";\n\nconst zerogrouping = dataframe => {\n  // group sequential\n  let df = dataframe.variableWindow(\n    (a, b) => a.value === b.value\n  );\n};\n\nfunction zeroCheck(df, threshold = 2) {\n  let zeroGroups = df\n    .variableWindow((a, b) => {\n      return a.value === b.value && a.value === 0;\n    })\n    .where(window => window.getIndex().count() >= threshold);\n  let zeroSummary = zeroGroups\n    .select(window => ({\n      start: window.first().date,\n      end: window.last().date,\n      count: window.count()\n    }))\n    .inflate(); // Series -> dataframe.\n  // .toArray()\n  return { zeroSummary, zeroGroups };\n}\n\nfunction zeroReplacement(df, threshold) {\n  let { zeroGroups } = zeroCheck(df, threshold);\n  let dfs = zeroGroups.toArray().map(zdf => {\n    zdf = zdf\n      .transformSeries({\n        value: () => null,\n        raw: 0,\n        flag: value => [\"zero\", ...(value || [])]\n      })\n      .withIndex(row => new Date(row.date).valueOf());\n    return zdf;\n  });\n  let merged = DataFrame.merge([df, ...dfs]);\n\n  return merged;\n}\nexport { zerogrouping, zeroReplacement, zeroCheck };\n"],"names":["intervalToMS","unit","value","start","dayjs","add","diff","valueFiller","fillType","startValue","endValue","entryIndex","numEntries","overrideValue","dateFunction","date","flag","indexOf","Error","fromPairs","toPairs","map","key","averageMonthlyMap","df","Map","group","select","month","first","getSeries","where","v","average","toArray","annualMonthlyAverageMap","groupBy","row","year","startOf","ts","Timeseries","downsample","avg","set","monthlyRollingAverageMap","years","series","months","toDate","inflate","withIndex","bake","data","averages","rollingWindow","window","last","has","forEach","before","count","fillMonthlyByMap","monthMap","get","fillMonthlyBAnnualyMap","annualMonthlyMap","pad","values","annualAverage","subset","after","subtract","r","hour","minute","appendPair","rval","deflate","x","std","sampleStandardDeviation","mean","_mean","ndf","generateSeries","ares","R","DataFrame","Math","abs","max","lambdaTest","n","i","alpha","p","pValue","t","degreeOfFreedom","Studentt","inv","tValue","lambda","sqrt","pow","modz","mad","median","modifiedZScoreTest","_median","medianAbsoluteDeviation","outliers","sort","a","b","filter","thresholds","upper","min","Infinity","lower","calculateChange","baseline","options","dataForge","config","others","valueOf","index","considerAllRows","call","this","removeOutliers","outlierCheck","raw","transformSeries","merge","baselinePercentChange","baselineDF","dfwb","indexer","interval","getInterval","baselineInterval","isEqual","console","error","indexedBaseline","at","delta","prototype","Object","create","constructor","getValueColumns","detectTypes","Type","distinct","Column","ms","end","getIndex","detectValues","orderBy","Frequency","Value","ceil","getDateRange","adjustment","endOf","calculateStatistics","column","filterZeros","filterNegative","isNaN","q1","quantile","q3","iqr","calculateThresholdOptions","k","noflags","Array","isArray","length","floor","esd","dataset","newdf","dataframe","trip","pair","assign","push","outlierValues","outlier","takeWhile","iterations","rosnerTest","box","lowerInner","upperInner","lowerOuter","upperOuter","getBestThreshold","thresholdGroups","ckmeans","reduce","transformAllSeries","adjustmentFunction","exclude","columns","col","reset","withSeries","clean","duration","dateComparison","valueColumns","sum","getColumnNames","upsample","fillGaps","durationValue","pairA","pairB","startDate","gapExists","endDate","newEntries","e","gapFill","populate","type","reduceToValue","columnNames","chooseValue","rollingPercentChange","full","percentChange","addBaselineDelta","annualIntensity","normalizeValue","scaler","_this","renameSeries","dropSeries","fillMissing","m","blank","undefined","fillNull","callback","seriesCheck","currentValue","zeroReplacement","threshold","dfs","zeroGroups","variableWindow","zeroSummary","zeroCheck","zdf","Date","monthlyWithQual","fullCount","getFullYear","getMonth","getDate","score","threeYearAverage","defaultValue","tail","averageFill","rollingAverage","dates","aggregate","dataframes","Set","concat","o","c"],"mappings":"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"}
{"version":3,"file":"index.module.js","sources":["../src/lib/Timeseries.interval.js","../src/lib/Timeseries.fill.js","../src/lib/Timeseries.statistics.js","../src/index.js","../src/lib/misc.js"],"sourcesContent":["import dayjs from \"dayjs\";\n\nconst msToInterval = ms => {\n\tlet start = dayjs();\n\tlet end = dayjs().add(ms);\n\tif (end.diff(start, \"month\", true) >= 11) {\n\t\treturn [\"year\", Math.ceil(end.diff(start, \"year\", true))];\n\t} else if (end.diff(start, \"day\", true) >= 28) {\n\t\treturn [\"month\", Math.ceil(end.diff(start, \"month\", true))];\n\t} else if (end.diff(start, \"hour\", true) >= 23) {\n\t\treturn [\"day\", Math.ceil(end.diff(start, \"day\", true))];\n\t} else if (end.diff(start, \"minute\", true) >= 55) {\n\t\treturn [\"hour\", Math.ceil(end.diff(start, \"hour\", true))];\n\t} else {\n\t\treturn [\"minute\", end.diff(start, \"minute\")];\n\t}\n};\nconst intervalToMS = ([unit, value]) => {\n\tlet start = dayjs();\n\tlet end = dayjs().add(value, unit);\n\treturn end.diff(start);\n};\nfunction calculateInterval(df, startDate, endDate) {\n\tif (!startDate) startDate = df.first.date;\n\tif (!endDate) endDate = df.last.date;\n\tfunction computeInterval(window) {\n\t\treturn window.last() - window.first();\n\t}\n\tconst intervals = df\n\t\t.between(startDate, endDate)\n\t\t.getIndex()\n\t\t.window(2)\n\t\t.select(computeInterval)\n\t\t.detectValues()\n\t\t.orderBy(row => row.Frequency);\n\n\tlet val = intervals.last().Value;\n\treturn msToInterval(val);\n}\nexport { msToInterval, intervalToMS, calculateInterval };\n","import dayjs from \"dayjs\";\nimport fromPairs from \"lodash/fromPairs\";\nimport toPairs from \"lodash/toPairs\";\nimport { mean } from \"simple-statistics\";\nimport { Timeseries } from \"../index\";\nconst gapExists = ([duration, durationValue = 1]) => (pairA, pairB) => {\n\tconst startDate = pairA[0];\n\tconst endDate = pairB[0];\n\tlet gapSize = Math.floor(\n\t\tdayjs(endDate).diff(startDate, duration, true) / durationValue\n\t);\n\n\tif (gapSize > 0) return true;\n\treturn false;\n};\n\nconst valueFiller = (\n\tfillType,\n\t{ startValue, endValue, entryIndex, numEntries },\n\t{ overrideValue, dateFunction, date, flag }\n) => {\n\tif (\n\t\t[\"pad\", \"interpolate\", \"average\", \"dateFunction\", \"value\"].indexOf(\n\t\t\tfillType\n\t\t) === -1\n\t) {\n\t\tthrow new Error(\"fill Type not supported\");\n\t}\n\tlet value;\n\tif (fillType === \"pad\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\treturn [key, startValue[key]];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", \"pad\"];\n\t} else if (fillType === \"interpolate\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv =\n\t\t\t\t\tstartValue[key] +\n\t\t\t\t\t(entryIndex + 1) *\n\t\t\t\t\t\t((endValue[key] - startValue[key]) / (numEntries + 1));\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"average\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv = (startValue[key] + endValue[key]) / numEntries;\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"dateFunction\" && dateFunction) {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv = dateFunction(date);\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"value\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv;\n\t\t\t\tif (typeof overrideValue === \"number\") {\n\t\t\t\t\tnv = overrideValue;\n\t\t\t\t} else {\n\t\t\t\t\tnv = overrideValue[key];\n\t\t\t\t}\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\treturn [key, null];\n\t\t\t})\n\t\t);\n\t\tflag = [\"fill\"];\n\t}\n\treturn { ...value, flag };\n};\n\nconst gapFill = (\n\tfillType,\n\t[duration, durationValue],\n\t{ overrideValue, dateFunction, flag } = {}\n) => (pairA, pairB) => {\n\t// Fill values forward.\n\n\tconst startDate = dayjs(pairA[0]);\n\tconst endDate = dayjs(pairB[0]);\n\tlet gapSize = Math.floor(\n\t\tdayjs(endDate).diff(startDate, duration) / durationValue\n\t);\n\tconst numEntries = gapSize - 1;\n\tconst startValue = pairA[1];\n\tconst endValue = pairB[1];\n\tconst newEntries = [];\n\tfor (let entryIndex = 0; entryIndex < numEntries; ++entryIndex) {\n\t\tlet adjustment = valueFiller(\n\t\t\t\tfillType,\n\t\t\t\t{ startValue, endValue, entryIndex, numEntries },\n\t\t\t\t{\n\t\t\t\t\toverrideValue,\n\t\t\t\t\tdateFunction,\n\t\t\t\t\tflag\n\t\t\t\t}\n\t\t\t),\n\t\t\tdate = dayjs(startDate)\n\t\t\t\t.add((entryIndex + 1) * durationValue, duration)\n\t\t\t\t.toDate();\n\t\tlet e = [date.valueOf(), Object.assign({}, adjustment, { date })];\n\t\tnewEntries.push(e);\n\t}\n\n\treturn newEntries;\n};\n\n// Basic Fill Functions\nconst averageMonthlyMap = df => {\n\tlet data = df.group(\"month\").select(group => ({\n\t\tmonth: group.first().date.month(),\n\t\tvalue: group\n\t\t\t.getSeries(\"value\")\n\t\t\t.where(v => v)\n\t\t\t.average()\n\t}));\n\tlet m = new Map(data.toArray().map(({ month, value }) => [month, value]));\n\tlet avg = data.getSeries(\"value\").average();\n\tm.set(\"default\", avg);\n\treturn m;\n};\n\nconst annualMonthlyAverageMap = df => {\n\tlet data = df\n\t\t.groupBy(row => row.date.year())\n\t\t.select(group => {\n\t\t\tconst date = group.first().date.startOf(\"year\");\n\t\t\tlet ts = new Timeseries(group).downsample([\"month\", 1], \"avg\");\n\t\t\tlet avg = ts.getSeries(\"value\").average();\n\t\t\tlet map = averageMonthlyMap(ts);\n\t\t\tmap.set(\"avg\", avg);\n\t\t\treturn [date.year(), map];\n\t\t});\n\tlet m = new Map(data.toArray());\n\t// let deafult =\n\treturn m;\n};\n\nconst monthlyRollingAverageMap = (\n\tdf,\n\t{ years = 3, series = \"value\", aggregator = \"average\", validOnly = true } = {}\n) => {\n\tlet months = df\n\t\t.groupBy(row => row.date.startOf(\"month\").toDate())\n\t\t.select(group => {\n\t\t\tlet date = group.first().date.startOf(\"month\");\n\t\t\tlet value = group\n\t\t\t\t.getSeries(series)\n\t\t\t\t.where(v => (validOnly ? Boolean(v) : true))\n\t\t\t\t.average();\n\t\t\treturn { date, value };\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => row.date.toDate())\n\t\t.bake();\n\tlet data = months\n\t\t.groupBy(row => row.date.month())\n\t\t.select(group => {\n\t\t\tlet values = new Map(\n\t\t\t\tgroup.rollingWindow(years).select(window => [\n\t\t\t\t\twindow.last().date.year(),\n\t\t\t\t\twindow\n\t\t\t\t\t\t.getSeries(series)\n\t\t\t\t\t\t.where(v => (validOnly ? Boolean(v) : true))\n\t\t\t\t\t\t.average() ||\n\t\t\t\t\t\tgroup\n\t\t\t\t\t\t\t.getSeries(series)\n\t\t\t\t\t\t\t.where(v => (validOnly ? Boolean(v) : true))\n\t\t\t\t\t\t\t.average()\n\t\t\t\t])\n\t\t\t);\n\t\t\tgroup\n\t\t\t\t.where(row => !values.has(row.date.year()))\n\t\t\t\t.forEach(row => {\n\t\t\t\t\tlet value =\n\t\t\t\t\t\tmonths.before(row.date.toDate()).count() > 0\n\t\t\t\t\t\t\t? months.before(row.date.toDate()).last()[series]\n\t\t\t\t\t\t\t: months.getSeries(series).average();\n\t\t\t\t\tvalues.set(row.date.year(), value);\n\t\t\t\t});\n\n\t\t\tlet month = group.first().date.month();\n\t\t\treturn [month, values];\n\t\t});\n\n\treturn new Map(data.toArray());\n};\n\nconst fillMonthlyByMap = monthMap => row => monthMap.get(row.date.month());\nconst fillMonthlyBAnnualyMap = annualMonthlyMap => row => {\n\tlet month = row.date.month(),\n\t\tyear = row.date.year();\n\tif (annualMonthlyMap.has(month)) {\n\t\tif (annualMonthlyMap.has(month)) {\n\t\t\treturn annualMonthlyMap.get(month).get(year);\n\t\t} else {\n\t\t\treturn mean([...annualMonthlyMap.get(month).values()]);\n\t\t}\n\t} else {\n\t\treturn mean(\n\t\t\t[...annualMonthlyMap.values()].map(m =>\n\t\t\t\t[...m.values()].reduce((a, b) => a.concat(b), [])\n\t\t\t)\n\t\t);\n\t}\n};\n\nconst pad = (df, { validOnly = true, series = \"value\" } = {}) => row => {\n\tlet values = df\n\t\t.before(row.date.toDate())\n\t\t.getSeries(series)\n\t\t.where(v => v);\n\tlet value = values.count() > 0 ? values.last() : 0;\n\treturn value;\n};\nconst annualAverage = (\n\tdf,\n\t{ validOnly = true, series = \"value\", years = 3, defaultValue } = {}\n) => row => {\n\tlet subset = df\n\t\t.subset([\"date\", series])\n\t\t.after(row.date.subtract(years, \"year\").toDate())\n\t\t.before(row.date.toDate())\n\t\t.bake();\n\tlet values = subset\n\t\t.where(r => r.date.month() === row.date.month())\n\t\t.where(r => r.date.date() === row.date.date())\n\t\t.where(r => r.date.hour() === row.date.hour())\n\t\t.where(r => r.date.minute() === row.date.minute())\n\t\t.getSeries(series)\n\t\t.where(v => v);\n\n\tlet value;\n\tif (values.count() < years) {\n\t\tvalue = values\n\t\t\t.appendPair([\n\t\t\t\tnull,\n\t\t\t\tsubset\n\t\t\t\t\t.getSeries(series)\n\t\t\t\t\t.where(v => v)\n\t\t\t\t\t.average()\n\t\t\t])\n\t\t\t.average();\n\t} else {\n\t\tvalue = values.average();\n\t}\n\treturn value;\n};\nexport {\n\tgapExists,\n\tgapFill,\n\taverageMonthlyMap,\n\tfillMonthlyByMap,\n\tpad,\n\tannualAverage,\n\tannualMonthlyAverageMap,\n\tmonthlyRollingAverageMap,\n\tfillMonthlyBAnnualyMap\n};\n","// Source: https://www.itl.nist.gov/div898/handbook/eda/section3/eda35h3.htm\n// https://vsp.pnnl.gov/help/Vsample/Rosners_Outlier_Test.htm\n// https://www.itl.nist.gov/div898/handbook/prc/section1/prc16.htm\n// https://www.math.ucla.edu/~tom/distributions/KolSmir2.html?\nimport { DataFrame } from \"data-forge\";\nimport {\n  sampleStandardDeviation,\n  mean as _mean,\n  max,\n  median as _median,\n  medianAbsoluteDeviation,\n  quantile\n} from \"simple-statistics\";\nimport { Studentt } from \"distributions\";\nimport dayjs from \"dayjs\";\n\nfunction rval(df) {\n  let values = df.deflate(row => row.x).toArray();\n  let std = sampleStandardDeviation(values);\n  let mean = _mean(values);\n  if (std === 0) {\n    let ndf = df.generateSeries({ ares: row => 0 });\n    return { R: 0, std, mean, df: ndf };\n  }\n  let ndf = new DataFrame({\n    values: values.map(x => ({\n      x,\n      ares: Math.abs(x - mean) / std\n    }))\n  });\n  let R = max(ndf.deflate(row => row.ares).toArray());\n  return { R, df: ndf, std, mean };\n}\n\nfunction pValue(n, i, alpha) {\n  let p = 1 - alpha / (2 * (n - i + 1));\n  return p;\n}\nfunction tValue(p, degreeOfFreedom) {\n  let qt = new Studentt(degreeOfFreedom);\n  let t = qt.inv(p);\n  return t;\n}\n//\nfunction lambdaTest(n, i, alpha) {\n  let p = pValue(n, i, alpha);\n  let df = n - i - 1;\n  let t = tValue(p, df);\n  let lambda =\n    (t * (n - i)) /\n    Math.sqrt((n - i - 1 + Math.pow(t, 2)) * (n - i + 1));\n  return { lambda, p, t };\n}\nfunction rosnerTest(dataset = [], k = 10, alpha = 0.05) {\n  let dataframe = new DataFrame({\n    values: dataset.map(x => ({ x }))\n  });\n  let n = dataframe.getSeries(\"x\").count();\n  let newdf;\n  let i = 1;\n  let outliers = [];\n  let trip = false;\n  while (i <= k) {\n    let pair = {};\n    let s = Date.now();\n    if (i === 1) {\n      let { R, df, mean, std } = rval(dataframe);\n      newdf = df.where(row => row.ares !== R);\n      pair = Object.assign({}, pair, {\n        mean,\n        std,\n        Value: df\n          .where(row => row.ares === R)\n          .getSeries(\"x\")\n          .first(),\n        R\n      });\n    } else {\n      let { R, df, mean, std } = rval(newdf);\n      newdf = df.where(row => row.ares !== R);\n      pair = Object.assign({}, pair, {\n        mean,\n        std,\n        Value: df\n          .where(row => row.ares === R)\n          .getSeries(\"x\")\n          .first(),\n        R\n      });\n    }\n    let { lambda, p, t } = lambdaTest(n, i, alpha);\n    pair = Object.assign({}, pair, { lambda });\n    outliers.push(pair);\n    if (trip && pair.R > pair.lambda) trip = false;\n    if (pair.R === 0) break;\n    if (pair.R < pair.lambda) {\n      if (trip) {\n        break;\n      } else {\n        trip = true;\n      }\n    }\n    i++;\n  }\n  outliers = new DataFrame(outliers)\n    .generateSeries({\n      outlier: row => row.R > row.lambda\n    })\n    .takeWhile(row => row.outlier);\n  let outlierValues = outliers\n    .where(row => row.Value > 0)\n    .deflate(row => row.Value);\n  let thresholds = {\n    lower: 0,\n    upper:\n      outlierValues.count() > 0 ? outlierValues.min() : Infinity\n  };\n  return {\n    outliers,\n    thresholds,\n    iterations: i\n  };\n}\nconst modz = (value, mad, median) => {\n  return (0.6745 * (value - median)) / mad;\n};\nfunction modifiedZScoreTest(values) {\n  let median = _median(values);\n  let mad = medianAbsoluteDeviation(values);\n  values = values\n    .sort((a, b) => b - a)\n    .filter(v => v > 0)\n    .map(v => [v, modz(v, mad, median)]);\n  let outliers = values.filter(\n    ([v, modz]) => Math.abs(modz) >= 3.5\n  );\n  let upper = Math.min(\n    ...[Infinity, ...outliers.map(v => v[0])]\n  );\n  // let score,\n  // \tvalue,\n  // \tthreshold = Infinity,\n  // \tindex = 0;\n  // do {\n  // \tvalue = values[index];\n  // \tscore = modz(value, mad, median);\n  // \tif (Math.abs(score) >= 3.5) threshold = value;\n  // } while (score >= 3.5);\n  return { thresholds: { upper, lower: 0 } };\n}\nfunction boxPlotTest(values) {\n  let q1 = quantile(values, 0.25);\n  let q3 = quantile(values, 0.75);\n  let iqr = q3 - q1;\n  return {\n    thresholds: {\n      lowerInner: q1 - 1.5 * iqr,\n      upperInner: q1 - 3 * iqr,\n      lowerOuter: q3 + 1.5 * iqr,\n      upperOuter: q3 + 3 * iqr\n    }\n  };\n}\nfunction calculateOutlierThresholds(\n  df,\n  { k, filterZeros = true } = {}\n) {\n  let values = df\n    .where(\n      row =>\n        row.flag === null ||\n        row.flag === undefined ||\n        Array.isArray(row.flag)\n    )\n    .where(row => !isNaN(row.value) && row.value !== null)\n    .getSeries(\"value\")\n    .bake();\n  if (filterZeros) values = values.where(value => value > 0);\n  if (!k) {\n    k =\n      values.count() < 1000\n        ? Math.floor(values.count() * 0.15)\n        : Math.min(...[1000, Math.floor(values.count() * 0.02)]);\n  }\n  if (values.count < 5) return {};\n  let { outliers, threshold } = rosnerTest(values.toArray(), k);\n  return { outliers, threshold };\n}\n\nfunction zeroCheck(df, threshold = 2) {\n  let zeroGroups = df\n    .variableWindow((a, b) => {\n      return a.value === b.value && a.value === 0;\n    })\n    .where(window => window.getIndex().count() >= threshold);\n  let zeroSummary = zeroGroups\n    .select(window => ({\n      start: window.first().date,\n      end: window.last().date,\n      count: window.count()\n    }))\n    .inflate(); // Series -> dataframe.\n  // .toArray()\n  return { zeroSummary, zeroGroups };\n}\n\nfunction zeroReplacement(df, threshold) {\n  let { zeroGroups } = zeroCheck(df, threshold);\n  zeroGroups.forEach(dff => {\n    dff = dff.transformSeries({\n      value: value => null,\n      flag: value => [\"zero\"]\n    });\n    df = DataFrame.merge([df, dff]);\n  });\n  return df;\n}\nfunction isOutlier(value, { lower, upper }) {\n  if (value < lower || value >= upper) {\n    return true;\n  }\n  return false;\n}\nfunction validMean(df) {\n  let values = df\n    .getSeries(\"value\")\n    .where(value => typeof value === \"number\");\n  return values.average();\n}\nfunction validMonthlyMeanMap(df) {\n  let dateComparison = row =>\n    dayjs(row.date)\n      .startOf(\"month\")\n      .month();\n\n  df = df\n    .where(row => typeof row.value === \"number\")\n    .groupBy(dateComparison)\n    .select(group => ({\n      month: new Date(group.first().date).getMonth(),\n      value: group.deflate(row => row.value).average()\n    }));\n  return new Map(\n    df.toArray().map(({ month, value }) => [month, value])\n  );\n}\n\nfunction quality(df) {\n  let count = df.getIndex().count();\n  let valid = df\n    .getSeries(\"flag\")\n    .where(\n      value =>\n        value === null ||\n        (Array.isArray(value) && value.length === 0)\n    )\n    .count();\n  let missing = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"missing\") !== -1)\n    .count();\n  let dirty = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"clean\") !== -1)\n    .count();\n  let zerod = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"zero\") !== -1)\n    .count();\n  let breakdown = {\n    valid: valid / count,\n    missing: missing / count,\n    invalid: (dirty + zerod) / count\n  };\n  let report = {\n    accuracy: (1 - dirty / count) * 4,\n    completeness: 4 * breakdown.valid,\n    consistency: 4 * ((count - missing - zerod) / count)\n  };\n  return { breakdown, report, count };\n}\n\nexport {\n  rosnerTest,\n  modifiedZScoreTest,\n  boxPlotTest,\n  calculateOutlierThresholds,\n  zeroReplacement,\n  isOutlier,\n  validMean,\n  validMonthlyMeanMap,\n  quality\n};\n","import dayjs from \"dayjs\";\nimport dataForge from \"data-forge\";\nimport { msToInterval, intervalToMS } from \"./lib/Timeseries.interval\";\nimport isEqual from \"lodash/isEqual\";\nimport has from \"lodash/has\";\nimport get from \"lodash/get\";\nimport fromPairs from \"lodash/fromPairs\";\nimport {\n\tgapExists,\n\tgapFill,\n\taverageMonthlyMap,\n\tfillMonthlyByMap,\n\tpad,\n\tannualAverage,\n\tannualMonthlyAverageMap,\n\tmonthlyRollingAverageMap,\n\tfillMonthlyBAnnualyMap\n} from \"./lib/Timeseries.fill\";\nimport {\n\tckmeans,\n\tmax,\n\tmedianAbsoluteDeviation,\n\tquantile\n} from \"simple-statistics\";\n\nimport {\n\trosnerTest,\n\tboxPlotTest,\n\tmodifiedZScoreTest\n} from \"./lib/Timeseries.statistics\";\nimport { annualScale, calculateChange } from \"./lib/misc\";\n\n// export default ;\n// Fill Options\nexport {\n\tTimeseries,\n\tannualAverage,\n\taverageMonthlyMap,\n\tannualMonthlyAverageMap,\n\tmonthlyRollingAverageMap,\n\tfillMonthlyBAnnualyMap,\n\tfillMonthlyByMap,\n\tpad\n};\nfunction Timeseries(data = [], options = {}) {\n\t// const { msIndex } = options;\n\tif (data instanceof Timeseries) {\n\t\treturn data;\n\t}\n\tif (data instanceof dataForge.DataFrame) {\n\t\tdata = data.toArray();\n\t}\n\n\tdata = data\n\t\t.map(({ date, ...others }) => ({ date: dayjs(date), ...others }))\n\t\t.sort((a, b) => a.date.valueOf() - b.date.valueOf());\n\tlet config = {\n\t\t// columns: ['date', 'value', 'raw', 'flag'],\n\t\tvalues: data,\n\t\tindex: data.map(({ date }) => date.toDate()),\n\t\tconsiderAllRows: true\n\t};\n\tdataForge.DataFrame.call(this, config);\n}\n\nTimeseries.prototype = Object.create(dataForge.DataFrame.prototype);\nTimeseries.prototype.constructor = Timeseries;\n\n// Getters\nfunction getValueColumns() {\n\treturn this.detectTypes()\n\t\t.where(row => row.Type === \"number\")\n\t\t.distinct(row => row.Column)\n\t\t.getSeries(\"Column\")\n\t\t.toArray();\n}\nfunction interval() {\n\tconst computeInterval = window => window.last() - window.first();\n\tconst intervals = this.getIndex()\n\t\t.window(2)\n\t\t.select(computeInterval)\n\t\t.detectValues()\n\t\t.orderBy(row => -row.Frequency);\n\t// .orderBy(row => row.Value);\n\n\tlet val = intervals.first().Value;\n\n\treturn msToInterval(val);\n}\n\nfunction dateRange(unit, adjustment) {\n\tlet start = dayjs(this.first().date),\n\t\tend = dayjs(this.last().date);\n\tif (adjustment) {\n\t\tstart = start.startOf(adjustment);\n\t\tend = end.endOf(adjustment);\n\t}\n\treturn end.diff(start, unit);\n}\nTimeseries.prototype.getValueColumns = getValueColumns;\nTimeseries.prototype.getInterval = interval;\nTimeseries.prototype.getDateRange = dateRange;\n\n// Statistics\nfunction cvrsme(actual, simulated) {\n\tlet df = this.subset([actual, simulated])\n\t\t.resetIndex()\n\t\t.generateSeries({\n\t\t\tactual: row => row[actual] || 0,\n\t\t\tsimulated: row => row[simulated] || 0\n\t\t})\n\t\t.dropSeries([actual, simulated])\n\t\t.generateSeries({ diff: row => row.actual - row.simulated });\n\tlet n = df.count();\n\tlet p = 1.0;\n\tlet ybar = df.getSeries(\"actual\").sum() / n;\n\tlet v = Math.sqrt(df.getSeries(\"diff\").sum() / (n - p)) / ybar;\n\treturn v;\n}\nfunction nmbe(actual, simulated) {\n\tlet df = this.subset([actual, simulated])\n\t\t.resetIndex()\n\t\t.generateSeries({\n\t\t\tactual: row => row[actual] || 0,\n\t\t\tsimulated: row => row[simulated] || 0\n\t\t})\n\t\t.dropSeries([actual, simulated])\n\t\t.generateSeries({ diff: row => row.actual - row.simulated });\n\n\tlet n = df.count();\n\tlet p = 1.0;\n\tlet ybar = df.getSeries(\"actual\").sum() / n;\n\tlet b = df.getSeries(\"diff\").sum() / ((n - p) * ybar);\n\treturn b;\n}\nTimeseries.prototype.cvrsme = cvrsme;\nTimeseries.prototype.nmbe = nmbe;\n\n// Methods\nfunction calculateThresholdOptions({\n\tk,\n\tfilterZeros = true,\n\tfilterNegative = true\n} = {}) {\n\tlet noflags = this.where(\n\t\trow =>\n\t\t\trow.flag === null ||\n\t\t\trow.flag === undefined ||\n\t\t\t(Array.isArray(row.flag) && row.flag.length === 0)\n\t)\n\t\t.where(row => !isNaN(row.value) && row.value !== null)\n\t\t.getSeries(\"value\");\n\tif (filterZeros) noflags = noflags.where(value => value !== 0);\n\tif (filterNegative) noflags = noflags.where(value => value > 0);\n\tif (!k) {\n\t\tk =\n\t\t\tnoflags.count() < 1000\n\t\t\t\t? Math.floor(noflags.count() * 0.15)\n\t\t\t\t: Math.min(...[1000, Math.floor(noflags.count() * 0.02)]);\n\t}\n\tif (noflags.count() < 5) return {};\n\tlet { thresholds: esd } = rosnerTest(noflags.toArray(), k);\n\tlet { thresholds: box } = boxPlotTest(noflags.toArray());\n\tlet { thresholds: modz } = modifiedZScoreTest(noflags.toArray());\n\treturn { esd, box, modz };\n}\n\nfunction getBestThreshold() {\n\ttry {\n\t\tlet thresholds = this.calculateThresholdOptions();\n\t\tconst thresholdGroups = ckmeans(\n\t\t\t[\n\t\t\t\tget(thresholds, \"esd.upper\", null),\n\t\t\t\tget(thresholds, \"modz.upper\", null),\n\t\t\t\tget(thresholds, \"box.lowerOuter\", null),\n\t\t\t\tget(thresholds, \"box.upperOuter\", null)\n\t\t\t].filter(v => v),\n\t\t\t2\n\t\t);\n\t\tlet threshold_actual = max(\n\t\t\tthresholdGroups.reduce((a, b) => (a.length > b.length ? a : b))\n\t\t);\n\t\treturn threshold_actual;\n\t} catch (error) {\n\t\tconsole.error(error);\n\t\tthrow new Error(\"Cannot determine threshold\");\n\t}\n}\n\nfunction calculateStatistics(options = {}) {\n\tconst {\n\t\tcolumn = \"value\",\n\t\tfilterZeros = false,\n\t\tfilterNegative = true\n\t} = options;\n\tlet series = this.deflate(row => row[column]).where(value => !isNaN(value));\n\tif (filterNegative) series = series.where(value => value >= 0);\n\tif (filterZeros) series = series.where(value => value !== 0);\n\tlet median = series.median();\n\tlet mean = series.average();\n\tlet count = series.count();\n\tlet std = series.std();\n\tlet min = series.min();\n\tlet max = series.max();\n\tlet mad = medianAbsoluteDeviation(series.toArray());\n\tlet q1 = quantile(series.toArray(), 0.25);\n\tlet q3 = quantile(series.toArray(), 0.75);\n\tlet iqr = q3 - q1;\n\tlet stats = {\n\t\tmedian,\n\t\tmean,\n\t\tcount,\n\t\tstd,\n\t\tmin,\n\t\tmax,\n\t\tmad,\n\t\tq1,\n\t\tq3,\n\t\tiqr\n\t};\n\treturn stats;\n}\n\nTimeseries.prototype.calculateStatistics = calculateStatistics;\nTimeseries.prototype.calculateThresholdOptions = calculateThresholdOptions;\nTimeseries.prototype.getBestThreshold = getBestThreshold;\n\n// Chainable Methods\nfunction betweenDates(start, end) {\n\tstart = dayjs(start).toDate();\n\tend = dayjs(end).toDate();\n\tlet df = this.between(start, end);\n\treturn new Timeseries(df);\n}\nTimeseries.prototype.betweenDates = betweenDates;\n\nfunction transformAllSeries(adjustmentFunction, { exclude }) {\n\tlet df = this;\n\tlet columns = (columns = df\n\t\t.detectTypes()\n\t\t.where(row => row.Type === \"number\")\n\t\t.distinct(row => row.Column)\n\t\t.getSeries(\"Column\")\n\t\t.toArray());\n\tif (exclude && Array.isArray(exclude)) {\n\t\tcolumns = columns.filter(col => exclude.indexOf(col) === -1);\n\t}\n\tcolumns.forEach(col => {\n\t\tdf = df.transformSeries({\n\t\t\t[col]: value => {\n\t\t\t\tif (isNaN(value)) {\n\t\t\t\t\treturn value;\n\t\t\t\t} else {\n\t\t\t\t\treturn adjustmentFunction(value);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\treturn df;\n}\n\nTimeseries.prototype.transformAllSeries = transformAllSeries;\n\nfunction reset() {\n\tlet df = this.withSeries({\n\t\tvalue: row =>\n\t\t\trow.flag && Array.isArray(row.flag) && row.flag.length > 0\n\t\t\t\t? row.raw\n\t\t\t\t: row.value\n\t})\n\t\t.subset([\"date\", \"value\"])\n\t\t.where(row => !isNaN(row.value) && row.value !== null);\n\treturn new Timeseries(df);\n}\nTimeseries.prototype.reset = reset;\n\n// To and From Totalizers\nfunction fromTotalizer(col = \"value\", { acceptInitial = false } = {}) {\n\tlet array = this.subset([\"date\", col])\n\t\t.toArray()\n\t\t.map((v, i, arr) => {\n\t\t\tlet val = acceptInitial ? v[col] : null;\n\t\t\tif (arr[i - 1]) {\n\t\t\t\tval = v[col] - arr[i - 1][col];\n\t\t\t}\n\t\t\treturn { date: v.date, [col]: val };\n\t\t});\n\tlet ndf = new Timeseries(a);\n\treturn ndf;\n}\nfunction toTotalizer(col, { adjustInitial } = {}) {\n\tlet array = this.subset([\"date\", col])\n\t\t.toArray()\n\t\t.map((v, i, arr) => {\n\t\t\tlet val = arr\n\t\t\t\t.slice(0, i)\n\t\t\t\t.map(obj => obj[col])\n\t\t\t\t.reduce((a, b) => a + b, 0);\n\t\t\treturn { date: v.date, [col]: val };\n\t\t});\n\tlet ndf = new Timeseries(a);\n\treturn ndf;\n}\nTimeseries.prototype.fromTotalizer = fromTotalizer;\nTimeseries.prototype.toTotalizer = toTotalizer;\n\nfunction group(interval, toArray) {\n\tif ([\"hour\", \"day\", \"month\", \"year\"].indexOf(interval) === -1)\n\t\tthrow new Error(\"interval type not supported\");\n\tlet dateComparison = row => dayjs(row.date).startOf(interval);\n\tlet groups = this.groupBy(dateComparison);\n\treturn groups;\n}\n\nTimeseries.prototype.group = group;\n\nfunction removeOutliers({ series = \"value\", lower, upper } = {}) {\n\tif (lower > upper) throw new Error(\"thresholds invalid\");\n\tlet outlierCheck = (value, lower, upper) => value < lower || value > upper;\n\n\tlet outliers = this.where(row => outlierCheck(row[series], lower, upper))\n\t\t.generateSeries({\n\t\t\traw: row => row[series],\n\t\t\tflag: ({ flag = [] }) => [\"outlier\", ...flag]\n\t\t})\n\t\t.transformSeries({\n\t\t\t[series]: value => null\n\t\t});\n\n\tlet merged = this.merge(outliers);\n\treturn new Timeseries(merged);\n}\n\nTimeseries.prototype.removeOutliers = removeOutliers;\nTimeseries.prototype.clean = removeOutliers;\n\nfunction downsample([duration, value], fillType = \"sum\") {\n\tif ([\"hour\", \"day\", \"month\", \"year\"].indexOf(duration) === -1)\n\t\tthrow new Error(\"interval type not supported\");\n\tif ([\"sum\", \"avg\", \"median\"].indexOf(fillType) === -1) {\n\t\tthrow new Error(\"aggregation type not suppported, only:\");\n\t}\n\tlet dateComparison = row => row.date.startOf(duration);\n\tlet valueColumns = this.getValueColumns();\n\tif (value) {\n\t\tdateComparison = row => row.date.startOf(duration).add(value, duration);\n\t}\n\tlet df = this.groupBy(dateComparison)\n\t\t.select(group => {\n\t\t\tconst date = group.first().date.startOf(duration);\n\t\t\treturn {\n\t\t\t\tdate,\n\t\t\t\t...fromPairs([\n\t\t\t\t\t...valueColumns.map(col => {\n\t\t\t\t\t\tlet value;\n\t\t\t\t\t\tswitch (fillType) {\n\t\t\t\t\t\t\tcase \"median\":\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.median();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"avg\":\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.average();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t// sum\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.sum();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn [col, value];\n\t\t\t\t\t}),\n\t\t\t\t\t...group\n\t\t\t\t\t\t.getColumnNames()\n\t\t\t\t\t\t.filter(col => col !== \"date\")\n\t\t\t\t\t\t.filter(col => valueColumns.indexOf(col) === -1)\n\t\t\t\t\t\t.map(col => {\n\t\t\t\t\t\t\tlet value = group\n\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t.distinct()\n\t\t\t\t\t\t\t\t.toArray();\n\t\t\t\t\t\t\tif (value.length === 1) value = value[0];\n\t\t\t\t\t\t\treturn [col, value];\n\t\t\t\t\t\t})\n\t\t\t\t])\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => dayjs(row.date).toDate());\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.downsample = downsample;\nfunction downsampleClean([duration, value], threshold = 0.8) {\n\tif ([\"hour\", \"day\", \"month\", \"year\"].indexOf(duration) === -1)\n\t\tthrow new Error(\"interval type not supported\");\n\tlet dateComparison = row => row.date.startOf(duration);\n\tlet valueColumns = this.getValueColumns();\n\tif (value) {\n\t\tdateComparison = row => row.date.startOf(duration).add(value, duration);\n\t}\n\tlet df = this.groupBy(dateComparison)\n\t\t.select(group => {\n\t\t\tconst date = group.first().date.startOf(duration);\n\t\t\tlet quality = new Timeseries(group).dataQuality().setIndex(\"flag\");\n\t\t\tlet clean = quality.at(\"clean\").percent;\n\t\t\treturn {\n\t\t\t\tdate,\n\t\t\t\tvalue:\n\t\t\t\t\tclean >= threshold\n\t\t\t\t\t\t? group\n\t\t\t\t\t\t\t\t.deflate(row => row.value)\n\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t.sum()\n\t\t\t\t\t\t: null\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => dayjs(row.date).toDate());\n\treturn new Timeseries(df);\n}\nTimeseries.prototype.downsampleClean = downsampleClean;\nfunction upsample([duration, value], fillType = \"average\", flag = false) {\n\t// Dont use this b/c it has the raw and flag values\n\tlet df = this;\n\n\t// let blank = Timeseries.blank(df.first().date, df.last().date, [\n\t// \tduration,\n\t// \tvalue\n\t// ]);\n\t// let n = Timeseries.merge([blank, df]).fillNull();\n\n\tlet n = df.fillGaps(\n\t\tgapExists([duration, value]),\n\t\tgapFill(fillType, [duration, value])\n\t);\n\tif (!flag) n = n.dropSeries([\"flag\"]);\n\treturn new Timeseries(n);\n}\n\nTimeseries.prototype.upsample = upsample;\n\nfunction populate(value, type = \"average\") {\n\tlet v;\n\tswitch (type) {\n\t\tcase \"fill\":\n\t\t\tv = value;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tv = value / this.count();\n\t\t\tbreak;\n\t}\n\tlet df = this.generateSeries({ value: row => v });\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.populate = populate;\n\nfunction reduceToValue(columnNames) {\n\tfunction chooseValue(row, columnNames = []) {\n\t\tlet values = columnNames.map(n => row[n]).filter(v => v);\n\t\treturn values[0] || 0;\n\t}\n\tlet df = this.generateSeries({\n\t\tvalue: row => chooseValue(row, columnNames)\n\t}).subset([\"date\", \"value\"]);\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.reduceToValue = reduceToValue;\n\nfunction cumulativeSum(columns) {\n\tif (!columns) columns = this.getValueColumns();\n\tif (columns & !Array.isArray(columns)) columns = [columns];\n\tlet df = this;\n\tconst cumulativeSum = sum => value => (sum += value);\n\tcolumns.forEach(s => {\n\t\tdf = df.withSeries(s, df.getSeries(s).select(cumulativeSum(0)));\n\t});\n\treturn new Timeseries(df);\n}\nTimeseries.prototype.cumulativeSum = cumulativeSum;\n\nfunction totalRows(series = [\"value\"], colname = \"total\") {\n\tlet ndf = this.generateSeries({\n\t\t[colname]: row => series.map(v => row[v] || 0).reduce((a, b) => a + b, 0)\n\t});\n\treturn new Timeseries(ndf);\n}\nTimeseries.prototype.totalRows = totalRows;\nTimeseries.prototype.totalRow = totalRows;\nTimeseries.prototype.totalColumns = totalRows;\n\n// Baseline Functions\nfunction rollingPercentChange(col = \"value\", decimal = true) {\n\tlet df = this;\n\tlet s = df\n\t\t.getSeries(col)\n\t\t.rollingWindow(2)\n\t\t.select(window => {\n\t\t\tlet v = (window.last() - window.first()) / Math.abs(window.first());\n\t\t\treturn [window.getIndex().last(), v];\n\t\t})\n\t\t.withIndex(pair => pair[0])\n\t\t.select(pair => pair[1]);\n\tlet delta = df.withSeries(\"delta\", s);\n\tif (!decimal) delta = delta.transformSeries({ delta: value => value * 100 });\n\treturn new Timeseries(delta);\n}\n\nTimeseries.prototype.rollingPercentChange = rollingPercentChange;\nfunction baselinePercentChange(baselineDF) {\n\t// Only Change in Year\n\tif (!(baselineDF instanceof Timeseries))\n\t\tbaselineDF = new Timeseries(baselineDF);\n\tlet dfwb;\n\tif (baselineDF.count() > 1) {\n\t\tlet interval = this.getInterval();\n\t\tlet baselineInterval = baselineDF.interval;\n\t\tif (!isEqual(interval, baselineInterval)) {\n\t\t\tconsole.error(interval, baselineInterval);\n\t\t\tthrow new Error(\"baseline and data intervals do not match\");\n\t\t}\n\t\tlet indexer;\n\t\tswitch (interval[0]) {\n\t\t\tcase \"day\":\n\t\t\t\tindexer = date => `${date.month()}-${date.date()}`;\n\t\t\t\tbreak;\n\t\t\tcase \"month\":\n\t\t\t\tindexer = date => date.month();\n\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tindexer = date => 0;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tlet indexedBaseline = baselineDF.withIndex(row => indexer(row.date));\n\t\tlet getBaselineValue = index => {\n\t\t\tlet at = indexedBaseline.at(index);\n\t\t\tif (at && has(at, \"value\")) {\n\t\t\t\treturn at.value;\n\t\t\t} else {\n\t\t\t\treturn indexedBaseline.getSeries(\"value\").average();\n\t\t\t}\n\t\t};\n\t\tdfwb = this.generateSeries({\n\t\t\tbaseline: row => getBaselineValue(indexer(row.date))\n\t\t});\n\t} else {\n\t\tdfwb = this.generateSeries({\n\t\t\tbaseline: row => baselineDF.first().value\n\t\t});\n\t}\n\tdfwb = dfwb.generateSeries({\n\t\tdelta: row => calculateChange(row.baseline, row.value)\n\t});\n\treturn new Timeseries(dfwb);\n}\n\nTimeseries.prototype.baselinePercentChange = baselinePercentChange;\nTimeseries.prototype.addBaselineDelta = baselinePercentChange;\n\nfunction annualIntensity(normalizeValue = 1) {\n\tlet interval = this.getInterval();\n\tlet annual = this.groupBy(row => row.date.year())\n\t\t.select(group => {\n\t\t\tlet startDate = group.first().date;\n\t\t\tlet endDate = group\n\t\t\t\t.last()\n\t\t\t\t.date.add(interval[1] || 1, interval[0] || \"month\");\n\t\t\tlet scaler = annualScale(startDate, endDate);\n\t\t\treturn {\n\t\t\t\tstartDate,\n\t\t\t\tendDate,\n\t\t\t\t...fromPairs(\n\t\t\t\t\tthis.getValueColumns().map(col => [\n\t\t\t\t\t\tcol,\n\t\t\t\t\t\t(group\n\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t.where(v => v)\n\t\t\t\t\t\t\t.sum() *\n\t\t\t\t\t\t\tscaler) /\n\t\t\t\t\t\t\tnormalizeValue\n\t\t\t\t\t])\n\t\t\t\t)\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.renameSeries({ startDate: \"date\" })\n\t\t.dropSeries(\"endDate\");\n\treturn new Timeseries(annual);\n}\n\nTimeseries.prototype.annualIntensity = annualIntensity;\n\n// Fill Functions\n\nfunction fillMissing() {\n\tlet df = this;\n\tlet startDate = df.first().date.toDate(),\n\t\tendDate = df.last().date.toDate();\n\tlet interval = df.getInterval();\n\tlet bdf = Timeseries.blank(\n\t\tstartDate,\n\t\tendDate,\n\t\tinterval,\n\t\t\"missing\"\n\t).withIndex(row => row.date.valueOf());\n\tlet m = bdf.merge(df.withIndex(row => row.date.valueOf())).generateSeries({\n\t\tflag: row =>\n\t\t\trow.value === null || row.value === undefined ? row.flag : undefined\n\t});\n\tm = new Timeseries(m);\n\treturn m;\n}\nTimeseries.prototype.fillMissing = fillMissing;\n\nfunction fillNull({ series = \"value\", value, callback }) {\n\tconst seriesCheck = row => row[series] === null || row[series] === undefined;\n\tif (callback) {\n\t\tlet df = this.generateSeries({\n\t\t\tflag: row =>\n\t\t\t\tseriesCheck(row) ? [\"fill\", ...(row.flag || [])] : row.flag,\n\t\t\t[series]: row => (seriesCheck(row) ? callback(row) : row[series])\n\t\t});\n\t\treturn new Timeseries(df);\n\t} else if (value) {\n\t\tlet df = this.generateSeries({\n\t\t\tflag: row => (seriesCheck(row) ? [\"fill\", ...(row.flag || [])] : row.flag)\n\t\t}).transformSeries({\n\t\t\t[series]: currentValue =>\n\t\t\t\tcurrentValue === null || currentValue === undefined\n\t\t\t\t\t? value\n\t\t\t\t\t: currentValue\n\t\t});\n\t\treturn new Timeseries(df);\n\t} else {\n\t\treturn this;\n\t}\n}\nTimeseries.prototype.fillNull = fillNull;\n\nfunction zeroFaultDetection(thresholdInterval) {\n\tif (!Array.isArray(thresholdInterval))\n\t\tthresholdInterval = [thresholdInterval, 1];\n\tthresholdInterval = intervalToMS(thresholdInterval);\n\tlet df = this;\n\tlet zeroFaultDates = df\n\t\t.where(row => row.value === 0)\n\t\t.ensureSeries(\n\t\t\t\"interval\",\n\t\t\tdf\n\t\t\t\t.where(row => row.value === 0)\n\t\t\t\t.getSeries(\"date\")\n\t\t\t\t.amountChange()\n\t\t)\n\t\t.where(v => v.interval <= thresholdInterval)\n\t\t.subset([\"date\"])\n\t\t.generateSeries({ value: row => null, flag: row => [\"zeroFault\"] });\n\n\tlet zeroFaultDF = new Timeseries(this.merge(zeroFaultDates));\n\treturn zeroFaultDF;\n}\n\nTimeseries.prototype.zeroFaultDetection = zeroFaultDetection;\n\nfunction dataQuality() {\n\tlet count = this.count();\n\tlet withFlags = this.where(r => Array.isArray(r.flag) && r.flag.length > 0)\n\t\t.groupBy(r => r.flag.toString())\n\t\t.select(group => ({\n\t\t\tflag: group.first().flag,\n\t\t\tcount: group.count(),\n\t\t\tpercent: group.count() / count\n\t\t}))\n\t\t.inflate();\n\tlet good = this.where(\n\t\tr =>\n\t\t\tr.flag === undefined ||\n\t\t\tr.flag === null ||\n\t\t\t(Array.isArray(r.flag) && r.flag.length === 0)\n\t).count();\n\tlet quality = withFlags\n\t\t.appendPair([\n\t\t\twithFlags.count(),\n\t\t\t{ flag: \"clean\", count: good, percent: good / count }\n\t\t])\n\t\t.orderByDescending(row => row.count);\n\treturn quality;\n}\n\nTimeseries.prototype.dataQuality = dataQuality;\n\nfunction monthlyWithQual() {\n\tlet interval = this.getInterval();\n\tlet ms = intervalToMS(interval);\n\tconst duration = \"month\";\n\tlet dateComparison = row =>\n\t\tdayjs(row.date)\n\t\t\t.startOf()\n\t\t\t.valueOf();\n\tlet ts = this.groupBy(dateComparison)\n\t\t.select(group => {\n\t\t\tconst date = dayjs(group.first().date)\n\t\t\t\t.startOf(duration)\n\t\t\t\t.toDate();\n\t\t\tlet fullCount = Math.floor(\n\t\t\t\tdayjs(date)\n\t\t\t\t\t.endOf(\"month\")\n\t\t\t\t\t.diff(dayjs(date), \"millisecond\") / ms\n\t\t\t);\n\t\t\tlet days = new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\n\t\t\tlet count = group\n\t\t\t\t.getSeries(\"value\")\n\t\t\t\t.where(v => v && v !== 0)\n\t\t\t\t.toArray().length;\n\t\t\tlet value = group\n\t\t\t\t.getSeries(\"value\")\n\t\t\t\t.where(v => !isNaN(v))\n\t\t\t\t.sum();\n\t\t\treturn {\n\t\t\t\tdate,\n\t\t\t\tvalue: isNaN(value) ? 0 : value,\n\t\t\t\tcount,\n\t\t\t\tfullCount,\n\t\t\t\tscore: count / fullCount\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => row.date.toDate());\n\treturn new Timeseries(ts);\n}\nTimeseries.prototype.monthlyWithQual = monthlyWithQual;\n\nfunction threeYearAverage(date, series = \"value\", defaultValue) {\n\tdate = dayjs(date);\n\tif (!defaultValue)\n\t\tdefaultValue = this.getSeries(series)\n\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t.average();\n\n\t// let months = df\n\t// \t.before(date.valueOf())\n\t// \t.where(row => dayjs(row.date).month() === date.month())\n\t// \t.where(row => row.score > 0.9)\n\t// \t.tail(3);\n\tlet months = this.before(date.toDate())\n\t\t.where(row => row.date.month() === date.month())\n\t\t.orderBy(row => dayjs(row.date))\n\t\t.tail(3);\n\t// .where(row => row.score > 0.9);\n\tif (months.count() > 0) {\n\t\tlet val = months\n\t\t\t.getSeries(series)\n\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t.average();\n\t\treturn val;\n\t} else {\n\t\treturn defaultValue;\n\t}\n}\nTimeseries.prototype.threeYearAverage = threeYearAverage;\n\nfunction averageFill() {\n\tlet df = this;\n\tlet avg = df\n\t\t// .where(row => row.score ?row.score >= 0.9)\n\t\t.getSeries(\"value\")\n\t\t.where(v => !isNaN(v) && v !== null)\n\t\t.average();\n\tlet monthlyAvg = df\n\t\t.generateSeries({\n\t\t\trollingAverage: row => df.threeYearAverage(row.date, \"value\", avg)\n\t\t})\n\t\t.generateSeries({\n\t\t\tflag: row => (row.value ? row.flag : [\"filled\", ...(row.flag || [])])\n\t\t})\n\t\t.generateSeries({\n\t\t\tvalue: row => (row.value ? row.value : row.rollingAverage)\n\t\t})\n\t\t.dropSeries([\"rollingAverage\"]);\n\treturn new Timeseries(monthlyAvg);\n}\n\nTimeseries.prototype.averageFill = averageFill;\nfunction toArray() {\n\tconst values = [];\n\tfor (const value of this.getContent().values) {\n\t\tif (value !== undefined) {\n\t\t\tvalues.push(value);\n\t\t}\n\t}\n\treturn values.map(({ date, ...others }) => ({\n\t\tdate: date.toDate(),\n\t\t...others\n\t}));\n}\nTimeseries.prototype.toArray = toArray;\n\nfunction atDate(date) {\n\tif (this.none()) {\n\t\treturn undefined;\n\t}\n\tdate = dayjs(date).valueOf();\n\n\tfor (const pair of this.getContent().pairs) {\n\t\tif (pair[0].valueOf() === date) {\n\t\t\treturn pair[1];\n\t\t}\n\t}\n\treturn undefined;\n}\nTimeseries.prototype.atDate = atDate;\n\n// Static Methods\nfunction blank(startDate, endDate, [duration, value = 1], flag) {\n\tif ([\"minute\", \"hour\", \"day\", \"month\", \"year\"].indexOf(duration) < 0) {\n\t\tconsole.error(interval);\n\t\tthrow new Error(\"interval type not supported\");\n\t}\n\tstartDate = dayjs(startDate);\n\tendDate = dayjs(endDate);\n\tlet dates = [startDate];\n\tlet interval = intervalToMS([duration, value]);\n\twhile (dates[dates.length - 1].valueOf() < endDate.valueOf()) {\n\t\tdates.push(dayjs(dates[dates.length - 1]).add(value, duration));\n\t}\n\tlet df = new Timeseries(dates.map(date => ({ date })));\n\n\tif (flag) {\n\t\tdf = new Timeseries(\n\t\t\tdf.generateSeries({\n\t\t\t\tflag: row => [flag]\n\t\t\t})\n\t\t);\n\t}\n\n\treturn df;\n}\nTimeseries.blank = blank;\nfunction aggregate(dataframes) {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df => new Timeseries(df));\n\tconst valueColumns = new Set(\n\t\tdataframes.map(df => df.getValueColumns()).reduce((a, b) => a.concat(b), [])\n\t);\n\tconst concatenated = dataForge.DataFrame.concat(dataframes)\n\t\t.groupBy(row => row.date)\n\t\t.select(group => {\n\t\t\tconst date = group.first().date;\n\t\t\tlet o = { date };\n\t\t\tvalueColumns.forEach(c => (o[c] = group.deflate(row => row[c]).sum()));\n\t\t\tgroup\n\t\t\t\t.getColumnNames()\n\t\t\t\t.filter(col => col !== \"date\")\n\t\t\t\t.filter(col => valueColumns.has(col) === -1)\n\t\t\t\t.forEach(col => {\n\t\t\t\t\tlet value = group\n\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t.distinct()\n\t\t\t\t\t\t.toArray();\n\t\t\t\t\tif (value.length === 1) value = value[0];\n\t\t\t\t\to[col] = value;\n\t\t\t\t\treturn;\n\t\t\t\t});\n\t\t\treturn o;\n\t\t})\n\t\t.inflate();\n\treturn new Timeseries(concatenated);\n}\n\nTimeseries.aggregate = aggregate;\nTimeseries.concat = dataframes => {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df =>\n\t\tnew Timeseries(df).withIndex(row => row.date.valueOf())\n\t);\n\tlet df = dataForge.DataFrame.concat(dataframes);\n\treturn new Timeseries(df);\n};\nTimeseries.merge = dataframes => {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df =>\n\t\tnew Timeseries(df).withIndex(row => row.date.valueOf())\n\t);\n\tlet df = dataForge.DataFrame.merge(dataframes);\n\treturn new Timeseries(df);\n};\n","import dayjs from \"dayjs\";\nexport const annualScale = (start, end) =>\n\t365 / dayjs(end).diff(dayjs(start), \"day\");\nexport const calculateChange = (baseline, value) =>\n\t(value - baseline) / baseline;\n"],"names":["intervalToMS","unit","value","start","dayjs","add","diff","valueFiller","fillType","startValue","endValue","entryIndex","numEntries","overrideValue","dateFunction","date","flag","indexOf","Error","fromPairs","toPairs","map","key","averageMonthlyMap","df","data","group","select","month","first","getSeries","where","v","average","m","Map","toArray","avg","set","annualMonthlyAverageMap","groupBy","row","year","startOf","ts","Timeseries","downsample","monthlyRollingAverageMap","years","series","validOnly","months","toDate","Boolean","inflate","withIndex","bake","values","rollingWindow","window","last","has","forEach","before","count","fillMonthlyByMap","monthMap","get","fillMonthlyBAnnualyMap","annualMonthlyMap","mean","reduce","a","b","concat","pad","annualAverage","subset","after","subtract","r","hour","minute","appendPair","rval","deflate","x","std","sampleStandardDeviation","_mean","ndf","generateSeries","ares","R","DataFrame","Math","abs","max","lambdaTest","n","i","alpha","p","pValue","t","degreeOfFreedom","Studentt","inv","tValue","lambda","sqrt","pow","modz","mad","median","modifiedZScoreTest","_median","medianAbsoluteDeviation","outliers","sort","filter","thresholds","upper","min","Infinity","lower","options","dataForge","config","others","valueOf","index","considerAllRows","call","this","removeOutliers","outlierCheck","raw","transformSeries","merge","totalRows","colname","baselinePercentChange","baselineDF","dfwb","indexer","interval","getInterval","baselineInterval","isEqual","console","error","indexedBaseline","baseline","at","delta","prototype","Object","create","constructor","getValueColumns","detectTypes","Type","distinct","Column","ms","end","getIndex","detectValues","orderBy","Frequency","Value","ceil","getDateRange","adjustment","endOf","cvrsme","actual","simulated","resetIndex","dropSeries","ybar","sum","nmbe","calculateStatistics","column","filterZeros","filterNegative","isNaN","q1","quantile","q3","iqr","calculateThresholdOptions","k","noflags","Array","isArray","length","floor","esd","dataset","newdf","dataframe","trip","pair","assign","push","outlierValues","outlier","takeWhile","iterations","rosnerTest","box","lowerInner","upperInner","lowerOuter","upperOuter","getBestThreshold","thresholdGroups","ckmeans","betweenDates","between","transformAllSeries","adjustmentFunction","exclude","columns","col","reset","withSeries","fromTotalizer","acceptInitial","arr","val","toTotalizer","slice","obj","clean","duration","dateComparison","valueColumns","getColumnNames","downsampleClean","threshold","dataQuality","setIndex","percent","upsample","fillGaps","durationValue","pairA","pairB","startDate","gapExists","endDate","newEntries","e","gapFill","populate","type","reduceToValue","columnNames","chooseValue","cumulativeSum","s","totalRow","totalColumns","rollingPercentChange","decimal","addBaselineDelta","annualIntensity","normalizeValue","scaler","_this","renameSeries","fillMissing","blank","undefined","fillNull","callback","seriesCheck","currentValue","zeroFaultDetection","thresholdInterval","zeroFaultDates","ensureSeries","amountChange","withFlags","toString","good","orderByDescending","monthlyWithQual","fullCount","Date","getFullYear","getMonth","getDate","score","threeYearAverage","defaultValue","tail","averageFill","rollingAverage","getContent","atDate","none","pairs","dates","aggregate","dataframes","Set","o","c"],"mappings":"8tBAEA,IAeMA,EAAe,gBAAEC,OAAMC,OACxBC,EAAQC,IAEZ,OADUA,IAAQC,IAAIH,EAAOD,GAClBK,KAAKH,ICJXI,EAAc,SACnBC,WAWIN,EAVFO,IAAAA,WAAYC,IAAAA,SAAUC,IAAAA,WAAYC,IAAAA,WAClCC,IAAAA,cAAeC,IAAAA,aAAcC,IAAAA,KAAMC,IAAAA,KAErC,IAGQ,IAFP,CAAC,MAAO,cAAe,UAAW,eAAgB,SAASC,QAC1DT,GAGD,UAAUU,MAAM,2BA6DjB,MA1DiB,QAAbV,GACHN,EAAQiB,EACPC,EAAQX,GAAYY,IAAI,YAAEC,IAAAA,OACzB,MAAO,CAACA,EAAKb,EAAWa,OAI1BN,EAAOA,GAAc,CAAC,OAAQ,QACP,gBAAbR,GACVN,EAAQiB,EACPC,EAAQX,GAAYY,IAAI,YAAEC,IAAAA,OAKzB,MAAO,CAACA,EAHPb,EAAWa,IACVX,EAAa,KACXD,EAASY,GAAOb,EAAWa,KAASV,EAAa,QAKvDI,EAAOA,GAAc,CAAC,OAAQR,IACP,YAAbA,GACVN,EAAQiB,EACPC,EAAQX,GAAYY,IAAI,YAAEC,IAAAA,OAEzB,MAAO,CAACA,GADEb,EAAWa,GAAOZ,EAASY,IAAQV,MAK/CI,EAAOA,GAAc,CAAC,OAAQR,IACP,iBAAbA,GAA+BM,GACzCZ,EAAQiB,EACPC,EAAQX,GAAYY,IAAI,YAEvB,MAAO,MADEP,EAAaC,OAIxBC,EAAOA,GAAc,CAAC,OAAQR,IACP,UAAbA,GACVN,EAAQiB,EACPC,EAAQX,GAAYY,IAAI,YAAEC,IAAAA,OAOzB,MAAO,CAACA,EALqB,iBAAlBT,EACLA,EAEAA,EAAcS,OAKtBN,EAAOA,GAAc,CAAC,OAAQR,KAE9BN,EAAQiB,EACPC,EAAQX,GAAYY,IAAI,YACvB,MAAO,MAAM,SAGfL,EAAO,CAAC,cAEGd,GAAOc,KAAAA,KAwCdO,EAAoB,SAAAC,GACzB,IAAIC,EAAOD,EAAGE,MAAM,SAASC,OAAO,SAAAD,SAAU,CAC7CE,MAAOF,EAAMG,QAAQd,KAAKa,QAC1B1B,MAAOwB,EACLI,UAAU,SACVC,MAAM,SAAAC,UAAKA,IACXC,aAECC,EAAI,IAAIC,IAAIV,EAAKW,UAAUf,IAAI,kBAAsB,GAAnBO,QAAO1B,UACzCmC,EAAMZ,EAAKK,UAAU,SAASG,UAElC,OADAC,EAAEI,IAAI,UAAWD,GACVH,GAGFK,EAA0B,SAAAf,GAC/B,IAAIC,EAAOD,EACTgB,QAAQ,SAAAC,UAAOA,EAAI1B,KAAK2B,SACxBf,OAAO,SAAAD,GACP,IAAMX,EAAOW,EAAMG,QAAQd,KAAK4B,QAAQ,QACpCC,EAAK,IAAIC,EAAWnB,GAAOoB,WAAW,CAAC,QAAS,GAAI,OACpDT,EAAMO,EAAGd,UAAU,SAASG,UAC5BZ,EAAME,EAAkBqB,GAE5B,OADAvB,EAAIiB,IAAI,MAAOD,GACR,CAACtB,EAAK2B,OAAQrB,KAIvB,OAFQ,IAAIc,IAAIV,EAAKW,YAKhBW,EAA2B,SAChCvB,sBAC4E,SAA1EwB,MAAAA,aAAQ,QAAGC,OAAAA,aAAS,cAAiCC,UAAAA,gBAEnDC,EAAS3B,EACXgB,QAAQ,SAAAC,UAAOA,EAAI1B,KAAK4B,QAAQ,SAASS,WACzCzB,OAAO,SAAAD,GAMP,MAAO,CAAEX,KALEW,EAAMG,QAAQd,KAAK4B,QAAQ,SAKvBzC,MAJHwB,EACVI,UAAUmB,GACVlB,MAAM,SAAAC,UAAMkB,GAAYG,QAAQrB,KAChCC,aAGFqB,UACAC,UAAU,SAAAd,UAAOA,EAAI1B,KAAKqC,WAC1BI,OACE/B,EAAO0B,EACTX,QAAQ,SAAAC,UAAOA,EAAI1B,KAAKa,UACxBD,OAAO,SAAAD,GACP,IAAI+B,EAAS,IAAItB,IAChBT,EAAMgC,cAAcV,GAAOrB,OAAO,SAAAgC,SAAU,CAC3CA,EAAOC,OAAO7C,KAAK2B,OACnBiB,EACE7B,UAAUmB,GACVlB,MAAM,SAAAC,UAAMkB,GAAYG,QAAQrB,KAChCC,WACDP,EACEI,UAAUmB,GACVlB,MAAM,SAAAC,UAAMkB,GAAYG,QAAQrB,KAChCC,cAcL,OAXAP,EACEK,MAAM,SAAAU,UAAQgB,EAAOI,IAAIpB,EAAI1B,KAAK2B,UAClCoB,QAAQ,SAAArB,GACR,IAAIvC,EACHiD,EAAOY,OAAOtB,EAAI1B,KAAKqC,UAAUY,QAAU,EACxCb,EAAOY,OAAOtB,EAAI1B,KAAKqC,UAAUQ,OAAOX,GACxCE,EAAOrB,UAAUmB,GAAQhB,UAC7BwB,EAAOnB,IAAIG,EAAI1B,KAAK2B,OAAQxC,KAIvB,CADKwB,EAAMG,QAAQd,KAAKa,QAChB6B,KAGjB,WAAWtB,IAAIV,EAAKW,YAGf6B,EAAmB,SAAAC,mBAAYzB,UAAOyB,EAASC,IAAI1B,EAAI1B,KAAKa,WAC5DwC,EAAyB,SAAAC,mBAAoB5B,GAClD,IAAIb,EAAQa,EAAI1B,KAAKa,QACpBc,EAAOD,EAAI1B,KAAK2B,OACjB,OAAI2B,EAAiBR,IAAIjC,GACpByC,EAAiBR,IAAIjC,GACjByC,EAAiBF,IAAIvC,GAAOuC,IAAIzB,GAEhC4B,YAASD,EAAiBF,IAAIvC,GAAO6B,WAGtCa,EACN,UAAID,EAAiBZ,UAAUpC,IAAI,SAAAa,SAClC,UAAIA,EAAEuB,UAAUc,OAAO,SAACC,EAAGC,UAAMD,EAAEE,OAAOD,IAAI,SAM5CE,EAAM,SAACnD,uBAA6C,MAArByB,OAAAA,aAAS,0BAAmBR,GAChE,IAAIgB,EAASjC,EACXuC,OAAOtB,EAAI1B,KAAKqC,UAChBtB,UAAUmB,GACVlB,MAAM,SAAAC,UAAKA,IAEb,OADYyB,EAAOO,QAAU,EAAIP,EAAOG,OAAS,IAG5CgB,EAAgB,SACrBpD,sBACkE,SAA9CyB,OAAAA,aAAS,cAASD,MAAAA,aAAQ,oBAC1CP,GACJ,IAAIoC,EAASrD,EACXqD,OAAO,CAAC,OAAQ5B,IAChB6B,MAAMrC,EAAI1B,KAAKgE,SAAS/B,EAAO,QAAQI,UACvCW,OAAOtB,EAAI1B,KAAKqC,UAChBI,OACEC,EAASoB,EACX9C,MAAM,SAAAiD,UAAKA,EAAEjE,KAAKa,UAAYa,EAAI1B,KAAKa,UACvCG,MAAM,SAAAiD,UAAKA,EAAEjE,KAAKA,SAAW0B,EAAI1B,KAAKA,SACtCgB,MAAM,SAAAiD,UAAKA,EAAEjE,KAAKkE,SAAWxC,EAAI1B,KAAKkE,SACtClD,MAAM,SAAAiD,UAAKA,EAAEjE,KAAKmE,WAAazC,EAAI1B,KAAKmE,WACxCpD,UAAUmB,GACVlB,MAAM,SAAAC,UAAKA,IAgBb,OAbIyB,EAAOO,QAAUhB,EACZS,EACN0B,WAAW,CACX,KACAN,EACE/C,UAAUmB,GACVlB,MAAM,SAAAC,UAAKA,IACXC,YAEFA,UAEMwB,EAAOxB,YCvPjB,SAASmD,EAAK5D,GACZ,IAAIiC,EAASjC,EAAG6D,QAAQ,SAAA5C,UAAOA,EAAI6C,IAAGlD,UAClCmD,EAAMC,EAAwB/B,GAC9Ba,EAAOmB,EAAMhC,GACjB,GAAY,IAAR8B,EAAW,CACb,IAAIG,EAAMlE,EAAGmE,eAAe,CAAEC,KAAM,SAAAnD,eACpC,MAAO,CAAEoD,EAAG,EAAGN,IAAAA,EAAKjB,KAAAA,EAAM9C,GAAIkE,GAEhC,IAAIA,EAAM,IAAII,EAAU,CACtBrC,OAAQA,EAAOpC,IAAI,SAAAiE,SAAM,CACvBA,EAAAA,EACAM,KAAMG,KAAKC,IAAIV,EAAIhB,GAAQiB,OAI/B,MAAO,CAAEM,EADDI,EAAIP,EAAIL,QAAQ,SAAA5C,UAAOA,EAAImD,OAAMxD,WAC7BZ,GAAIkE,EAAKH,IAAAA,EAAKjB,KAAAA,GAa5B,SAAS4B,EAAWC,EAAGC,EAAGC,GACxB,IAAIC,EAXN,SAAgBH,EAAGC,EAAGC,GAEpB,OADQ,EAAIA,GAAS,GAAKF,EAAIC,EAAI,IAU1BG,CAAOJ,EAAGC,EAAGC,GAEjBG,EATN,SAAgBF,EAAGG,GAGjB,OAFS,IAAIC,EAASD,GACXE,IAAIL,GAOPM,CAAON,EADNH,EAAIC,EAAI,GAKjB,MAAO,CAAES,OAFNL,GAAKL,EAAIC,GACVL,KAAKe,MAAMX,EAAIC,EAAI,EAAIL,KAAKgB,IAAIP,EAAG,KAAOL,EAAIC,EAAI,IACnCE,EAAAA,EAAGE,EAAAA,GAwEtB,IAAMQ,EAAO,SAAC9G,EAAO+G,EAAKC,GACxB,aAAkBhH,EAAQgH,GAAWD,GAEvC,SAASE,EAAmB1D,GAC1B,IAAIyD,EAASE,EAAQ3D,GACjBwD,EAAMI,EAAwB5D,GAK9B6D,GAJJ7D,EAASA,EACN8D,KAAK,SAAC/C,EAAGC,UAAMA,EAAID,IACnBgD,OAAO,SAAAxF,UAAKA,EAAI,IAChBX,IAAI,SAAAW,SAAK,CAACA,EAAGgF,EAAKhF,EAAGiF,EAAKC,OACPM,OACpB,mBAAezB,KAAKC,WAAa,MAcnC,MAAO,CAAEyB,WAAY,CAAEC,MAZX3B,KAAK4B,UAAL5B,MACN6B,iBAAaN,EAASjG,IAAI,SAAAW,UAAKA,EAAE,OAWT6F,MAAO,aCxG9BhF,EAAWpB,EAAWqG,GAE9B,YAFmBrG,IAAAA,EAAO,IAEtBA,aAAgBoB,EACnB,OAAOpB,EAEJA,aAAgBsG,EAAUjC,YAC7BrE,EAAOA,EAAKW,WAMb,IAAI4F,EAAS,CAEZvE,OALDhC,EAAOA,EACLJ,IAAI,gBAAGN,IAAAA,KAASkH,0BAAgBlH,KAAMX,EAAMW,IAAUkH,KACtDV,KAAK,SAAC/C,EAAGC,UAAMD,EAAEzD,KAAKmH,UAAYzD,EAAE1D,KAAKmH,YAI1CC,MAAO1G,EAAKJ,IAAI,qBAAGN,KAAgBqC,WACnCgF,iBAAiB,GAElBL,EAAUjC,UAAUuC,KAAKC,KAAMN,GA8PhC,SAASO,wBAAoD,SAAnCtF,OAAAA,aAAS,UAAS4E,IAAAA,MAAOH,IAAAA,MAClD,GAAIG,EAAQH,EAAO,UAAUxG,MAAM,sBACnC,IAEIoG,EAAWgB,KAAKvG,MAAM,SAAAU,UAFP,SAACvC,EAAO2H,EAAOH,UAAUxH,EAAQ2H,GAAS3H,EAAQwH,EAEpCc,CAAa/F,EAAIQ,GAAS4E,EAAOH,KAChE/B,eAAe,CACf8C,IAAK,SAAAhG,UAAOA,EAAIQ,IAChBjC,KAAM,oBAAGA,YAAiB,6BAAV,SAEhB0H,wBACCzF,GAAS,SAAA/C,oBAIZ,WAAW2C,EADEyF,KAAKK,MAAMrB,IAgKzB,SAASsB,EAAU3F,EAAoB4F,SAItC,gBAJkB5F,IAAAA,EAAS,CAAC,mBAAU4F,IAAAA,EAAU,aAIrChG,EAHDyF,KAAK3C,uBACbkD,GAAU,SAAApG,UAAOQ,EAAO5B,IAAI,SAAAW,UAAKS,EAAIT,IAAM,IAAGuC,OAAO,SAACC,EAAGC,UAAMD,EAAIC,GAAG,SA0BzE,SAASqE,EAAsBC,GAI9B,IAAIC,EACJ,GAHMD,aAAsBlG,IAC3BkG,EAAa,IAAIlG,EAAWkG,IAEzBA,EAAW/E,QAAU,EAAG,CAC3B,IAMIiF,EANAC,EAAWZ,KAAKa,cAChBC,EAAmBL,EAAWG,SAClC,IAAKG,EAAQH,EAAUE,GAEtB,MADAE,QAAQC,MAAML,EAAUE,OACdlI,MAAM,4CAGjB,OAAQgI,EAAS,IAChB,IAAK,MACJD,EAAU,SAAAlI,UAAWA,EAAKa,YAAWb,EAAKA,QAC1C,MACD,IAAK,QACJkI,EAAU,SAAAlI,UAAQA,EAAKa,SAEvB,MACD,QACCqH,EAAU,SAAAlI,aAIZ,IAAIyI,EAAkBT,EAAWxF,UAAU,SAAAd,UAAOwG,EAAQxG,EAAI1B,QAS9DiI,EAAOV,KAAK3C,eAAe,CAC1B8D,SAAU,SAAAhH,UATY0F,EASYc,EAAQxG,EAAI1B,OAR1C2I,EAAKF,EAAgBE,GAAGvB,KAClBtE,EAAI6F,EAAI,SACVA,EAAGxJ,MAEHsJ,EAAgB1H,UAAU,SAASG,UALrB,IAAAkG,EAClBuB,UAWLV,EAAOV,KAAK3C,eAAe,CAC1B8D,SAAU,SAAAhH,UAAOsG,EAAWlH,QAAQ3B,SAMtC,WAAW2C,EAHXmG,EAAOA,EAAKrD,eAAe,CAC1BgE,MAAO,SAAAlH,UAAqCA,EAAIvC,OC9iBlBuJ,ED8iBAhH,EAAIgH,WC7iBdA,EADS,IAACA,OD8DhC5G,EAAW+G,UAAYC,OAAOC,OAAO/B,EAAUjC,UAAU8D,YACpCG,YAAclH,EAiCnCA,EAAW+G,UAAUI,gBA9BrB,WACC,YAAYC,cACVlI,MAAM,SAAAU,SAAoB,WAAbA,EAAIyH,OACjBC,SAAS,SAAA1H,UAAOA,EAAI2H,SACpBtI,UAAU,UACVM,WA0BHS,EAAW+G,UAAUT,YAxBrB,WACC,IH3EoBkB,EAChBlK,EACAmK,EGmFJ,OHrFoBD,EG4EF/B,KAAKiC,WACrB5G,OAAO,GACPhC,OAHsB,SAAAgC,UAAUA,EAAOC,OAASD,EAAO9B,UAIvD2I,eACAC,QAAQ,SAAAhI,UAAQA,EAAIiI,YAGF7I,QAAQ8I,MHlFxBxK,EAAQC,KACRkK,EAAMlK,IAAQC,IAAIgK,IACd/J,KAAKH,EAAO,SAAS,IAAS,GAC9B,CAAC,OAAQ4F,KAAK6E,KAAKN,EAAIhK,KAAKH,EAAO,QAAQ,KACxCmK,EAAIhK,KAAKH,EAAO,OAAO,IAAS,GACnC,CAAC,QAAS4F,KAAK6E,KAAKN,EAAIhK,KAAKH,EAAO,SAAS,KAC1CmK,EAAIhK,KAAKH,EAAO,QAAQ,IAAS,GACpC,CAAC,MAAO4F,KAAK6E,KAAKN,EAAIhK,KAAKH,EAAO,OAAO,KACtCmK,EAAIhK,KAAKH,EAAO,UAAU,IAAS,GACtC,CAAC,OAAQ4F,KAAK6E,KAAKN,EAAIhK,KAAKH,EAAO,QAAQ,KAE3C,CAAC,SAAUmK,EAAIhK,KAAKH,EAAO,YGuFpC0C,EAAW+G,UAAUiB,aAXrB,SAAmB5K,EAAM6K,GACxB,IAAI3K,EAAQC,EAAMkI,KAAKzG,QAAQd,MAC9BuJ,EAAMlK,EAAMkI,KAAK1E,OAAO7C,MAKzB,OAJI+J,IACH3K,EAAQA,EAAMwC,QAAQmI,GACtBR,EAAMA,EAAIS,MAAMD,IAEVR,EAAIhK,KAAKH,EAAOF,IAsCxB4C,EAAW+G,UAAUoB,OA/BrB,SAAgBC,EAAQC,GACvB,IAAI1J,EAAK8G,KAAKzD,OAAO,CAACoG,EAAQC,IAC5BC,aACAxF,eAAe,CACfsF,OAAQ,SAAAxI,UAAOA,EAAIwI,IAAW,GAC9BC,UAAW,SAAAzI,UAAOA,EAAIyI,IAAc,KAEpCE,WAAW,CAACH,EAAQC,IACpBvF,eAAe,CAAErF,KAAM,SAAAmC,UAAOA,EAAIwI,OAASxI,EAAIyI,aAC7C/E,EAAI3E,EAAGwC,QAEPqH,EAAO7J,EAAGM,UAAU,UAAUwJ,MAAQnF,EAE1C,OADQJ,KAAKe,KAAKtF,EAAGM,UAAU,QAAQwJ,OAASnF,EAFxC,IAEkDkF,GAoB3DxI,EAAW+G,UAAU2B,KAjBrB,SAAcN,EAAQC,GACrB,IAAI1J,EAAK8G,KAAKzD,OAAO,CAACoG,EAAQC,IAC5BC,aACAxF,eAAe,CACfsF,OAAQ,SAAAxI,UAAOA,EAAIwI,IAAW,GAC9BC,UAAW,SAAAzI,UAAOA,EAAIyI,IAAc,KAEpCE,WAAW,CAACH,EAAQC,IACpBvF,eAAe,CAAErF,KAAM,SAAAmC,UAAOA,EAAIwI,OAASxI,EAAIyI,aAE7C/E,EAAI3E,EAAGwC,QAEPqH,EAAO7J,EAAGM,UAAU,UAAUwJ,MAAQnF,EAE1C,OADQ3E,EAAGM,UAAU,QAAQwJ,QAAUnF,EAF/B,GAEwCkF,IA2FjDxI,EAAW+G,UAAU4B,oBAlCrB,SAA6B1D,YAAAA,IAAAA,EAAU,UAKlCA,EAHH2D,OAAAA,aAAS,YAGN3D,EAFH4D,YAAAA,kBAEG5D,EADH6D,eAAAA,gBAEG1I,EAASqF,KAAKjD,QAAQ,SAAA5C,UAAOA,EAAIgJ,KAAS1J,MAAM,SAAA7B,UAAU0L,MAAM1L,KAChEyL,IAAgB1I,EAASA,EAAOlB,MAAM,SAAA7B,UAASA,GAAS,KACxDwL,IAAazI,EAASA,EAAOlB,MAAM,SAAA7B,UAAmB,IAAVA,KAChD,IAAIgH,EAASjE,EAAOiE,SAChB5C,EAAOrB,EAAOhB,UACd+B,EAAQf,EAAOe,QACfuB,EAAMtC,EAAOsC,MACboC,EAAM1E,EAAO0E,MACb1B,EAAMhD,EAAOgD,MACbgB,EAAMI,EAAwBpE,EAAOb,WACrCyJ,EAAKC,EAAS7I,EAAOb,UAAW,KAChC2J,EAAKD,EAAS7I,EAAOb,UAAW,KAcpC,MAZY,CACX8E,OAAAA,EACA5C,KAAAA,EACAN,MAAAA,EACAuB,IAAAA,EACAoC,IAAAA,EACA1B,IAAAA,EACAgB,IAAAA,EACA4E,GAAAA,EACAE,GAAAA,EACAC,IAXSD,EAAKF,IAiBhBhJ,EAAW+G,UAAUqC,0BArFrB,gBDWqBxI,EACfoI,EACAE,EACAC,eCVF,KAHHE,IAAAA,MACAR,YAAAA,oBACAC,eAAAA,gBAEIQ,EAAU7D,KAAKvG,MAClB,SAAAU,UACCA,MAAAA,EAAIzB,MAEHoL,MAAMC,QAAQ5J,EAAIzB,OAA6B,IAApByB,EAAIzB,KAAKsL,SAErCvK,MAAM,SAAAU,UAAQmJ,MAAMnJ,EAAIvC,QAAwB,OAAduC,EAAIvC,QACtC4B,UAAU,SASZ,OARI4J,IAAaS,EAAUA,EAAQpK,MAAM,SAAA7B,UAAmB,IAAVA,KAC9CyL,IAAgBQ,EAAUA,EAAQpK,MAAM,SAAA7B,UAASA,EAAQ,KACxDgM,IACJA,EACCC,EAAQnI,QAAU,IACf+B,KAAKwG,MAAwB,IAAlBJ,EAAQnI,SACnB+B,KAAK4B,UAAL5B,KAAY,CAAC,IAAMA,KAAKwG,MAAwB,IAAlBJ,EAAQnI,YAEvCmI,EAAQnI,QAAU,EAAU,GAIzB,CAAEwI,ID/GV,SAAoBC,EAAcP,EAAQ7F,YAAtBoG,IAAAA,EAAU,aAAIP,IAAAA,EAAI,aAAI7F,IAAAA,EAAQ,KAShD,IARA,IAIIqG,EAJAC,EAAY,IAAI7G,EAAU,CAC5BrC,OAAQgJ,EAAQpL,IAAI,SAAAiE,SAAM,CAAEA,EAAAA,OAE1Ba,EAAIwG,EAAU7K,UAAU,KAAKkC,QAE7BoC,EAAI,EACJkB,EAAW,GACXsF,GAAO,EACJxG,GAAK8F,GAAG,CACb,IAAIW,EAAO,GAED,IAANzG,mBACyBhB,EAAKuH,GAA1B9G,IAAAA,EAAGrE,IAAAA,GAAI8C,IAAAA,KAAMiB,IAAAA,IACnBmH,EAAQlL,EAAGO,MAAM,SAAAU,UAAOA,EAAImD,OAASC,IACrCgH,EAAOhD,OAAOiD,OAAO,GAAID,EAAM,CAC7BvI,KAAAA,EACAiB,IAAAA,EACAoF,MAAOnJ,EACJO,MAAM,SAAAU,UAAOA,EAAImD,OAASC,IAC1B/D,UAAU,KACVD,QACHgE,EAAAA,wBAGyBT,EAAKsH,GAA1B7G,IAAAA,EAAGrE,IAAAA,GAAI8C,IAAAA,KAAMiB,IAAAA,IACnBmH,EAAQlL,EAAGO,MAAM,SAAAU,UAAOA,EAAImD,OAASC,IACrCgH,EAAOhD,OAAOiD,OAAO,GAAID,EAAM,CAC7BvI,KAAAA,EACAiB,IAAAA,EACAoF,MAAOnJ,EACJO,MAAM,SAAAU,UAAOA,EAAImD,OAASC,IAC1B/D,UAAU,KACVD,QACHgE,EAAAA,OAzBS,MA4BUK,EAAWC,EAAGC,EAAGC,GAIxC,GAHAwG,EAAOhD,OAAOiD,OAAO,GAAID,EAAM,CAAEhG,SAD3BA,SAENS,EAASyF,KAAKF,GACVD,GAAQC,EAAKhH,EAAIgH,EAAKhG,SAAQ+F,GAAO,GAC1B,IAAXC,EAAKhH,EAAS,MAClB,GAAIgH,EAAKhH,EAAIgH,EAAKhG,OAAQ,CACxB,GAAI+F,EACF,MAEAA,GAAO,EAGXxG,IAOF,IAAI4G,GALJ1F,EAAW,IAAIxB,EAAUwB,GACtB3B,eAAe,CACdsH,QAAS,SAAAxK,UAAOA,EAAIoD,EAAIpD,EAAIoE,UAE7BqG,UAAU,SAAAzK,UAAOA,EAAIwK,WAErBlL,MAAM,SAAAU,UAAOA,EAAIkI,MAAQ,IACzBtF,QAAQ,SAAA5C,UAAOA,EAAIkI,QAMtB,MAAO,CACLrD,SAAAA,EACAG,WAPe,CACfI,MAAO,EACPH,MACEsF,EAAchJ,QAAU,EAAIgJ,EAAcrF,MAAQC,UAKpDuF,WAAY/G,GCyCWgH,CAAWjB,EAAQ/J,UAAW8J,GAAlDzE,WAGQ4F,KDdM5J,ECYkB0I,EAAQ/J,UDXzCyJ,EAAKC,EAASrI,EAAQ,KACtBsI,EAAKD,EAASrI,EAAQ,KAEnB,CACLgE,WAAY,CACV6F,WAAYzB,EAAK,KAHjBG,EAAMD,EAAKF,GAIX0B,WAAY1B,EAAK,EAAIG,EACrBwB,WAAYzB,EAAK,IAAMC,EACvByB,WAAY1B,EAAK,EAAIC,KCGpBvE,WAEaT,KADQG,EAAmBgF,EAAQ/J,WAAhDqF,aA8DP5E,EAAW+G,UAAU8D,iBA1DrB,WACC,IACC,IAAIjG,EAAaa,KAAK2D,4BAChB0B,EAAkBC,EACvB,CACCzJ,EAAIsD,EAAY,YAAa,MAC7BtD,EAAIsD,EAAY,aAAc,MAC9BtD,EAAIsD,EAAY,iBAAkB,MAClCtD,EAAIsD,EAAY,iBAAkB,OACjCD,OAAO,SAAAxF,UAAKA,IACd,GAKD,OAHuBiE,EACtB0H,EAAgBpJ,OAAO,SAACC,EAAGC,UAAOD,EAAE8H,OAAS7H,EAAE6H,OAAS9H,EAAIC,KAG5D,MAAO8E,GAER,MADAD,QAAQC,MAAMA,OACJrI,MAAM,gCAiDlB2B,EAAW+G,UAAUiE,aANrB,SAAsB1N,EAAOmK,GAI5B,OAHAnK,EAAQC,EAAMD,GAAOiD,SACrBkH,EAAMlK,EAAMkK,GAAKlH,aAENP,EADFyF,KAAKwF,QAAQ3N,EAAOmK,KA8B9BzH,EAAW+G,UAAUmE,mBAzBrB,SAA4BC,SAAsBC,IAAAA,QAC7CzM,EAAK8G,KACL4F,EAAWA,EAAU1M,EACvByI,cACAlI,MAAM,SAAAU,SAAoB,WAAbA,EAAIyH,OACjBC,SAAS,SAAA1H,UAAOA,EAAI2H,SACpBtI,UAAU,UACVM,UAeF,OAdI6L,GAAW7B,MAAMC,QAAQ4B,KAC5BC,EAAUA,EAAQ1G,OAAO,SAAA2G,UAAiC,IAA1BF,EAAQhN,QAAQkN,MAEjDD,EAAQpK,QAAQ,SAAAqK,SACf3M,EAAKA,EAAGkH,wBACNyF,GAAM,SAAAjO,GACN,OAAI0L,MAAM1L,GACFA,EAEA8N,EAAmB9N,UAKvBsB,GAgBRqB,EAAW+G,UAAUwE,MAXrB,WASC,WAAWvL,EARFyF,KAAK+F,WAAW,CACxBnO,MAAO,SAAAuC,UACNA,EAAIzB,MAAQoL,MAAMC,QAAQ5J,EAAIzB,OAASyB,EAAIzB,KAAKsL,OAAS,EACtD7J,EAAIgG,IACJhG,EAAIvC,SAEP2E,OAAO,CAAC,OAAQ,UAChB9C,MAAM,SAAAU,UAAQmJ,MAAMnJ,EAAIvC,QAAwB,OAAduC,EAAIvC,UAgCzC2C,EAAW+G,UAAU0E,cA1BrB,SAAuBH,cAAAA,IAAAA,EAAM,2BAAqC,MAA1BI,cAAAA,gBAWvC,OAVYjG,KAAKzD,OAAO,CAAC,OAAQsJ,IAC/B/L,UACAf,IAAI,SAACW,EAAGoE,EAAGoI,SACPC,EAAMF,EAAgBvM,EAAEmM,GAAO,KAInC,OAHIK,EAAIpI,EAAI,KACXqI,EAAMzM,EAAEmM,GAAOK,EAAIpI,EAAI,GAAG+H,QAElBpN,KAAMiB,EAAEjB,OAAOoN,GAAMM,MAEtB,IAAI5L,EAAW2B,IAiB1B3B,EAAW+G,UAAU8E,YAdrB,SAAqBP,KAWpB,OAVY7F,KAAKzD,OAAO,CAAC,OAAQsJ,IAC/B/L,UACAf,IAAI,SAACW,EAAGoE,EAAGoI,SACPC,EAAMD,EACRG,MAAM,EAAGvI,GACT/E,IAAI,SAAAuN,UAAOA,EAAIT,KACf5J,OAAO,SAACC,EAAGC,UAAMD,EAAIC,GAAG,GAC1B,UAAS1D,KAAMiB,EAAEjB,OAAOoN,GAAMM,MAEtB,IAAI5L,EAAW2B,IAc1B3B,EAAW+G,UAAUlI,MARrB,SAAewH,EAAU9G,GACxB,IAA4D,IAAxD,CAAC,OAAQ,MAAO,QAAS,QAAQnB,QAAQiI,GAC5C,UAAUhI,MAAM,+BAGjB,OADaoH,KAAK9F,QADG,SAAAC,UAAOrC,EAAMqC,EAAI1B,MAAM4B,QAAQuG,MAwBrDrG,EAAW+G,UAAUrB,eAAiBA,EACtC1F,EAAW+G,UAAUiF,MAAQtG,EAgE7B1F,EAAW+G,UAAU9G,WA9DrB,WAAuCtC,OAAlBsO,OAAU5O,OAC9B,YADsCM,IAAAA,EAAW,QACW,IAAxD,CAAC,OAAQ,MAAO,QAAS,QAAQS,QAAQ6N,GAC5C,UAAU5N,MAAM,+BACjB,IAAoD,IAAhD,CAAC,MAAO,MAAO,UAAUD,QAAQT,GACpC,UAAUU,MAAM,0CAEjB,IAAI6N,EAAiB,SAAAtM,UAAOA,EAAI1B,KAAK4B,QAAQmM,IACzCE,EAAe1G,KAAK0B,kBAoDxB,OAnDI9J,IACH6O,EAAiB,SAAAtM,UAAOA,EAAI1B,KAAK4B,QAAQmM,GAAUzO,IAAIH,EAAO4O,SAkDpDjM,EAhDFyF,KAAK9F,QAAQuM,GACpBpN,OAAO,SAAAD,GAEP,UACCX,KAFYW,EAAMG,QAAQd,KAAK4B,QAAQmM,IAGpC3N,YACC6N,EAAa3N,IAAI,SAAA8M,GACnB,IAAIjO,EACJ,OAAQM,GACP,IAAK,SACJN,EAAQwB,EACN2D,QAAQ,SAAA5C,UAAOA,EAAI0L,KACnBpM,MAAM,SAAAC,UAAM4J,MAAM5J,IAAY,OAANA,IACxBkF,SACF,MACD,IAAK,MACJhH,EAAQwB,EACN2D,QAAQ,SAAA5C,UAAOA,EAAI0L,KACnBpM,MAAM,SAAAC,UAAM4J,MAAM5J,IAAY,OAANA,IACxBC,UACF,MACD,QAEC/B,EAAQwB,EACN2D,QAAQ,SAAA5C,UAAOA,EAAI0L,KACnBpM,MAAM,SAAAC,UAAM4J,MAAM5J,IAAY,OAANA,IACxBsJ,MAGJ,MAAO,CAAC6C,EAAKjO,KAEXwB,EACDuN,iBACAzH,OAAO,SAAA2G,SAAe,SAARA,IACd3G,OAAO,SAAA2G,UAAsC,IAA/Ba,EAAa/N,QAAQkN,KACnC9M,IAAI,SAAA8M,GACJ,IAAIjO,EAAQwB,EACV2D,QAAQ,SAAA5C,UAAOA,EAAI0L,KACnBhE,WACA/H,UAEF,OADqB,IAAjBlC,EAAMoM,SAAcpM,EAAQA,EAAM,IAC/B,CAACiO,EAAKjO,UAKjBoD,UACAC,UAAU,SAAAd,UAAOrC,EAAMqC,EAAI1B,MAAMqC,aAiCpCP,EAAW+G,UAAUsF,gBA5BrB,WAA4CC,OAAlBL,OAAU5O,OACnC,YAD2CiP,IAAAA,EAAY,KACK,IAAxD,CAAC,OAAQ,MAAO,QAAS,QAAQlO,QAAQ6N,GAC5C,UAAU5N,MAAM,+BACjB,IAAI6N,EAAiB,SAAAtM,UAAOA,EAAI1B,KAAK4B,QAAQmM,IAC1BxG,KAAK0B,kBACpB9J,IACH6O,EAAiB,SAAAtM,UAAOA,EAAI1B,KAAK4B,QAAQmM,GAAUzO,IAAIH,EAAO4O,KAE/D,IAAItN,EAAK8G,KAAK9F,QAAQuM,GACpBpN,OAAO,SAAAD,GAIP,MAAO,CACNX,KAJYW,EAAMG,QAAQd,KAAK4B,QAAQmM,GAKvC5O,MAJa,IAAI2C,EAAWnB,GAAO0N,cAAcC,SAAS,QACvC3F,GAAG,SAAS4F,SAIrBH,EACNzN,EACC2D,QAAQ,SAAA5C,UAAOA,EAAIvC,QACnB6B,MAAM,SAAAC,UAAM4J,MAAM5J,IAAY,OAANA,IACxBsJ,MACD,QAGLhI,UACAC,UAAU,SAAAd,UAAOrC,EAAMqC,EAAI1B,MAAMqC,WACnC,WAAWP,EAAWrB,IAqBvBqB,EAAW+G,UAAU2F,SAlBrB,WAAqC/O,EAAsBQ,OAAxC8N,OAAU5O,gBAAQM,IAAAA,EAAW,oBAAWQ,IAAAA,GAAO,GAEjE,IAQImF,EARKmC,KAQEkH,SFjbM,gBAAEV,cAAUW,aAAgB,oBAAQC,EAAOC,GAC5D,IAAMC,EAAYF,EAAM,GAMxB,OAJc3J,KAAKwG,MAClBnM,EAFeuP,EAAM,IAENrP,KAAKsP,EAAWd,GAAU,GAAQW,GAGpC,GE2abI,CAAU,CAACf,EAAU5O,IF7VP,SACfM,WACCsO,OAAUW,SAC6B,GAAtC5O,IAAAA,cAAeC,IAAAA,aAAcE,IAAAA,qBAC1B0O,EAAOC,GAYZ,IATA,IAAMC,EAAYxP,EAAMsP,EAAM,IACxBI,EAAU1P,EAAMuP,EAAM,IAItB/O,EAHQmF,KAAKwG,MAClBnM,EAAM0P,GAASxP,KAAKsP,EAAWd,GAAYW,GAEf,EACvBhP,EAAaiP,EAAM,GACnBhP,EAAWiP,EAAM,GACjBI,EAAa,GACVpP,EAAa,EAAGA,EAAaC,IAAcD,EAAY,CAC/D,IAAImK,EAAavK,EACfC,EACA,CAAEC,WAAAA,EAAYC,SAAAA,EAAUC,WAAAA,EAAYC,WAAAA,GACpC,CACCC,cAAAA,EACAC,aAAAA,EACAE,KAAAA,IAGFD,EAAOX,EAAMwP,GACXvP,KAAKM,EAAa,GAAK8O,EAAeX,GACtC1L,SACC4M,EAAI,CAACjP,EAAKmH,UAAW2B,OAAOiD,OAAO,GAAIhC,EAAY,CAAE/J,KAAAA,KACzDgP,EAAWhD,KAAKiD,GAGjB,OAAOD,GE6TNE,CAAQzP,EAAU,CAACsO,EAAU5O,KAG9B,OADKc,IAAMmF,EAAIA,EAAEiF,WAAW,CAAC,cAClBvI,EAAWsD,IAmBvBtD,EAAW+G,UAAUsG,SAdrB,SAAkBhQ,EAAOiQ,GACxB,IAAInO,EACJ,gBAFwBmO,IAAAA,EAAO,WAEvBA,GACP,IAAK,OACJnO,EAAI9B,EACJ,MACD,QACC8B,EAAI9B,EAAQoI,KAAKtE,QAInB,WAAWnB,EADFyF,KAAK3C,eAAe,CAAEzF,MAAO,SAAAuC,UAAOT,OAiB9Ca,EAAW+G,UAAUwG,cAXrB,SAAuBC,GAQtB,WAAWxN,EAHFyF,KAAK3C,eAAe,CAC5BzF,MAAO,SAAAuC,UALR,SAAqBA,EAAK4N,GAEzB,gBAFyBA,IAAAA,EAAc,IAC1BA,EAAYhP,IAAI,SAAA8E,UAAK1D,EAAI0D,KAAIqB,OAAO,SAAAxF,UAAKA,IACxC,IAAM,EAGNsO,CAAY7N,EAAK4N,MAC7BxL,OAAO,CAAC,OAAQ,YAgBpBhC,EAAW+G,UAAU2G,cAVrB,SAAuBrC,GACjBA,IAASA,EAAU5F,KAAK0B,mBACzBkE,GAAW9B,MAAMC,QAAQ6B,KAAUA,EAAU,CAACA,IAClD,IAAI1M,EAAK8G,KAKT,OAHA4F,EAAQpK,QAAQ,SAAA0M,GADM,IAAAlF,EAErB9J,EAAKA,EAAG6M,WAAWmC,EAAGhP,EAAGM,UAAU0O,GAAG7O,QAFjB2J,EAEsC,WAF/BpL,UAAUoL,GAAOpL,YAInC2C,EAAWrB,IAUvBqB,EAAW+G,UAAUhB,UAAYA,EACjC/F,EAAW+G,UAAU6G,SAAW7H,EAChC/F,EAAW+G,UAAU8G,aAAe9H,EAmBpC/F,EAAW+G,UAAU+G,qBAhBrB,SAA8BxC,EAAeyC,YAAfzC,IAAAA,EAAM,kBAASyC,IAAAA,GAAU,GACtD,IACIJ,EADKlI,KAEPxG,UAAUqM,GACVzK,cAAc,GACd/B,OAAO,SAAAgC,GACP,IAAI3B,GAAK2B,EAAOC,OAASD,EAAO9B,SAAWkE,KAAKC,IAAIrC,EAAO9B,SAC3D,MAAO,CAAC8B,EAAO4G,WAAW3G,OAAQ5B,KAElCuB,UAAU,SAAAsJ,UAAQA,EAAK,KACvBlL,OAAO,SAAAkL,UAAQA,EAAK,KAClBlD,EAVKrB,KAUM+F,WAAW,QAASmC,GAEnC,OADKI,IAASjH,EAAQA,EAAMjB,gBAAgB,CAAEiB,MAAO,SAAAzJ,UAAiB,IAARA,UACnD2C,EAAW8G,IAqDvB9G,EAAW+G,UAAUd,sBAAwBA,EAC7CjG,EAAW+G,UAAUiH,iBAAmB/H,EAiCxCjG,EAAW+G,UAAUkH,gBA/BrB,SAAyBC,uBAAAA,IAAAA,EAAiB,GACzC,IAAI7H,EAAWZ,KAAKa,cA2BpB,WAAWtG,EA1BEyF,KAAK9F,QAAQ,SAAAC,UAAOA,EAAI1B,KAAK2B,SACxCf,OAAO,SAAAD,GACP,IC5jByBvB,ED4jBrByP,EAAYlO,EAAMG,QAAQd,KAC1B+O,EAAUpO,EACZkC,OACA7C,KAAKV,IAAI6I,EAAS,IAAM,EAAGA,EAAS,IAAM,SACxC8H,GChkBqB7Q,EDgkBAyP,MC/jBrBxP,ED+jBgC0P,GC/jBrBxP,KAAKF,EAAMD,GAAQ,QDgkBlC,UACCyP,UAAAA,EACAE,QAAAA,GACG3O,EACF8P,EAAKjH,kBAAkB3I,IAAI,SAAA8M,SAAO,CACjCA,EACCzM,EACC2D,QAAQ,SAAA5C,UAAOA,EAAI0L,KACnBpM,MAAM,SAAAC,UAAKA,IACXsJ,MACD0F,EACAD,SAKJzN,UACA4N,aAAa,CAAEtB,UAAW,SAC1BxE,WAAW,aA0BdvI,EAAW+G,UAAUuH,YAlBrB,WACC,IACIvB,EADKtH,KACUzG,QAAQd,KAAKqC,SAC/B0M,EAFQxH,KAEK1E,OAAO7C,KAAKqC,SACtB8F,EAHKZ,KAGSa,cAOdjH,EANMW,EAAWuO,MACpBxB,EACAE,EACA5G,EACA,WACC3F,UAAU,SAAAd,UAAOA,EAAI1B,KAAKmH,YAChBS,MAVHL,KAUY/E,UAAU,SAAAd,UAAOA,EAAI1B,KAAKmH,aAAYvC,eAAe,CACzE3E,KAAM,SAAAyB,UACLA,MAAAA,EAAIvC,MAA4CuC,EAAIzB,UAAOqQ,KAG7D,OADI,IAAIxO,EAAWX,IA4BpBW,EAAW+G,UAAU0H,SAvBrB,wBAAoBrO,OAAAA,aAAS,UAAS/C,IAAAA,MAAOqR,IAAAA,SACtCC,EAAc,SAAA/O,UAAOA,MAAAA,EAAIQ,IAC/B,OAAIsO,MAMQ1O,EALFyF,KAAK3C,oBACb3E,KAAM,SAAAyB,UACL+O,EAAY/O,IAAQ,eAAYA,EAAIzB,MAAQ,IAAOyB,EAAIzB,QACvDiC,GAAS,SAAAR,UAAQ+O,EAAY/O,GAAO8O,EAAS9O,GAAOA,EAAIQ,SAGhD/C,MASC2C,EARFyF,KAAK3C,eAAe,CAC5B3E,KAAM,SAAAyB,UAAQ+O,EAAY/O,IAAQ,eAAYA,EAAIzB,MAAQ,IAAOyB,EAAIzB,QACnE0H,wBACDzF,GAAS,SAAAwO,UACTA,MAAAA,EACGvR,EACAuR,cA+BP5O,EAAW+G,UAAU8H,mBAtBrB,SAA4BC,GACtBvF,MAAMC,QAAQsF,KAClBA,EAAoB,CAACA,EAAmB,IACzCA,EAAoB3R,EAAa2R,GACjC,IACIC,EADKtJ,KAEPvG,MAAM,SAAAU,UAAqB,IAAdA,EAAIvC,QACjB2R,aACA,WAJOvJ,KAMLvG,MAAM,SAAAU,UAAqB,IAAdA,EAAIvC,QACjB4B,UAAU,QACVgQ,gBAEF/P,MAAM,SAAAC,UAAKA,EAAEkH,UAAYyI,IACzB9M,OAAO,CAAC,SACRc,eAAe,CAAEzF,MAAO,SAAAuC,gBAAazB,KAAM,SAAAyB,SAAO,CAAC,gBAGrD,OADkB,IAAII,EAAWyF,KAAKK,MAAMiJ,KA+B7C/O,EAAW+G,UAAUwF,YAzBrB,WACC,IAAIpL,EAAQsE,KAAKtE,QACb+N,EAAYzJ,KAAKvG,MAAM,SAAAiD,UAAKoH,MAAMC,QAAQrH,EAAEhE,OAASgE,EAAEhE,KAAKsL,OAAS,IACvE9J,QAAQ,SAAAwC,UAAKA,EAAEhE,KAAKgR,aACpBrQ,OAAO,SAAAD,SAAU,CACjBV,KAAMU,EAAMG,QAAQb,KACpBgD,MAAOtC,EAAMsC,QACbsL,QAAS5N,EAAMsC,QAAUA,KAEzBV,UACE2O,EAAO3J,KAAKvG,MACf,SAAAiD,UACCA,MAAAA,EAAEhE,MAEDoL,MAAMC,QAAQrH,EAAEhE,OAA2B,IAAlBgE,EAAEhE,KAAKsL,SACjCtI,QAOF,OANc+N,EACZ5M,WAAW,CACX4M,EAAU/N,QACV,CAAEhD,KAAM,QAASgD,MAAOiO,EAAM3C,QAAS2C,EAAOjO,KAE9CkO,kBAAkB,SAAAzP,UAAOA,EAAIuB,SA6ChCnB,EAAW+G,UAAUuI,gBAvCrB,WACC,IAAIjJ,EAAWZ,KAAKa,cAChBkB,EAAKrK,EAAakJ,GAmCtB,WAAWrG,EA7BFyF,KAAK9F,QAJO,SAAAC,UACpBrC,EAAMqC,EAAI1B,MACR4B,UACAuF,YAEDvG,OAAO,SAAAD,GACP,IAAMX,EAAOX,EAAMsB,EAAMG,QAAQd,MAC/B4B,QARa,SASbS,SACEgP,EAAYrM,KAAKwG,MACpBnM,EAAMW,GACJgK,MAAM,SACNzK,KAAKF,EAAMW,GAAO,eAAiBsJ,GAGlCrG,GADO,IAAIqO,KAAKtR,EAAKuR,cAAevR,EAAKwR,WAAa,EAAG,GAAGC,UACpD9Q,EACVI,UAAU,SACVC,MAAM,SAAAC,UAAKA,GAAW,IAANA,IAChBI,UAAUkK,QACRpM,EAAQwB,EACVI,UAAU,SACVC,MAAM,SAAAC,UAAM4J,MAAM5J,KAClBsJ,MACF,MAAO,CACNvK,KAAAA,EACAb,MAAO0L,MAAM1L,GAAS,EAAIA,EAC1B8D,MAAAA,EACAoO,UAAAA,EACAK,MAAOzO,EAAQoO,KAGhB9O,UACAC,UAAU,SAAAd,UAAOA,EAAI1B,KAAKqC,aAgC7BP,EAAW+G,UAAU8I,iBA3BrB,SAA0B3R,EAAMkC,EAAkB0P,YAAlB1P,IAAAA,EAAS,SACxClC,EAAOX,EAAMW,GACR4R,IACJA,EAAerK,KAAKxG,UAAUmB,GAC5BlB,MAAM,SAAAC,UAAM4J,MAAM5J,IAAY,OAANA,IACxBC,WAOH,IAAIkB,EAASmF,KAAKvE,OAAOhD,EAAKqC,UAC5BrB,MAAM,SAAAU,UAAOA,EAAI1B,KAAKa,UAAYb,EAAKa,UACvC6I,QAAQ,SAAAhI,UAAOrC,EAAMqC,EAAI1B,QACzB6R,KAAK,GAEP,OAAIzP,EAAOa,QAAU,EACVb,EACRrB,UAAUmB,GACVlB,MAAM,SAAAC,UAAM4J,MAAM5J,IAAY,OAANA,IACxBC,UAGK0Q,GA0BT9P,EAAW+G,UAAUiJ,YArBrB,WACC,IAAIrR,EAAK8G,KACLjG,EAAMb,EAERM,UAAU,SACVC,MAAM,SAAAC,UAAM4J,MAAM5J,IAAY,OAANA,IACxBC,UAYF,WAAWY,EAXMrB,EACfmE,eAAe,CACfmN,eAAgB,SAAArQ,UAAOjB,EAAGkR,iBAAiBjQ,EAAI1B,KAAM,QAASsB,MAE9DsD,eAAe,CACf3E,KAAM,SAAAyB,UAAQA,EAAIvC,MAAQuC,EAAIzB,MAAQ,iBAAcyB,EAAIzB,MAAQ,OAEhE2E,eAAe,CACfzF,MAAO,SAAAuC,UAAQA,EAAIvC,MAAQuC,EAAIvC,MAAQuC,EAAIqQ,kBAE3C1H,WAAW,CAAC,qBAiBfvI,EAAW+G,UAAUxH,QAZrB,WACC,IAAMqB,EAAS,KACK6E,KAAKyK,aAAatP,8BAAtC,iCAA8C,0FAC/B4N,OACb5N,EAAOsJ,QAGT,OAAOtJ,EAAOpC,IAAI,gBAAGN,IAAAA,KAASkH,0BAC7BlH,KAAMA,EAAKqC,UACR6E,MAkBLpF,EAAW+G,UAAUoJ,OAbrB,SAAgBjS,GACf,IAAIuH,KAAK2K,OAAT,CAGAlS,EAAOX,EAAMW,GAAMmH,gBAEAI,KAAKyK,aAAaG,6BAArC,iCAA4C,yFAAjCrG,IACV,GAAIA,EAAK,GAAG3E,YAAcnH,EACzB,OAAO8L,EAAK,MAgCfhK,EAAWuO,MAxBX,SAAexB,EAAWE,IAAgC9O,OAAtB8N,cAAU5O,aAAQ,IACrD,GAAI,CAAC,SAAU,OAAQ,MAAO,QAAS,QAAQe,QAAQ6N,GAAY,EAElE,MADAxF,QAAQC,MAAML,OACJhI,MAAM,+BAEjB0O,EAAYxP,EAAMwP,GAClBE,EAAU1P,EAAM0P,GAGhB,IAFA,IAAIqD,EAAQ,CAACvD,GACT1G,EAAWlJ,EAAa,CAAC8O,EAAU5O,IAChCiT,EAAMA,EAAM7G,OAAS,GAAGpE,UAAY4H,EAAQ5H,WAClDiL,EAAMpG,KAAK3M,EAAM+S,EAAMA,EAAM7G,OAAS,IAAIjM,IAAIH,EAAO4O,IAEtD,IAAItN,EAAK,IAAIqB,EAAWsQ,EAAM9R,IAAI,SAAAN,SAAS,CAAEA,KAAAA,MAU7C,OARIC,IACHQ,EAAK,IAAIqB,EACRrB,EAAGmE,eAAe,CACjB3E,KAAM,SAAAyB,SAAO,CAACzB,QAKVQ,GAkCRqB,EAAWuQ,UA/BX,SAAmBC,GACbjH,MAAMC,QAAQgH,KAAaA,EAAa,CAACA,IAC9CA,EAAaA,EAAWhS,IAAI,SAAAG,cAAUqB,EAAWrB,KACjD,IAAMwN,EAAe,IAAIsE,IACxBD,EAAWhS,IAAI,SAAAG,UAAMA,EAAGwI,oBAAmBzF,OAAO,SAACC,EAAGC,UAAMD,EAAEE,OAAOD,IAAI,KAwB1E,WAAW5B,EAtBUkF,EAAUjC,UAAUpB,OAAO2O,GAC9C7Q,QAAQ,SAAAC,UAAOA,EAAI1B,OACnBY,OAAO,SAAAD,GACP,IACI6R,EAAI,CAAExS,KADGW,EAAMG,QAAQd,MAgB3B,OAdAiO,EAAalL,QAAQ,SAAA0P,UAAMD,EAAEC,GAAK9R,EAAM2D,QAAQ,SAAA5C,UAAOA,EAAI+Q,KAAIlI,QAC/D5J,EACEuN,iBACAzH,OAAO,SAAA2G,SAAe,SAARA,IACd3G,OAAO,SAAA2G,UAAkC,IAA3Ba,EAAanL,IAAIsK,KAC/BrK,QAAQ,SAAAqK,GACR,IAAIjO,EAAQwB,EACV2D,QAAQ,SAAA5C,UAAOA,EAAI0L,KACnBhE,WACA/H,UACmB,IAAjBlC,EAAMoM,SAAcpM,EAAQA,EAAM,IACtCqT,EAAEpF,GAAOjO,IAGJqT,IAEPjQ,YAKHT,EAAW6B,OAAS,SAAA2O,GAMnB,OALKjH,MAAMC,QAAQgH,KAAaA,EAAa,CAACA,IAC9CA,EAAaA,EAAWhS,IAAI,SAAAG,cACvBqB,EAAWrB,GAAI+B,UAAU,SAAAd,UAAOA,EAAI1B,KAAKmH,kBAGnCrF,EADFkF,EAAUjC,UAAUpB,OAAO2O,KAGrCxQ,EAAW8F,MAAQ,SAAA0K,GAMlB,OALKjH,MAAMC,QAAQgH,KAAaA,EAAa,CAACA,IAC9CA,EAAaA,EAAWhS,IAAI,SAAAG,cACvBqB,EAAWrB,GAAI+B,UAAU,SAAAd,UAAOA,EAAI1B,KAAKmH,kBAGnCrF,EADFkF,EAAUjC,UAAU6C,MAAM0K"}
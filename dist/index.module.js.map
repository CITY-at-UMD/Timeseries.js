{"version":3,"file":"index.module.js","sources":["../src/lib/Timeseries.interval.js","../src/lib/Timeseries.fill.js","../src/lib/Timeseries.statistics.js","../src/lib/misc.js","../src/index.js"],"sourcesContent":["import dayjs from \"dayjs\";\n\nconst msToInterval = ms => {\n\tlet start = dayjs();\n\tlet end = dayjs().add(ms);\n\tif (end.diff(start, \"month\", true) >= 11) {\n\t\treturn [\"year\", Math.ceil(end.diff(start, \"year\", true))];\n\t} else if (end.diff(start, \"day\", true) >= 28) {\n\t\treturn [\"month\", Math.ceil(end.diff(start, \"month\", true))];\n\t} else if (end.diff(start, \"hour\", true) >= 23) {\n\t\treturn [\"day\", Math.ceil(end.diff(start, \"day\", true))];\n\t} else if (end.diff(start, \"minute\", true) >= 55) {\n\t\treturn [\"hour\", Math.ceil(end.diff(start, \"hour\", true))];\n\t} else {\n\t\treturn [\"minute\", end.diff(start, \"minute\")];\n\t}\n};\nconst intervalToMS = ([unit, value]) => {\n\tlet start = dayjs();\n\tlet end = dayjs().add(value, unit);\n\treturn end.diff(start);\n};\nfunction calculateInterval(df, startDate, endDate) {\n\tif (!startDate) startDate = df.first.date;\n\tif (!endDate) endDate = df.last.date;\n\tfunction computeInterval(window) {\n\t\treturn window.last() - window.first();\n\t}\n\tconst intervals = df\n\t\t.between(startDate, endDate)\n\t\t.getIndex()\n\t\t.window(2)\n\t\t.select(computeInterval)\n\t\t.detectValues()\n\t\t.orderBy(row => row.Frequency);\n\n\tlet val = intervals.last().Value;\n\treturn msToInterval(val);\n}\nexport { msToInterval, intervalToMS, calculateInterval };\n","import dayjs from \"dayjs\";\nimport fromPairs from \"lodash/fromPairs\";\nimport toPairs from \"lodash/toPairs\";\nimport { mean } from \"simple-statistics\";\nconst gapExists = ([duration, durationValue = 1]) => (pairA, pairB) => {\n\tconst startDate = pairA[0];\n\tconst endDate = pairB[0];\n\tlet gapSize = Math.floor(\n\t\tdayjs(endDate).diff(startDate, duration, true) / durationValue\n\t);\n\n\tif (gapSize > 0) return true;\n\treturn false;\n};\n\nconst valueFiller = (\n\tfillType,\n\t{ startValue, endValue, entryIndex, numEntries },\n\t{ overrideValue, dateFunction, date, flag }\n) => {\n\tif (\n\t\t[\"pad\", \"interpolate\", \"average\", \"dateFunction\", \"value\"].indexOf(\n\t\t\tfillType\n\t\t) === -1\n\t) {\n\t\tthrow new Error(\"fill Type not supported\");\n\t}\n\tlet value;\n\tif (fillType === \"pad\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\treturn [key, startValue[key]];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", \"pad\"];\n\t} else if (fillType === \"interpolate\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv =\n\t\t\t\t\tstartValue[key] +\n\t\t\t\t\t(entryIndex + 1) *\n\t\t\t\t\t\t((endValue[key] - startValue[key]) / (numEntries + 1));\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"average\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv = (startValue[key] + endValue[key]) / numEntries;\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"dateFunction\" && dateFunction) {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv = dateFunction(date);\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"value\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv;\n\t\t\t\tif (typeof overrideValue === \"number\") {\n\t\t\t\t\tnv = overrideValue;\n\t\t\t\t} else {\n\t\t\t\t\tnv = overrideValue[key];\n\t\t\t\t}\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\treturn [key, null];\n\t\t\t})\n\t\t);\n\t\tflag = [\"fill\"];\n\t}\n\treturn { ...value, flag };\n};\n\nconst gapFill = (\n\tfillType,\n\t[duration, durationValue],\n\t{ overrideValue, dateFunction, flag } = {}\n) => (pairA, pairB) => {\n\t// Fill values forward.\n\n\tconst startDate = dayjs(pairA[0]);\n\tconst endDate = dayjs(pairB[0]);\n\tlet gapSize = Math.floor(\n\t\tdayjs(endDate).diff(startDate, duration) / durationValue\n\t);\n\tconst numEntries = gapSize - 1;\n\tconst startValue = pairA[1];\n\tconst endValue = pairB[1];\n\tconst newEntries = [];\n\tfor (let entryIndex = 0; entryIndex < numEntries; ++entryIndex) {\n\t\tlet adjustment = valueFiller(\n\t\t\t\tfillType,\n\t\t\t\t{ startValue, endValue, entryIndex, numEntries },\n\t\t\t\t{\n\t\t\t\t\toverrideValue,\n\t\t\t\t\tdateFunction,\n\t\t\t\t\tflag\n\t\t\t\t}\n\t\t\t),\n\t\t\tdate = dayjs(startDate)\n\t\t\t\t.add((entryIndex + 1) * durationValue, duration)\n\t\t\t\t.toDate();\n\t\tlet e = [date.valueOf(), Object.assign({}, adjustment, { date })];\n\t\tnewEntries.push(e);\n\t}\n\n\treturn newEntries;\n};\n\n// Basic Fill Functions\nconst averageMonthlyMap = df =>\n\tnew Map(\n\t\tdf\n\t\t\t.group(\"month\")\n\t\t\t.select(group => ({\n\t\t\t\tmonth: group.first().date.month(),\n\t\t\t\tvalue: group\n\t\t\t\t\t.getSeries(\"value\")\n\t\t\t\t\t.where(v => v)\n\t\t\t\t\t.average()\n\t\t\t}))\n\t\t\t.toArray()\n\t\t\t.map(({ month, value }) => [month, value])\n\t);\nconst annualMonthlyAverageMap = df =>\n\tnew Map(\n\t\tdf\n\t\t\t.groupBy(row => row.date.year())\n\t\t\t.select(group => {\n\t\t\t\tconst date = group.first().date.startOf(\"year\");\n\t\t\t\tlet ts = new Timeseries(group).downsample([\"month\", 1], \"avg\");\n\t\t\t\tlet avg = ts.getSeries(\"value\").average();\n\t\t\t\tlet map = averageMonthlyMap(ts);\n\t\t\t\tmap.set(\"avg\", avg);\n\t\t\t\treturn [date.year(), map];\n\t\t\t})\n\t\t\t.toArray()\n\t);\nconst monthlyRollingAverageMap = (\n\tdf,\n\t{ years = 3, series = \"value\", aggregator = \"average\" } = {}\n) => {\n\tlet months = df\n\t\t.groupBy(row => row.date.startOf(\"month\").toDate())\n\t\t.select(group => {\n\t\t\tlet date = group.first().date.startOf(\"month\");\n\t\t\tlet value = group\n\t\t\t\t.getSeries(series)\n\t\t\t\t.where(v => v)\n\t\t\t\t.average();\n\t\t\treturn { date, value };\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => row.date.toDate())\n\t\t.bake();\n\tlet data = months\n\t\t.groupBy(row => row.date.month())\n\t\t.select(group => {\n\t\t\tlet values = new Map(\n\t\t\t\tgroup\n\t\t\t\t\t.rollingWindow(years)\n\t\t\t\t\t.select(window => [\n\t\t\t\t\t\twindow.last().date.year(),\n\t\t\t\t\t\twindow.getSeries(series).average()\n\t\t\t\t\t])\n\t\t\t);\n\t\t\tgroup\n\t\t\t\t.where(row => !values.has(row.date.year()))\n\t\t\t\t.forEach(row => {\n\t\t\t\t\tlet value =\n\t\t\t\t\t\tmonths.before(row.date.toDate()).count() > 0\n\t\t\t\t\t\t\t? months.before(row.date.toDate()).last()[series]\n\t\t\t\t\t\t\t: months.getSeries(series).average();\n\t\t\t\t\tvalues.set(row.date.year(), value);\n\t\t\t\t});\n\n\t\t\tlet month = group.first().date.month();\n\t\t\treturn [month, values];\n\t\t})\n\t\t.toArray();\n\treturn new Map(data);\n};\n\nconst fillMonthlyByMap = monthMap => row => monthMap.get(row.date.month());\nconst fillMonthlyBAnnualyMap = annualMonthlyMap => row => {\n\tlet month = row.date.month(),\n\t\tyear = row.date.year();\n\tif (annualMonthlyMap.has(month)) {\n\t\tif (annualMonthlyMap.has(month)) {\n\t\t\treturn  annualMonthlyMap.get(month).get(year);\n\t\t} else {\n\t\t\treturn mean([...annualMonthlyMap.get(month).values()]);\n\t\t}\n\t} else {\n\t\treturn mean(\n\t\t\t[...annualMonthlyMap.values()].map(m =>\n\t\t\t\t[...m.values()].reduce((a, b) => a.concat(b), [])\n\t\t\t)\n\t\t);\n\t}\n};\n\nconst pad = (df, { validOnly = true, series = \"value\" } = {}) => row => {\n\tlet values = df\n\t\t.before(row.date.toDate())\n\t\t.getSeries(series)\n\t\t.where(v => v);\n\tlet value = values.count() > 0 ? values.last() : 0;\n\t// console.log(row.date.toDate(), value);\n\treturn value;\n};\nconst annualAverage = (\n\tdf,\n\t{ validOnly = true, series = \"value\", years = 3, defaultValue } = {}\n) => row => {\n\tlet subset = df\n\t\t.subset([\"date\", series])\n\t\t.after(row.date.subtract(years, \"year\").toDate())\n\t\t.before(row.date.toDate())\n\t\t.bake();\n\tlet values = subset\n\t\t.where(r => r.date.month() === row.date.month())\n\t\t.where(r => r.date.date() === row.date.date())\n\t\t.where(r => r.date.hour() === row.date.hour())\n\t\t.where(r => r.date.minute() === row.date.minute())\n\t\t.getSeries(series)\n\t\t.where(v => v);\n\n\tlet value;\n\tif (values.count() < years) {\n\t\tvalue = values\n\t\t\t.appendPair([\n\t\t\t\tnull,\n\t\t\t\tsubset\n\t\t\t\t\t.getSeries(series)\n\t\t\t\t\t.where(v => v)\n\t\t\t\t\t.average()\n\t\t\t])\n\t\t\t.average();\n\t} else {\n\t\tvalue = values.average();\n\t}\n\t// console.log(row.date.toDate(), values.toArray(), value);\n\treturn value;\n};\nexport {\n\tgapExists,\n\tgapFill,\n\taverageMonthlyMap,\n\tfillMonthlyByMap,\n\tpad,\n\tannualAverage,\n\tannualMonthlyAverageMap,\n\tmonthlyRollingAverageMap,\n\tfillMonthlyBAnnualyMap\n};\n","// Source: https://www.itl.nist.gov/div898/handbook/eda/section3/eda35h3.htm\n// https://vsp.pnnl.gov/help/Vsample/Rosners_Outlier_Test.htm\n// https://www.itl.nist.gov/div898/handbook/prc/section1/prc16.htm\n// https://www.math.ucla.edu/~tom/distributions/KolSmir2.html?\nimport { DataFrame } from \"data-forge\";\nimport {\n  sampleStandardDeviation,\n  mean as _mean,\n  max,\n  median as _median,\n  medianAbsoluteDeviation,\n  quantile\n} from \"simple-statistics\";\nimport { Studentt } from \"distributions\";\nimport dayjs from \"dayjs\";\n\nfunction rval(df) {\n  let values = df.deflate(row => row.x).toArray();\n  let std = sampleStandardDeviation(values);\n  let mean = _mean(values);\n  if (std === 0) {\n    let ndf = df.generateSeries({ ares: row => 0 });\n    return { R: 0, std, mean, df: ndf };\n  }\n  let ndf = new DataFrame({\n    values: values.map(x => ({\n      x,\n      ares: Math.abs(x - mean) / std\n    }))\n  });\n  let R = max(ndf.deflate(row => row.ares).toArray());\n  return { R, df: ndf, std, mean };\n}\n\nfunction pValue(n, i, alpha) {\n  let p = 1 - alpha / (2 * (n - i + 1));\n  return p;\n}\nfunction tValue(p, degreeOfFreedom) {\n  let qt = new Studentt(degreeOfFreedom);\n  let t = qt.inv(p);\n  return t;\n}\n//\nfunction lambdaTest(n, i, alpha) {\n  let p = pValue(n, i, alpha);\n  let df = n - i - 1;\n  let t = tValue(p, df);\n  let lambda =\n    (t * (n - i)) /\n    Math.sqrt((n - i - 1 + Math.pow(t, 2)) * (n - i + 1));\n  return { lambda, p, t };\n}\nfunction rosnerTest(dataset = [], k = 10, alpha = 0.05) {\n  let dataframe = new DataFrame({\n    values: dataset.map(x => ({ x }))\n  });\n  let n = dataframe.getSeries(\"x\").count();\n  let newdf;\n  let i = 1;\n  let outliers = [];\n  let trip = false;\n  while (i <= k) {\n    let pair = {};\n    let s = Date.now();\n    if (i === 1) {\n      let { R, df, mean, std } = rval(dataframe);\n      newdf = df.where(row => row.ares !== R);\n      pair = Object.assign({}, pair, {\n        mean,\n        std,\n        Value: df\n          .where(row => row.ares === R)\n          .getSeries(\"x\")\n          .first(),\n        R\n      });\n    } else {\n      let { R, df, mean, std } = rval(newdf);\n      newdf = df.where(row => row.ares !== R);\n      pair = Object.assign({}, pair, {\n        mean,\n        std,\n        Value: df\n          .where(row => row.ares === R)\n          .getSeries(\"x\")\n          .first(),\n        R\n      });\n    }\n    let { lambda, p, t } = lambdaTest(n, i, alpha);\n    pair = Object.assign({}, pair, { lambda });\n    outliers.push(pair);\n    if (trip && pair.R > pair.lambda) trip = false;\n    if (pair.R === 0) break;\n    if (pair.R < pair.lambda) {\n      if (trip) {\n        break;\n      } else {\n        trip = true;\n      }\n    }\n    i++;\n  }\n  outliers = new DataFrame(outliers)\n    .generateSeries({\n      outlier: row => row.R > row.lambda\n    })\n    .takeWhile(row => row.outlier);\n  let outlierValues = outliers\n    .where(row => row.Value > 0)\n    .deflate(row => row.Value);\n  let thresholds = {\n    lower: 0,\n    upper:\n      outlierValues.count() > 0 ? outlierValues.min() : Infinity\n  };\n  return {\n    outliers,\n    thresholds,\n    iterations: i\n  };\n}\nconst modz = (value, mad, median) => {\n  return (0.6745 * (value - median)) / mad;\n};\nfunction modifiedZScoreTest(values) {\n  let median = _median(values);\n  let mad = medianAbsoluteDeviation(values);\n  values = values\n    .sort((a, b) => b - a)\n    .filter(v => v > 0)\n    .map(v => [v, modz(v, mad, median)]);\n  let outliers = values.filter(\n    ([v, modz]) => Math.abs(modz) >= 3.5\n  );\n  let upper = Math.min(\n    ...[Infinity, ...outliers.map(v => v[0])]\n  );\n  // let score,\n  // \tvalue,\n  // \tthreshold = Infinity,\n  // \tindex = 0;\n  // do {\n  // \tvalue = values[index];\n  // \tscore = modz(value, mad, median);\n  // \tif (Math.abs(score) >= 3.5) threshold = value;\n  // } while (score >= 3.5);\n  return { thresholds: { upper, lower: 0 } };\n}\nfunction boxPlotTest(values) {\n  let q1 = quantile(values, 0.25);\n  let q3 = quantile(values, 0.75);\n  let iqr = q3 - q1;\n  return {\n    thresholds: {\n      lowerInner: q1 - 1.5 * iqr,\n      upperInner: q1 - 3 * iqr,\n      lowerOuter: q3 + 1.5 * iqr,\n      upperOuter: q3 + 3 * iqr\n    }\n  };\n}\nfunction calculateOutlierThresholds(\n  df,\n  { k, filterZeros = true } = {}\n) {\n  let values = df\n    .where(\n      row =>\n        row.flag === null ||\n        row.flag === undefined ||\n        Array.isArray(row.flag)\n    )\n    .where(row => !isNaN(row.value) && row.value !== null)\n    .getSeries(\"value\")\n    .bake();\n  if (filterZeros) values = values.where(value => value > 0);\n  if (!k) {\n    k =\n      values.count() < 1000\n        ? Math.floor(values.count() * 0.15)\n        : Math.min(...[1000, Math.floor(values.count() * 0.02)]);\n  }\n  if (values.count < 5) return {};\n  let { outliers, threshold } = rosnerTest(values.toArray(), k);\n  return { outliers, threshold };\n}\n\nfunction zeroCheck(df, threshold = 2) {\n  let zeroGroups = df\n    .variableWindow((a, b) => {\n      return a.value === b.value && a.value === 0;\n    })\n    .where(window => window.getIndex().count() >= threshold);\n  let zeroSummary = zeroGroups\n    .select(window => ({\n      start: window.first().date,\n      end: window.last().date,\n      count: window.count()\n    }))\n    .inflate(); // Series -> dataframe.\n  // .toArray()\n  return { zeroSummary, zeroGroups };\n}\n\nfunction zeroReplacement(df, threshold) {\n  let { zeroGroups } = zeroCheck(df, threshold);\n  zeroGroups.forEach(dff => {\n    dff = dff.transformSeries({\n      value: value => null,\n      flag: value => [\"zero\"]\n    });\n    df = DataFrame.merge([df, dff]);\n  });\n  return df;\n}\nfunction isOutlier(value, { lower, upper }) {\n  if (value < lower || value >= upper) {\n    return true;\n  }\n  return false;\n}\nfunction validMean(df) {\n  let values = df\n    .getSeries(\"value\")\n    .where(value => typeof value === \"number\");\n  return values.average();\n}\nfunction validMonthlyMeanMap(df) {\n  let dateComparison = row =>\n    dayjs(row.date)\n      .startOf(\"month\")\n      .month();\n\n  df = df\n    .where(row => typeof row.value === \"number\")\n    .groupBy(dateComparison)\n    .select(group => ({\n      month: new Date(group.first().date).getMonth(),\n      value: group.deflate(row => row.value).average()\n    }));\n  return new Map(\n    df.toArray().map(({ month, value }) => [month, value])\n  );\n}\n\nfunction quality(df) {\n  let count = df.getIndex().count();\n  let valid = df\n    .getSeries(\"flag\")\n    .where(\n      value =>\n        value === null ||\n        (Array.isArray(value) && value.length === 0)\n    )\n    .count();\n  let missing = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"missing\") !== -1)\n    .count();\n  let dirty = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"clean\") !== -1)\n    .count();\n  let zerod = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"zero\") !== -1)\n    .count();\n  let breakdown = {\n    valid: valid / count,\n    missing: missing / count,\n    invalid: (dirty + zerod) / count\n  };\n  let report = {\n    accuracy: (1 - dirty / count) * 4,\n    completeness: 4 * breakdown.valid,\n    consistency: 4 * ((count - missing - zerod) / count)\n  };\n  return { breakdown, report, count };\n}\n\nexport {\n  rosnerTest,\n  modifiedZScoreTest,\n  boxPlotTest,\n  calculateOutlierThresholds,\n  zeroReplacement,\n  isOutlier,\n  validMean,\n  validMonthlyMeanMap,\n  quality\n};\n","import dayjs from \"dayjs\";\nexport const annualScale = (start, end) =>\n\t365 / dayjs(end).diff(dayjs(start), \"day\");\nexport const calculateChange = (baseline, value) =>\n\t(value - baseline) / baseline;\n","import dayjs from \"dayjs\";\nimport dataForge from \"data-forge\";\nimport { msToInterval, intervalToMS } from \"./lib/Timeseries.interval\";\nimport isEqual from \"lodash/isEqual\";\nimport has from \"lodash/has\";\nimport get from \"lodash/get\";\nimport fromPairs from \"lodash/fromPairs\";\nimport {\n\tgapExists,\n\tgapFill,\n\taverageMonthlyMap,\n\tfillMonthlyByMap,\n\tpad,\n\tannualAverage,\n\tannualMonthlyAverageMap,\n\tmonthlyRollingAverageMap,\n\tfillMonthlyBAnnualyMap\n} from \"./lib/Timeseries.fill\";\nimport {\n\tckmeans,\n\tmax,\n\tmedianAbsoluteDeviation,\n\tquantile\n} from \"simple-statistics\";\n\nimport {\n\trosnerTest,\n\tboxPlotTest,\n\tmodifiedZScoreTest\n} from \"./lib/Timeseries.statistics\";\nimport { annualScale, calculateChange } from \"./lib/misc\";\n\n// export default ;\n// Fill Options\nexport {\n\tTimeseries,\n\tannualAverage,\n\taverageMonthlyMap,\n\tannualMonthlyAverageMap,\n\tmonthlyRollingAverageMap,\n\tfillMonthlyBAnnualyMap,\n\tfillMonthlyByMap,\n\tpad\n};\nfunction Timeseries(data = [], options = {}) {\n\t// const { msIndex } = options;\n\tif (data instanceof Timeseries) {\n\t\treturn data;\n\t}\n\tif (data instanceof dataForge.DataFrame) {\n\t\tdata = data.toArray();\n\t}\n\n\tdata = data\n\t\t.map(({ date, ...others }) => ({ date: dayjs(date), ...others }))\n\t\t.sort((a, b) => a.date.valueOf() - b.date.valueOf());\n\tlet config = {\n\t\t// columns: ['date', 'value', 'raw', 'flag'],\n\t\tvalues: data,\n\t\tindex: data.map(({ date }) => date.toDate()),\n\t\tconsiderAllRows: true\n\t};\n\tdataForge.DataFrame.call(this, config);\n}\n\nTimeseries.prototype = Object.create(dataForge.DataFrame.prototype);\nTimeseries.prototype.constructor = Timeseries;\n\n// Getters\nfunction getValueColumns() {\n\treturn this.detectTypes()\n\t\t.where(row => row.Type === \"number\")\n\t\t.distinct(row => row.Column)\n\t\t.getSeries(\"Column\")\n\t\t.toArray();\n}\nfunction interval() {\n\tconst computeInterval = window => window.last() - window.first();\n\tconst intervals = this.getIndex()\n\t\t.window(2)\n\t\t.select(computeInterval)\n\t\t.detectValues()\n\t\t.orderBy(row => -row.Frequency);\n\t// .orderBy(row => row.Value);\n\n\tlet val = intervals.first().Value;\n\n\treturn msToInterval(val);\n}\n\nfunction dateRange(unit, adjustment) {\n\tlet start = dayjs(this.first().date),\n\t\tend = dayjs(this.last().date);\n\tif (adjustment) {\n\t\tstart = start.startOf(adjustment);\n\t\tend = end.endOf(adjustment);\n\t}\n\treturn end.diff(start, unit);\n}\nTimeseries.prototype.getValueColumns = getValueColumns;\nTimeseries.prototype.getInterval = interval;\nTimeseries.prototype.getDateRange = dateRange;\n\n// Statistics\nfunction cvrsme(actual, simulated) {\n\tlet df = this.subset([actual, simulated])\n\t\t.resetIndex()\n\t\t.generateSeries({\n\t\t\tactual: row => row[actual] || 0,\n\t\t\tsimulated: row => row[simulated] || 0\n\t\t})\n\t\t.dropSeries([actual, simulated])\n\t\t.generateSeries({ diff: row => row.actual - row.simulated });\n\tlet n = df.count();\n\tlet p = 1.0;\n\tlet ybar = df.getSeries(\"actual\").sum() / n;\n\tlet v = Math.sqrt(df.getSeries(\"diff\").sum() / (n - p)) / ybar;\n\treturn v;\n}\nfunction nmbe(actual, simulated) {\n\tlet df = this.subset([actual, simulated])\n\t\t.resetIndex()\n\t\t.generateSeries({\n\t\t\tactual: row => row[actual] || 0,\n\t\t\tsimulated: row => row[simulated] || 0\n\t\t})\n\t\t.dropSeries([actual, simulated])\n\t\t.generateSeries({ diff: row => row.actual - row.simulated });\n\n\tlet n = df.count();\n\tlet p = 1.0;\n\tlet ybar = df.getSeries(\"actual\").sum() / n;\n\tlet b = df.getSeries(\"diff\").sum() / ((n - p) * ybar);\n\treturn b;\n}\nTimeseries.prototype.cvrsme = cvrsme;\nTimeseries.prototype.nmbe = nmbe;\n\n// Methods\nfunction calculateThresholdOptions({\n\tk,\n\tfilterZeros = true,\n\tfilterNegative = true\n} = {}) {\n\tlet noflags = this.where(\n\t\trow =>\n\t\t\trow.flag === null ||\n\t\t\trow.flag === undefined ||\n\t\t\t(Array.isArray(row.flag) && row.flag.length === 0)\n\t)\n\t\t.where(row => !isNaN(row.value) && row.value !== null)\n\t\t.getSeries(\"value\");\n\tif (filterZeros) noflags = noflags.where(value => value !== 0);\n\tif (filterNegative) noflags = noflags.where(value => value > 0);\n\tif (!k) {\n\t\tk =\n\t\t\tnoflags.count() < 1000\n\t\t\t\t? Math.floor(noflags.count() * 0.15)\n\t\t\t\t: Math.min(...[1000, Math.floor(noflags.count() * 0.02)]);\n\t}\n\tif (noflags.count() < 5) return {};\n\tlet { thresholds: esd } = rosnerTest(noflags.toArray(), k);\n\tlet { thresholds: box } = boxPlotTest(noflags.toArray());\n\tlet { thresholds: modz } = modifiedZScoreTest(noflags.toArray());\n\treturn { esd, box, modz };\n}\n\nfunction getBestThreshold() {\n\ttry {\n\t\tlet thresholds = this.calculateThresholdOptions();\n\t\tconst thresholdGroups = ckmeans(\n\t\t\t[\n\t\t\t\tget(thresholds, \"esd.upper\", null),\n\t\t\t\tget(thresholds, \"modz.upper\", null),\n\t\t\t\tget(thresholds, \"box.lowerOuter\", null),\n\t\t\t\tget(thresholds, \"box.upperOuter\", null)\n\t\t\t].filter(v => v),\n\t\t\t2\n\t\t);\n\t\tlet threshold_actual = max(\n\t\t\tthresholdGroups.reduce((a, b) => (a.length > b.length ? a : b))\n\t\t);\n\t\treturn threshold_actual;\n\t} catch (error) {\n\t\tconsole.error(error);\n\t\tthrow new Error(\"Cannot determine threshold\");\n\t}\n}\n\nfunction calculateStatistics(options = {}) {\n\tconst {\n\t\tcolumn = \"value\",\n\t\tfilterZeros = false,\n\t\tfilterNegative = true\n\t} = options;\n\tlet series = this.deflate(row => row[column]).where(value => !isNaN(value));\n\tif (filterNegative) series = series.where(value => value >= 0);\n\tif (filterZeros) series = series.where(value => value !== 0);\n\tlet median = series.median();\n\tlet mean = series.average();\n\tlet count = series.count();\n\tlet std = series.std();\n\tlet min = series.min();\n\tlet max = series.max();\n\tlet mad = medianAbsoluteDeviation(series.toArray());\n\tlet q1 = quantile(series.toArray(), 0.25);\n\tlet q3 = quantile(series.toArray(), 0.75);\n\tlet iqr = q3 - q1;\n\tlet stats = {\n\t\tmedian,\n\t\tmean,\n\t\tcount,\n\t\tstd,\n\t\tmin,\n\t\tmax,\n\t\tmad,\n\t\tq1,\n\t\tq3,\n\t\tiqr\n\t};\n\treturn stats;\n}\n\nTimeseries.prototype.calculateStatistics = calculateStatistics;\nTimeseries.prototype.calculateThresholdOptions = calculateThresholdOptions;\nTimeseries.prototype.getBestThreshold = getBestThreshold;\n\n// Chainable Methods\nfunction betweenDates(start, end) {\n\tlet df = this.between(start, end);\n\treturn new Timeseries(df);\n}\nTimeseries.prototype.betweenDates = betweenDates;\n\nfunction transformAllSeries(adjustmentFunction, { exclude }) {\n\tlet df = this;\n\tlet columns = (columns = df\n\t\t.detectTypes()\n\t\t.where(row => row.Type === \"number\")\n\t\t.distinct(row => row.Column)\n\t\t.getSeries(\"Column\")\n\t\t.toArray());\n\tif (exclude && Array.isArray(exclude)) {\n\t\tcolumns = columns.filter(col => exclude.indexOf(col) === -1);\n\t}\n\tcolumns.forEach(col => {\n\t\tdf = df.transformSeries({\n\t\t\t[col]: value => {\n\t\t\t\tif (isNaN(value)) {\n\t\t\t\t\treturn value;\n\t\t\t\t} else {\n\t\t\t\t\treturn adjustmentFunction(value);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\treturn df;\n}\n\nTimeseries.prototype.transformAllSeries = transformAllSeries;\n\nfunction reset() {\n\tlet df = this.withSeries({\n\t\tvalue: row =>\n\t\t\trow.flag && Array.isArray(row.flag) && row.flag.length > 0\n\t\t\t\t? row.raw\n\t\t\t\t: row.value\n\t})\n\t\t.subset([\"date\", \"value\"])\n\t\t.where(row => !isNaN(row.value) && row.value !== null);\n\treturn new Timeseries(df);\n}\nTimeseries.prototype.reset = reset;\n\nfunction group(interval, toArray) {\n\tif ([\"hour\", \"day\", \"month\", \"year\"].indexOf(interval) === -1)\n\t\tthrow new Error(\"interval type not supported\");\n\tlet dateComparison = row => dayjs(row.date).startOf(interval);\n\tlet groups = this.groupBy(dateComparison);\n\treturn groups;\n}\n\nTimeseries.prototype.group = group;\n\nfunction removeOutliers({ series = \"value\", lower, upper } = {}) {\n\tif (lower > upper) throw new Error(\"thresholds invalid\");\n\tlet outlierCheck = (value, lower, upper) => value < lower || value > upper;\n\n\tlet outliers = this.where(row => outlierCheck(row[series], lower, upper))\n\t\t.generateSeries({\n\t\t\traw: row => row[series],\n\t\t\tflag: ({ flag = [] }) => [\"outlier\", ...flag]\n\t\t})\n\t\t.transformSeries({\n\t\t\t[series]: value => null\n\t\t});\n\n\tlet merged = this.merge(outliers);\n\treturn new Timeseries(merged);\n}\n\nTimeseries.prototype.removeOutliers = removeOutliers;\nTimeseries.prototype.clean = removeOutliers;\n\nfunction downsample([duration, value], fillType = \"sum\") {\n\tif ([\"hour\", \"day\", \"month\", \"year\"].indexOf(duration) === -1)\n\t\tthrow new Error(\"interval type not supported\");\n\tif ([\"sum\", \"avg\", \"median\"].indexOf(fillType) === -1) {\n\t\tthrow new Error(\"aggregation type not suppported, only:\");\n\t}\n\tlet dateComparison = row => row.date.startOf(duration);\n\tlet valueColumns = this.getValueColumns();\n\tif (value) {\n\t\tdateComparison = row => row.date.startOf(duration).add(value, duration);\n\t}\n\tlet df = this.groupBy(dateComparison)\n\t\t.select(group => {\n\t\t\tconst date = group.first().date.startOf(duration);\n\t\t\treturn {\n\t\t\t\tdate,\n\t\t\t\t...fromPairs([\n\t\t\t\t\t...valueColumns.map(col => {\n\t\t\t\t\t\tlet value;\n\t\t\t\t\t\tswitch (fillType) {\n\t\t\t\t\t\t\tcase \"median\":\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.median();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"avg\":\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.average();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t// sum\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.sum();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn [col, value];\n\t\t\t\t\t}),\n\t\t\t\t\t...group\n\t\t\t\t\t\t.getColumnNames()\n\t\t\t\t\t\t.filter(col => col !== \"date\")\n\t\t\t\t\t\t.filter(col => valueColumns.indexOf(col) === -1)\n\t\t\t\t\t\t.map(col => {\n\t\t\t\t\t\t\tlet value = group\n\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t.distinct()\n\t\t\t\t\t\t\t\t.toArray();\n\t\t\t\t\t\t\tif (value.length === 1) value = value[0];\n\t\t\t\t\t\t\treturn [col, value];\n\t\t\t\t\t\t})\n\t\t\t\t])\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => dayjs(row.date).toDate());\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.downsample = downsample;\nfunction downsampleClean([duration, value], threshold = 0.8) {\n\tif ([\"hour\", \"day\", \"month\", \"year\"].indexOf(duration) === -1)\n\t\tthrow new Error(\"interval type not supported\");\n\tlet dateComparison = row => row.date.startOf(duration);\n\tlet valueColumns = this.getValueColumns();\n\tif (value) {\n\t\tdateComparison = row => row.date.startOf(duration).add(value, duration);\n\t}\n\tlet df = this.groupBy(dateComparison)\n\t\t.select(group => {\n\t\t\tconst date = group.first().date.startOf(duration);\n\t\t\tlet quality = new Timeseries(group).dataQuality().setIndex(\"flag\");\n\t\t\tlet clean = quality.at(\"clean\").percent;\n\t\t\tconsole.log(date.format(\"MMMM YYYY\"), clean);\n\t\t\treturn {\n\t\t\t\tdate,\n\t\t\t\tvalue:\n\t\t\t\t\tclean >= threshold\n\t\t\t\t\t\t? group\n\t\t\t\t\t\t\t\t.deflate(row => row.value)\n\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t.sum()\n\t\t\t\t\t\t: null\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => dayjs(row.date).toDate());\n\treturn new Timeseries(df);\n}\nTimeseries.prototype.downsampleClean = downsampleClean;\nfunction upsample([duration, value], fillType = \"avg\") {\n\t// Dont use this b/c it has the raw and flag values\n\tlet df = this.fillGaps(\n\t\tgapExists([duration, value]),\n\t\tgapFill(fillType, [duration, value])\n\t);\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.upsample = upsample;\n\nfunction populate(value, type = \"avg\") {\n\tlet v;\n\tswitch (type) {\n\t\tcase \"fill\":\n\t\t\tv = value;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tv = value / this.count();\n\t\t\tbreak;\n\t}\n\tlet df = this.generateSeries({ value: row => v });\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.populate = populate;\n\nfunction reduceToValue(columnNames) {\n\tfunction chooseValue(row, columnNames = []) {\n\t\tlet values = columnNames.map(n => row[n]).filter(v => v);\n\t\treturn values[0] || 0;\n\t}\n\tlet df = this.generateSeries({\n\t\tvalue: row => chooseValue(row, columnNames)\n\t}).subset([\"date\", \"value\"]);\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.reduceToValue = reduceToValue;\n\nfunction cumulativeSum(columns) {\n\tif (!columns) columns = this.getValueColumns();\n\tif (columns & !Array.isArray(columns)) columns = [columns];\n\tlet df = this;\n\tconst cumulativeSum = sum => value => (sum += value);\n\tcolumns.forEach(s => {\n\t\tdf = df.withSeries(s, df.getSeries(s).select(cumulativeSum(0)));\n\t});\n\treturn new Timeseries(df);\n}\nTimeseries.prototype.cumulativeSum = cumulativeSum;\n\nfunction totalRows(series = [\"value\"], colname = \"total\") {\n\tlet ndf = this.generateSeries({\n\t\t[colname]: row => series.map(v => row[v] || 0).reduce((a, b) => a + b, 0)\n\t});\n\treturn new Timeseries(ndf);\n}\nTimeseries.prototype.totalRows = totalRows;\nTimeseries.prototype.totalRow = totalRows;\nTimeseries.prototype.totalColumns = totalRows;\n\n// Baseline Functions\nfunction rollingPercentChange(col = \"value\", decimal = true) {\n\tlet df = this;\n\tlet delta = df.withSeries(\"delta\", df.getSeries(\"value\").percentChange());\n\tif (decimal) delta = data.transformSeries({ delta: value => value / 100 });\n\treturn new Timeseries(delta);\n}\n\nTimeseries.prototype.rollingPercentChange = rollingPercentChange;\nfunction baselinePercentChange(baselineDF) {\n\t// Only Change in Year\n\tif (!(baselineDF instanceof Timeseries))\n\t\tbaselineDF = new Timeseries(baselineDF);\n\tlet dfwb;\n\tif (baselineDF.count() > 1) {\n\t\tlet interval = this.getInterval();\n\t\tlet baselineInterval = baselineDF.interval;\n\t\tif (!isEqual(interval, baselineInterval)) {\n\t\t\tconsole.error(interval, baselineInterval);\n\t\t\tthrow new Error(\"baseline and data intervals do not match\");\n\t\t}\n\t\tlet indexer;\n\t\tswitch (interval[0]) {\n\t\t\tcase \"day\":\n\t\t\t\tindexer = date => `${date.month()}-${date.date()}`;\n\t\t\t\tbreak;\n\t\t\tcase \"month\":\n\t\t\t\tindexer = date => date.month();\n\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tindexer = date => 0;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tlet indexedBaseline = baselineDF.withIndex(row => indexer(row.date));\n\t\tlet getBaselineValue = index => {\n\t\t\tlet at = indexedBaseline.at(index);\n\t\t\tif (at && has(at, \"value\")) {\n\t\t\t\treturn at.value;\n\t\t\t} else {\n\t\t\t\treturn indexedBaseline.getSeries(\"value\").average();\n\t\t\t}\n\t\t};\n\t\tdfwb = this.generateSeries({\n\t\t\tbaseline: row => getBaselineValue(indexer(row.date))\n\t\t});\n\t} else {\n\t\tdfwb = this.generateSeries({\n\t\t\tbaseline: row => baselineDF.first().value\n\t\t});\n\t}\n\tdfwb = dfwb.generateSeries({\n\t\tdelta: row => calculateChange(row.baseline, row.value)\n\t});\n\treturn new Timeseries(dfwb);\n}\n\nTimeseries.prototype.baselinePercentChange = baselinePercentChange;\nTimeseries.prototype.addBaselineDelta = baselinePercentChange;\n\nfunction annualIntensity(normalizeValue = 1) {\n\tlet interval = this.getInterval();\n\tlet annual = this.groupBy(row => row.date.year())\n\t\t.select(group => {\n\t\t\tlet startDate = group.first().date;\n\t\t\tlet endDate = group\n\t\t\t\t.last()\n\t\t\t\t.date.add(interval[1] || 1, interval[0] || \"month\");\n\t\t\tlet scaler = annualScale(startDate, endDate);\n\t\t\treturn {\n\t\t\t\tstartDate,\n\t\t\t\tendDate,\n\t\t\t\t...fromPairs(\n\t\t\t\t\tthis.getValueColumns().map(col => [\n\t\t\t\t\t\tcol,\n\t\t\t\t\t\t(group\n\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t.where(v => v)\n\t\t\t\t\t\t\t.sum() *\n\t\t\t\t\t\t\tscaler) /\n\t\t\t\t\t\t\tnormalizeValue\n\t\t\t\t\t])\n\t\t\t\t)\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.renameSeries({ startDate: \"date\" })\n\t\t.dropSeries(\"endDate\");\n\treturn new Timeseries(annual);\n}\n\nTimeseries.prototype.annualIntensity = annualIntensity;\n\n// Fill Functions\n\nfunction fillMissing() {\n\tlet df = this;\n\tlet startDate = df.first().date.toDate(),\n\t\tendDate = df.last().date.toDate();\n\tlet interval = df.getInterval();\n\tlet bdf = Timeseries.blank(\n\t\tstartDate,\n\t\tendDate,\n\t\tinterval,\n\t\t\"missing\"\n\t).withIndex(row => row.date.valueOf());\n\tlet m = bdf.merge(df.withIndex(row => row.date.valueOf())).generateSeries({\n\t\tflag: row =>\n\t\t\trow.value === null || row.value === undefined ? row.flag : undefined\n\t});\n\tm = new Timeseries(m);\n\treturn m;\n}\nTimeseries.prototype.fillMissing = fillMissing;\n\nfunction fillNull({ series = \"value\", value, callback }) {\n\tconst seriesCheck = row => row[series] === null || row[series] === undefined;\n\tif (callback) {\n\t\tlet df = this.generateSeries({\n\t\t\tflag: row =>\n\t\t\t\tseriesCheck(row) ? [\"fill\", ...(row.flag || [])] : row.flag,\n\t\t\t[series]: row => (seriesCheck(row) ? callback(row) : row[series])\n\t\t});\n\t\treturn new Timeseries(df);\n\t} else if (value) {\n\t\tlet df = this.generateSeries({\n\t\t\tflag: row => (seriesCheck(row) ? [\"fill\", ...(row.flag || [])] : row.flag)\n\t\t}).transformSeries({\n\t\t\t[series]: currentValue =>\n\t\t\t\tcurrentValue === null || currentValue === undefined\n\t\t\t\t\t? value\n\t\t\t\t\t: currentValue\n\t\t});\n\t\treturn new Timeseries(df);\n\t} else {\n\t\treturn this;\n\t}\n}\nTimeseries.prototype.fillNull = fillNull;\n\nfunction zeroFaultDetection(thresholdInterval) {\n\tif (!Array.isArray(thresholdInterval))\n\t\tthresholdInterval = [thresholdInterval, 1];\n\tthresholdInterval = intervalToMS(thresholdInterval);\n\tlet df = this;\n\tlet zeroFaultDates = df\n\t\t.where(row => row.value === 0)\n\t\t.ensureSeries(\n\t\t\t\"interval\",\n\t\t\tdf\n\t\t\t\t.where(row => row.value === 0)\n\t\t\t\t.getSeries(\"date\")\n\t\t\t\t.amountChange()\n\t\t)\n\t\t.where(v => v.interval <= thresholdInterval)\n\t\t.subset([\"date\"])\n\t\t.generateSeries({ value: row => null, flag: row => [\"zeroFault\"] });\n\n\tlet zeroFaultDF = new Timeseries(this.merge(zeroFaultDates));\n\treturn zeroFaultDF;\n}\n\nTimeseries.prototype.zeroFaultDetection = zeroFaultDetection;\n\nfunction dataQuality() {\n\tlet count = this.count();\n\tlet withFlags = this.where(r => Array.isArray(r.flag) && r.flag.length > 0)\n\t\t.groupBy(r => r.flag.toString())\n\t\t.select(group => ({\n\t\t\tflag: group.first().flag,\n\t\t\tcount: group.count(),\n\t\t\tpercent: group.count() / count\n\t\t}))\n\t\t.inflate();\n\tlet good = this.where(\n\t\tr =>\n\t\t\tr.flag === undefined ||\n\t\t\tr.flag === null ||\n\t\t\t(Array.isArray(r.flag) && r.flag.length === 0)\n\t).count();\n\tlet quality = withFlags\n\t\t.appendPair([\n\t\t\twithFlags.count(),\n\t\t\t{ flag: \"clean\", count: good, percent: good / count }\n\t\t])\n\t\t.orderByDescending(row => row.count);\n\treturn quality;\n}\n\nTimeseries.prototype.dataQuality = dataQuality;\n\nfunction monthlyWithQual() {\n\tlet interval = this.getInterval();\n\tlet ms = intervalToMS(interval);\n\tconst duration = \"month\";\n\tlet dateComparison = row =>\n\t\tdayjs(row.date)\n\t\t\t.startOf()\n\t\t\t.valueOf();\n\tlet ts = this.groupBy(dateComparison)\n\t\t.select(group => {\n\t\t\tconst date = dayjs(group.first().date)\n\t\t\t\t.startOf(duration)\n\t\t\t\t.toDate();\n\t\t\tlet fullCount = Math.floor(\n\t\t\t\tdayjs(date)\n\t\t\t\t\t.endOf(\"month\")\n\t\t\t\t\t.diff(dayjs(date), \"millisecond\") / ms\n\t\t\t);\n\t\t\tlet days = new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\n\t\t\tlet count = group\n\t\t\t\t.getSeries(\"value\")\n\t\t\t\t.where(v => v && v !== 0)\n\t\t\t\t.toArray().length;\n\t\t\tlet value = group\n\t\t\t\t.getSeries(\"value\")\n\t\t\t\t.where(v => !isNaN(v))\n\t\t\t\t.sum();\n\t\t\treturn {\n\t\t\t\tdate,\n\t\t\t\tvalue: isNaN(value) ? 0 : value,\n\t\t\t\tcount,\n\t\t\t\tfullCount,\n\t\t\t\tscore: count / fullCount\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => row.date.toDate());\n\treturn new Timeseries(ts);\n}\nTimeseries.prototype.monthlyWithQual = monthlyWithQual;\n\nfunction threeYearAverage(date, series = \"value\", defaultValue) {\n\tdate = dayjs(date);\n\tif (!defaultValue)\n\t\tdefaultValue = this.getSeries(series)\n\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t.average();\n\n\t// let months = df\n\t// \t.before(date.valueOf())\n\t// \t.where(row => dayjs(row.date).month() === date.month())\n\t// \t.where(row => row.score > 0.9)\n\t// \t.tail(3);\n\tlet months = this.before(date.toDate())\n\t\t.where(row => row.date.month() === date.month())\n\t\t.orderBy(row => dayjs(row.date))\n\t\t.tail(3);\n\t// .where(row => row.score > 0.9);\n\tif (months.count() > 0) {\n\t\tlet val = months\n\t\t\t.getSeries(series)\n\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t.average();\n\t\treturn val;\n\t} else {\n\t\treturn defaultValue;\n\t}\n}\nTimeseries.prototype.threeYearAverage = threeYearAverage;\n\nfunction averageFill() {\n\tlet df = this;\n\tlet avg = df\n\t\t// .where(row => row.score ?row.score >= 0.9)\n\t\t.getSeries(\"value\")\n\t\t.where(v => !isNaN(v) && v !== null)\n\t\t.average();\n\tlet monthlyAvg = df\n\t\t.generateSeries({\n\t\t\trollingAverage: row => df.threeYearAverage(row.date, \"value\", avg)\n\t\t})\n\t\t.generateSeries({\n\t\t\tflag: row => (row.value ? row.flag : [\"filled\", ...(row.flag || [])])\n\t\t})\n\t\t.generateSeries({\n\t\t\tvalue: row => (row.value ? row.value : row.rollingAverage)\n\t\t})\n\t\t.dropSeries([\"rollingAverage\"]);\n\treturn new Timeseries(monthlyAvg);\n}\n\nTimeseries.prototype.averageFill = averageFill;\n\n// Static Methods\nfunction blank(startDate, endDate, [duration, value = 1], flag) {\n\tif ([\"minute\", \"hour\", \"day\", \"month\", \"year\"].indexOf(duration) < 0) {\n\t\tconsole.error(interval);\n\t\tthrow new Error(\"interval type not supported\");\n\t}\n\tstartDate = dayjs(startDate);\n\tendDate = dayjs(endDate);\n\tlet dates = [startDate];\n\tlet interval = intervalToMS([duration, value]);\n\twhile (dates[dates.length - 1].valueOf() < endDate.valueOf()) {\n\t\tdates.push(dayjs(dates[dates.length - 1]).add(value, duration));\n\t}\n\tlet df = new Timeseries(dates.map(date => ({ date })));\n\n\tif (flag) {\n\t\tdf = new Timeseries(\n\t\t\tdf.generateSeries({\n\t\t\t\tflag: row => [flag]\n\t\t\t})\n\t\t);\n\t}\n\n\treturn df;\n}\nTimeseries.blank = blank;\nfunction aggregate(dataframes) {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df => new Timeseries(df));\n\tconst valueColumns = new Set(\n\t\tdataframes.map(df => df.getValueColumns()).reduce((a, b) => a.concat(b), [])\n\t);\n\tconst concatenated = dataForge.DataFrame.concat(dataframes)\n\t\t.groupBy(row => row.date)\n\t\t.select(group => {\n\t\t\tconst date = group.first().date;\n\t\t\tlet o = { date };\n\t\t\tvalueColumns.forEach(c => (o[c] = group.deflate(row => row[c]).sum()));\n\t\t\tgroup\n\t\t\t\t.getColumnNames()\n\t\t\t\t.filter(col => col !== \"date\")\n\t\t\t\t.filter(col => valueColumns.has(col) === -1)\n\t\t\t\t.forEach(col => {\n\t\t\t\t\tlet value = group\n\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t.distinct()\n\t\t\t\t\t\t.toArray();\n\t\t\t\t\tif (value.length === 1) value = value[0];\n\t\t\t\t\to[col] = value;\n\t\t\t\t\treturn;\n\t\t\t\t});\n\t\t\treturn o;\n\t\t})\n\t\t.inflate();\n\treturn new Timeseries(concatenated);\n}\n\nTimeseries.aggregate = aggregate;\nTimeseries.concat = dataframes => {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df =>\n\t\tnew Timeseries(df).withIndex(row => row.date.valueOf())\n\t);\n\tlet df = dataForge.DataFrame.concat(dataframes);\n\treturn new Timeseries(df);\n};\nTimeseries.merge = dataframes => {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df =>\n\t\tnew Timeseries(df).withIndex(row => row.date.valueOf())\n\t);\n\tlet df = dataForge.DataFrame.merge(dataframes);\n\treturn new Timeseries(df);\n};\n"],"names":["intervalToMS","unit","value","start","dayjs","add","diff","valueFiller","fillType","startValue","endValue","entryIndex","numEntries","overrideValue","dateFunction","date","flag","indexOf","Error","fromPairs","toPairs","map","key","averageMonthlyMap","df","Map","group","select","month","first","getSeries","where","v","average","toArray","annualMonthlyAverageMap","groupBy","row","year","startOf","ts","Timeseries","downsample","avg","set","monthlyRollingAverageMap","years","series","months","toDate","inflate","withIndex","bake","data","values","rollingWindow","window","last","has","forEach","before","count","fillMonthlyByMap","monthMap","get","fillMonthlyBAnnualyMap","annualMonthlyMap","mean","m","reduce","a","b","concat","pad","annualAverage","subset","after","subtract","r","hour","minute","appendPair","rval","deflate","x","std","sampleStandardDeviation","_mean","ndf","generateSeries","ares","R","DataFrame","Math","abs","max","lambdaTest","n","i","alpha","p","pValue","t","degreeOfFreedom","Studentt","inv","tValue","lambda","sqrt","pow","modz","mad","median","modifiedZScoreTest","_median","medianAbsoluteDeviation","outliers","sort","filter","thresholds","upper","min","Infinity","lower","calculateChange","baseline","options","dataForge","config","others","valueOf","index","considerAllRows","call","this","removeOutliers","outlierCheck","raw","transformSeries","merge","totalRows","colname","baselinePercentChange","baselineDF","dfwb","indexer","interval","getInterval","baselineInterval","isEqual","console","error","indexedBaseline","at","delta","prototype","Object","create","constructor","getValueColumns","detectTypes","Type","distinct","Column","ms","end","getIndex","detectValues","orderBy","Frequency","Value","ceil","getDateRange","adjustment","endOf","cvrsme","actual","simulated","resetIndex","dropSeries","ybar","sum","nmbe","calculateStatistics","column","filterZeros","filterNegative","isNaN","q1","quantile","q3","iqr","calculateThresholdOptions","k","noflags","Array","isArray","length","floor","esd","dataset","newdf","dataframe","trip","pair","assign","push","outlierValues","outlier","takeWhile","iterations","rosnerTest","box","lowerInner","upperInner","lowerOuter","upperOuter","getBestThreshold","thresholdGroups","ckmeans","betweenDates","between","transformAllSeries","adjustmentFunction","exclude","columns","col","reset","withSeries","clean","duration","dateComparison","valueColumns","getColumnNames","downsampleClean","threshold","dataQuality","setIndex","percent","log","format","upsample","fillGaps","durationValue","pairA","pairB","startDate","gapExists","endDate","newEntries","e","gapFill","populate","type","reduceToValue","columnNames","chooseValue","cumulativeSum","s","totalRow","totalColumns","rollingPercentChange","decimal","percentChange","addBaselineDelta","annualIntensity","normalizeValue","scaler","_this","renameSeries","fillMissing","blank","undefined","fillNull","callback","seriesCheck","currentValue","zeroFaultDetection","thresholdInterval","zeroFaultDates","ensureSeries","amountChange","withFlags","toString","good","orderByDescending","monthlyWithQual","fullCount","Date","getFullYear","getMonth","getDate","score","threeYearAverage","defaultValue","tail","averageFill","rollingAverage","dates","aggregate","dataframes","Set","o","c"],"mappings":"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"}
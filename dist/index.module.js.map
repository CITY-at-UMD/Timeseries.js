{"version":3,"file":"index.module.js","sources":["../src/lib/Timeseries.interval.js","../src/lib/Timeseries.fill.js","../src/lib/Timeseries.statistics.js","../src/lib/misc.js","../src/index.js","../src/lib/Timeseries.zero.js"],"sourcesContent":["import dayjs from \"dayjs\";\n\nconst msToInterval = ms => {\n\tlet start = dayjs();\n\tlet end = dayjs().add(ms);\n\tif (end.diff(start, \"month\", true) >= 11) {\n\t\treturn [\"year\", Math.ceil(end.diff(start, \"year\", true))];\n\t} else if (end.diff(start, \"day\", true) >= 28) {\n\t\treturn [\"month\", Math.ceil(end.diff(start, \"month\", true))];\n\t} else if (end.diff(start, \"hour\", true) >= 23) {\n\t\treturn [\"day\", Math.ceil(end.diff(start, \"day\", true))];\n\t} else if (end.diff(start, \"minute\", true) >= 55) {\n\t\treturn [\"hour\", Math.ceil(end.diff(start, \"hour\", true))];\n\t} else {\n\t\treturn [\"minute\", end.diff(start, \"minute\")];\n\t}\n};\nconst intervalToMS = ([unit, value]) => {\n\tlet start = dayjs();\n\tlet end = dayjs().add(value, unit);\n\treturn end.diff(start);\n};\nfunction calculateInterval(df, startDate, endDate) {\n\tif (!startDate) startDate = df.first.date;\n\tif (!endDate) endDate = df.last.date;\n\tfunction computeInterval(window) {\n\t\treturn window.last() - window.first();\n\t}\n\tconst intervals = df\n\t\t.between(startDate, endDate)\n\t\t.getIndex()\n\t\t.window(2)\n\t\t.select(computeInterval)\n\t\t.detectValues()\n\t\t.orderBy(row => row.Frequency);\n\n\tlet val = intervals.last().Value;\n\treturn msToInterval(val);\n}\nexport { msToInterval, intervalToMS, calculateInterval };\n","import dayjs from \"dayjs\";\nimport fromPairs from \"lodash/fromPairs\";\nimport toPairs from \"lodash/toPairs\";\nconst gapExists = ([duration, durationValue = 1]) => (pairA, pairB) => {\n\tconst startDate = pairA[0];\n\tconst endDate = pairB[0];\n\tlet gapSize = Math.floor(\n\t\tdayjs(endDate).diff(startDate, duration, true) / durationValue\n\t);\n\n\tif (gapSize > 0) return true;\n\treturn false;\n};\nconst gapExists_old = (interval, maxGap) => (pairA, pairB) => {\n\tconst startDate = pairA[0];\n\tconst endDate = pairB[0];\n\tlet gapSize;\n\tif (interval === \"quarterHour\") {\n\t\tgapSize = Math.floor(dayjs(endDate).diff(startDate, \"minutes\") / 15);\n\t} else {\n\t\tgapSize = dayjs(endDate).diff(startDate, interval);\n\t}\n\tif (maxGap && maxGap > gapSize) return false;\n\tif (gapSize > 0) return true;\n\treturn false;\n};\n\nconst gapFillNull = ([duration, durationValue], flag) => (pairA, pairB) => {\n\tconst startDate = pairA[0];\n\tconst endDate = pairB[0];\n\tlet gapSize = Math.floor(\n\t\tdayjs(endDate).diff(startDate, duration) / durationValue\n\t);\n\tconst numEntries = gapSize - 1;\n\tconst newEntries = [];\n\n\tfor (let entryIndex = 0; entryIndex < numEntries; ++entryIndex) {\n\t\tlet date = dayjs(startDate).add((entryIndex + 1) * durationValue, duration);\n\t\tnewEntries.push([\n\t\t\tdate.valueOf(),\n\t\t\t{ date, value: undefined, ...(flag && { flag: [flag] }) }\n\t\t]);\n\t}\n\treturn newEntries;\n};\nconst gapFillBlank = gapFillNull;\n\nconst valueFiller = (\n\tfillType,\n\t{ startValue, endValue, entryIndex, numEntries },\n\t{ overrideValue, dateFunction, date, flag }\n) => {\n\tif (\n\t\t[\"pad\", \"interpolate\", \"average\", \"dateFunction\", \"value\"].indexOf(\n\t\t\tfillType\n\t\t) === -1\n\t) {\n\t\tthrow new Error(\"fill Type not supported\");\n\t}\n\tlet value;\n\tif (fillType === \"pad\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\treturn [key, startValue[key]];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", \"pad\"];\n\t} else if (fillType === \"interpolate\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv =\n\t\t\t\t\tstartValue[key] +\n\t\t\t\t\t(entryIndex + 1) *\n\t\t\t\t\t\t((endValue[key] - startValue[key]) / (numEntries + 1));\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"average\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv = (startValue[key] + endValue[key]) / numEntries;\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"dateFunction\" && dateFunction) {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv = dateFunction(date);\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"value\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv;\n\t\t\t\tif (typeof overrideValue === \"number\") {\n\t\t\t\t\tnv = overrideValue;\n\t\t\t\t} else {\n\t\t\t\t\tnv = overrideValue[key];\n\t\t\t\t}\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\treturn [key, null];\n\t\t\t})\n\t\t);\n\t\tflag = [\"fill\"];\n\t}\n\treturn { ...value, flag };\n};\n\nconst gapFill = (\n\tfillType,\n\t[duration, durationValue],\n\t{ overrideValue, dateFunction, flag } = {}\n) => (pairA, pairB) => {\n\t// Fill values forward.\n\n\tconst startDate = dayjs(pairA[0]);\n\tconst endDate = dayjs(pairB[0]);\n\tlet gapSize = Math.floor(\n\t\tdayjs(endDate).diff(startDate, duration) / durationValue\n\t);\n\tconst numEntries = gapSize - 1;\n\tconst startValue = pairA[1];\n\tconst endValue = pairB[1];\n\tconst newEntries = [];\n\tfor (let entryIndex = 0; entryIndex < numEntries; ++entryIndex) {\n\t\tlet adjustment = valueFiller(\n\t\t\t\tfillType,\n\t\t\t\t{ startValue, endValue, entryIndex, numEntries },\n\t\t\t\t{\n\t\t\t\t\toverrideValue,\n\t\t\t\t\tdateFunction,\n\t\t\t\t\tflag\n\t\t\t\t}\n\t\t\t),\n\t\t\tdate = dayjs(startDate)\n\t\t\t\t.add((entryIndex + 1) * durationValue, duration)\n\t\t\t\t.toDate();\n\t\tlet e = [date.valueOf(), Object.assign({}, adjustment, { date })];\n\t\tnewEntries.push(e);\n\t}\n\n\treturn newEntries;\n};\n\nexport { gapExists, gapFill, gapFillBlank, gapFillNull, valueFiller };\n","// Source: https://www.itl.nist.gov/div898/handbook/eda/section3/eda35h3.htm\n// https://vsp.pnnl.gov/help/Vsample/Rosners_Outlier_Test.htm\n// https://www.itl.nist.gov/div898/handbook/prc/section1/prc16.htm\n// https://www.math.ucla.edu/~tom/distributions/KolSmir2.html?\nimport { DataFrame } from \"data-forge\";\nimport {\n  sampleStandardDeviation,\n  mean as _mean,\n  max,\n  median as _median,\n  medianAbsoluteDeviation,\n  quantile\n} from \"simple-statistics\";\nimport { Studentt } from \"distributions\";\nimport dayjs from \"dayjs\";\n\nfunction rval(df) {\n  let values = df.deflate(row => row.x).toArray();\n  let std = sampleStandardDeviation(values);\n  let mean = _mean(values);\n  if (std === 0) {\n    let ndf = df.generateSeries({ ares: row => 0 });\n    return { R: 0, std, mean, df: ndf };\n  }\n  let ndf = new DataFrame({\n    values: values.map(x => ({\n      x,\n      ares: Math.abs(x - mean) / std\n    }))\n  });\n  let R = max(ndf.deflate(row => row.ares).toArray());\n  return { R, df: ndf, std, mean };\n}\n\nfunction pValue(n, i, alpha) {\n  let p = 1 - alpha / (2 * (n - i + 1));\n  return p;\n}\nfunction tValue(p, degreeOfFreedom) {\n  let qt = new Studentt(degreeOfFreedom);\n  let t = qt.inv(p);\n  return t;\n}\n//\nfunction lambdaTest(n, i, alpha) {\n  let p = pValue(n, i, alpha);\n  let df = n - i - 1;\n  let t = tValue(p, df);\n  let lambda =\n    (t * (n - i)) /\n    Math.sqrt((n - i - 1 + Math.pow(t, 2)) * (n - i + 1));\n  return { lambda, p, t };\n}\nfunction rosnerTest(dataset = [], k = 10, alpha = 0.05) {\n  let dataframe = new DataFrame({\n    values: dataset.map(x => ({ x }))\n  });\n  let n = dataframe.getSeries(\"x\").count();\n  let newdf;\n  let i = 1;\n  let outliers = [];\n  let trip = false;\n  while (i <= k) {\n    let pair = {};\n    let s = Date.now();\n    if (i === 1) {\n      let { R, df, mean, std } = rval(dataframe);\n      newdf = df.where(row => row.ares !== R);\n      pair = Object.assign({}, pair, {\n        mean,\n        std,\n        Value: df\n          .where(row => row.ares === R)\n          .getSeries(\"x\")\n          .first(),\n        R\n      });\n    } else {\n      let { R, df, mean, std } = rval(newdf);\n      newdf = df.where(row => row.ares !== R);\n      pair = Object.assign({}, pair, {\n        mean,\n        std,\n        Value: df\n          .where(row => row.ares === R)\n          .getSeries(\"x\")\n          .first(),\n        R\n      });\n    }\n    let { lambda, p, t } = lambdaTest(n, i, alpha);\n    pair = Object.assign({}, pair, { lambda });\n    outliers.push(pair);\n    if (trip && pair.R > pair.lambda) trip = false;\n    if (pair.R === 0) break;\n    if (pair.R < pair.lambda) {\n      if (trip) {\n        break;\n      } else {\n        trip = true;\n      }\n    }\n    i++;\n  }\n  outliers = new DataFrame(outliers)\n    .generateSeries({\n      outlier: row => row.R > row.lambda\n    })\n    .takeWhile(row => row.outlier);\n  let outlierValues = outliers\n    .where(row => row.Value > 0)\n    .deflate(row => row.Value);\n  let thresholds = {\n    lower: 0,\n    upper:\n      outlierValues.count() > 0 ? outlierValues.min() : Infinity\n  };\n  return {\n    outliers,\n    thresholds,\n    iterations: i\n  };\n}\nconst modz = (value, mad, median) => {\n  return (0.6745 * (value - median)) / mad;\n};\nfunction modifiedZScoreTest(values) {\n  let median = _median(values);\n  let mad = medianAbsoluteDeviation(values);\n  values = values\n    .sort((a, b) => b - a)\n    .filter(v => v > 0)\n    .map(v => [v, modz(v, mad, median)]);\n  let outliers = values.filter(\n    ([v, modz]) => Math.abs(modz) >= 3.5\n  );\n  let upper = Math.min(\n    ...[Infinity, ...outliers.map(v => v[0])]\n  );\n  // let score,\n  // \tvalue,\n  // \tthreshold = Infinity,\n  // \tindex = 0;\n  // do {\n  // \tvalue = values[index];\n  // \tscore = modz(value, mad, median);\n  // \tif (Math.abs(score) >= 3.5) threshold = value;\n  // } while (score >= 3.5);\n  return { thresholds: { upper, lower: 0 } };\n}\nfunction boxPlotTest(values) {\n  let q1 = quantile(values, 0.25);\n  let q3 = quantile(values, 0.75);\n  let iqr = q3 - q1;\n  return {\n    thresholds: {\n      lowerInner: q1 - 1.5 * iqr,\n      upperInner: q1 - 3 * iqr,\n      lowerOuter: q3 + 1.5 * iqr,\n      upperOuter: q3 + 3 * iqr\n    }\n  };\n}\nfunction calculateOutlierThresholds(\n  df,\n  { k, filterZeros = true } = {}\n) {\n  let values = df\n    .where(\n      row =>\n        row.flag === null ||\n        row.flag === undefined ||\n        Array.isArray(row.flag)\n    )\n    .where(row => !isNaN(row.value) && row.value !== null)\n    .getSeries(\"value\")\n    .bake();\n  if (filterZeros) values = values.where(value => value > 0);\n  if (!k) {\n    k =\n      values.count() < 1000\n        ? Math.floor(values.count() * 0.15)\n        : Math.min(...[1000, Math.floor(values.count() * 0.02)]);\n  }\n  if (values.count < 5) return {};\n  let { outliers, threshold } = rosnerTest(values.toArray(), k);\n  return { outliers, threshold };\n}\n\nfunction zeroCheck(df, threshold = 2) {\n  let zeroGroups = df\n    .variableWindow((a, b) => {\n      return a.value === b.value && a.value === 0;\n    })\n    .where(window => window.getIndex().count() >= threshold);\n  let zeroSummary = zeroGroups\n    .select(window => ({\n      start: window.first().date,\n      end: window.last().date,\n      count: window.count()\n    }))\n    .inflate(); // Series -> dataframe.\n  // .toArray()\n  return { zeroSummary, zeroGroups };\n}\n\nfunction zeroReplacement(df, threshold) {\n  let { zeroGroups } = zeroCheck(df, threshold);\n  zeroGroups.forEach(dff => {\n    dff = dff.transformSeries({\n      value: value => null,\n      flag: value => [\"zero\"]\n    });\n    df = DataFrame.merge([df, dff]);\n  });\n  return df;\n}\nfunction isOutlier(value, { lower, upper }) {\n  if (value < lower || value >= upper) {\n    return true;\n  }\n  return false;\n}\nfunction validMean(df) {\n  let values = df\n    .getSeries(\"value\")\n    .where(value => typeof value === \"number\");\n  return values.average();\n}\nfunction validMonthlyMeanMap(df) {\n  let dateComparison = row =>\n    dayjs(row.date)\n      .startOf(\"month\")\n      .month();\n\n  df = df\n    .where(row => typeof row.value === \"number\")\n    .groupBy(dateComparison)\n    .select(group => ({\n      month: new Date(group.first().date).getMonth(),\n      value: group.deflate(row => row.value).average()\n    }));\n  return new Map(\n    df.toArray().map(({ month, value }) => [month, value])\n  );\n}\n\nfunction quality(df) {\n  let count = df.getIndex().count();\n  let valid = df\n    .getSeries(\"flag\")\n    .where(\n      value =>\n        value === null ||\n        (Array.isArray(value) && value.length === 0)\n    )\n    .count();\n  let missing = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"missing\") !== -1)\n    .count();\n  let dirty = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"clean\") !== -1)\n    .count();\n  let zerod = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"zero\") !== -1)\n    .count();\n  let breakdown = {\n    valid: valid / count,\n    missing: missing / count,\n    invalid: (dirty + zerod) / count\n  };\n  let report = {\n    accuracy: (1 - dirty / count) * 4,\n    completeness: 4 * breakdown.valid,\n    consistency: 4 * ((count - missing - zerod) / count)\n  };\n  return { breakdown, report, count };\n}\n\nexport {\n  rosnerTest,\n  modifiedZScoreTest,\n  boxPlotTest,\n  calculateOutlierThresholds,\n  zeroReplacement,\n  isOutlier,\n  validMean,\n  validMonthlyMeanMap,\n  quality\n};\n","import dayjs from \"dayjs\";\nexport const annualScale = (start, end) =>\n\t365 / dayjs(end).diff(dayjs(start), \"day\");\nexport const calculateChange = (baseline, value) =>\n\t(value - baseline) / baseline;\n","import dayjs from \"dayjs\";\nimport dataForge from \"data-forge\";\nimport { msToInterval, intervalToMS } from \"./lib/Timeseries.interval\";\nimport isEqual from \"lodash/isEqual\";\nimport has from \"lodash/has\";\nimport fromPairs from \"lodash/fromPairs\";\nimport { gapExists, gapFill, gapFillBlank } from \"./lib/Timeseries.fill\";\nimport { medianAbsoluteDeviation, quantile } from \"simple-statistics\";\nimport {\n\trosnerTest,\n\tboxPlotTest,\n\tmodifiedZScoreTest\n} from \"./lib/Timeseries.statistics\";\nimport { annualScale, calculateChange } from \"./lib/misc\";\nimport { zeroCheck } from \"./lib/Timeseries.zero\";\nimport { timingSafeEqual } from \"crypto\";\n\nexport default Timeseries;\n\nfunction Timeseries(data, options = {}) {\n\tconst { msIndex } = options;\n\tif (data instanceof Timeseries) {\n\t\treturn data;\n\t}\n\tif (data instanceof dataForge.DataFrame) {\n\t\tdata = data.toArray();\n\t}\n\n\tdata = data\n\t\t.map(({ date, ...others }) => ({ date: dayjs(date), ...others }))\n\t\t.sort((a, b) => a.date.valueOf() - b.date.valueOf());\n\tlet config = {\n\t\t// columns: ['date', 'value', 'raw', 'flag'],\n\t\tvalues: data,\n\t\tindex: data.map(({ date }) => date.toDate()),\n\t\tconsiderAllRows: true\n\t};\n\tdataForge.DataFrame.call(this, config);\n}\n\nTimeseries.prototype = Object.create(dataForge.DataFrame.prototype);\nTimeseries.prototype.constructor = Timeseries;\n\n// Getters\nfunction getValueColumns() {\n\treturn this.detectTypes()\n\t\t.where(row => row.Type === \"number\")\n\t\t.distinct(row => row.Column)\n\t\t.getSeries(\"Column\")\n\t\t.toArray();\n}\nfunction interval() {\n\tconst computeInterval = window => window.last() - window.first();\n\tconst intervals = this.getIndex()\n\t\t.window(2)\n\t\t.select(computeInterval)\n\t\t.detectValues()\n\t\t.orderBy(row => -row.Frequency);\n\t// .orderBy(row => row.Value);\n\n\tlet val = intervals.first().Value;\n\n\treturn msToInterval(val);\n}\n\nfunction dateRange(unit, adjustment) {\n\tlet start = dayjs(this.first().date),\n\t\tend = dayjs(this.last().date);\n\tif (adjustment) {\n\t\tstart = start.startOf(adjustment);\n\t\tend = end.endOf(adjustment);\n\t}\n\treturn end.diff(start, unit);\n}\nTimeseries.prototype.getValueColumns = getValueColumns;\nTimeseries.prototype.getInterval = interval;\nTimeseries.prototype.getDateRange = dateRange;\n\n// Methods\nfunction calculateThresholdOptions({\n\tk,\n\tfilterZeros = true,\n\tfilterNegative = true\n} = {}) {\n\tlet noflags = this.where(\n\t\trow =>\n\t\t\trow.flag === null ||\n\t\t\trow.flag === undefined ||\n\t\t\t(Array.isArray(row.flag) && row.flag.length === 0)\n\t)\n\t\t.where(row => !isNaN(row.value) && row.value !== null)\n\t\t.getSeries(\"value\");\n\tif (filterZeros) noflags = noflags.where(value => value !== 0);\n\tif (filterNegative) noflags = noflags.where(value => value > 0);\n\tif (!k) {\n\t\tk =\n\t\t\tnoflags.count() < 1000\n\t\t\t\t? Math.floor(noflags.count() * 0.15)\n\t\t\t\t: Math.min(...[1000, Math.floor(noflags.count() * 0.02)]);\n\t}\n\tif (noflags.count() < 5) return {};\n\tlet { thresholds: esd } = rosnerTest(noflags.toArray(), k);\n\tlet { thresholds: box } = boxPlotTest(noflags.toArray());\n\tlet { thresholds: modz } = modifiedZScoreTest(noflags.toArray());\n\treturn { esd, box, modz };\n}\nfunction calculateStatistics(options = {}) {\n\tconst {\n\t\tcolumn = \"value\",\n\t\tfilterZeros = false,\n\t\tfilterNegative = true\n\t} = options;\n\tlet series = this.deflate(row => row[column]).where(value => !isNaN(value));\n\tif (filterNegative) series = series.where(value => value >= 0);\n\tif (filterZeros) series = series.where(value => value !== 0);\n\tlet median = series.median();\n\tlet mean = series.average();\n\tlet count = series.count();\n\tlet std = series.std();\n\tlet min = series.min();\n\tlet max = series.max();\n\tlet mad = medianAbsoluteDeviation(series.toArray());\n\tlet q1 = quantile(series.toArray(), 0.25);\n\tlet q3 = quantile(series.toArray(), 0.75);\n\tlet iqr = q3 - q1;\n\tlet stats = {\n\t\tmedian,\n\t\tmean,\n\t\tcount,\n\t\tstd,\n\t\tmin,\n\t\tmax,\n\t\tmad,\n\t\tq1,\n\t\tq3,\n\t\tiqr\n\t};\n\treturn stats;\n}\n\nTimeseries.prototype.calculateStatistics = calculateStatistics;\nTimeseries.prototype.calculateThresholdOptions = calculateThresholdOptions;\n\n// Chainable Methods\nfunction transformAllSeries(adjustmentFunction, { exclude }) {\n\tlet df = this;\n\tlet columns = (columns = df\n\t\t.detectTypes()\n\t\t.where(row => row.Type === \"number\")\n\t\t.distinct(row => row.Column)\n\t\t.getSeries(\"Column\")\n\t\t.toArray());\n\tif (exclude && Array.isArray(exclude)) {\n\t\tcolumns = columns.filter(col => exclude.indexOf(col) === -1);\n\t}\n\tcolumns.forEach(col => {\n\t\tdf = df.transformSeries({\n\t\t\t[col]: value => {\n\t\t\t\tif (isNaN(value)) {\n\t\t\t\t\treturn value;\n\t\t\t\t} else {\n\t\t\t\t\treturn adjustmentFunction(value);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\treturn df;\n}\n\nTimeseries.prototype.transformAllSeries = transformAllSeries;\n\nfunction reset() {\n\tlet df = this.withSeries({\n\t\tvalue: row =>\n\t\t\trow.flag && Array.isArray(row.flag) && row.flag.length > 0\n\t\t\t\t? row.raw\n\t\t\t\t: row.value\n\t})\n\t\t.subset([\"date\", \"value\"])\n\t\t.where(row => !isNaN(row.value) && row.value !== null);\n\treturn new Timeseries(df);\n}\nTimeseries.prototype.reset = reset;\n\nfunction group(interval, toArray) {\n\tif ([\"hour\", \"day\", \"month\", \"year\"].indexOf(interval) === -1)\n\t\tthrow new Error(\"interval type not supported\");\n\tlet dateComparison = row => dayjs(row.date).startOf(interval);\n\tlet groups = this.groupBy(dateComparison);\n\treturn groups;\n}\n\nTimeseries.prototype.group = group;\n\nfunction removeOutliers({\n\tcolumn = \"value\",\n\tlowerThreshold,\n\tupperThreshold\n} = {}) {\n\tif (lowerThreshold > upperThreshold) throw new Error(\"thresholds invalid\");\n\tlet outlierCheck = (value, lowerThreshold, upperThreshold) =>\n\t\tvalue < lowerThreshold || value > upperThreshold;\n\n\tlet outliers = this.where(row =>\n\t\toutlierCheck(row[column], lowerThreshold, upperThreshold)\n\t)\n\t\t.generateSeries({\n\t\t\traw: row => row[column],\n\t\t\tflag: ({ flag = [] }) => [\"outlier\", ...flag]\n\t\t})\n\t\t.transformSeries({\n\t\t\t[column]: row => null\n\t\t});\n\t// let df = this.withSeries(\"raw\", outliers.getSeries(\"raw\")).withSeries(\n\t// \t\"flag\",\n\t// \toutliers.getSeries(\"flag\")\n\t// );\n\n\tlet merged = this.merge(outliers);\n\treturn new Timeseries(merged.toArray());\n}\n\nTimeseries.prototype.removeOutliers = removeOutliers;\nTimeseries.prototype.clean = removeOutliers;\n\nfunction downsample([duration, value], fillType = \"sum\") {\n\tif ([\"hour\", \"day\", \"month\", \"year\"].indexOf(duration) === -1)\n\t\tthrow new Error(\"interval type not supported\");\n\tif ([\"sum\", \"avg\", \"median\"].indexOf(fillType) === -1) {\n\t\tthrow new Error(\"aggregation type not suppported, only:\");\n\t}\n\tlet dateComparison = row => row.date.startOf(duration);\n\tlet valueColumns = this.getValueColumns();\n\tif (value) {\n\t\tdateComparison = row => row.date.startOf(duration).add(value, duration);\n\t}\n\tlet df = this.groupBy(dateComparison)\n\t\t.select(group => {\n\t\t\tconst date = group.first().date.startOf(duration);\n\t\t\treturn {\n\t\t\t\tdate,\n\t\t\t\t...fromPairs([\n\t\t\t\t\t...valueColumns.map(col => {\n\t\t\t\t\t\tlet value;\n\t\t\t\t\t\tswitch (fillType) {\n\t\t\t\t\t\t\tcase \"median\":\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.median();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"avg\":\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.average();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t// sum\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.sum();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn [col, value];\n\t\t\t\t\t}),\n\t\t\t\t\t...group\n\t\t\t\t\t\t.getColumnNames()\n\t\t\t\t\t\t.filter(col => col !== \"date\")\n\t\t\t\t\t\t.filter(col => valueColumns.indexOf(col) === -1)\n\t\t\t\t\t\t.map(col => {\n\t\t\t\t\t\t\tlet value = group\n\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t.distinct()\n\t\t\t\t\t\t\t\t.toArray();\n\t\t\t\t\t\t\tif (value.length === 1) value = value[0];\n\t\t\t\t\t\t\treturn [col, value];\n\t\t\t\t\t\t})\n\t\t\t\t])\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => dayjs(row.date).toDate());\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.downsample = downsample;\n\nfunction upsample([duration, value], fillType = \"avg\") {\n\t// Dont use this b/c it has the raw and flag values\n\tlet df = this.fillGaps(\n\t\tgapExists([duration, value]),\n\t\tgapFill(fillType, [duration, value])\n\t);\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.upsample = upsample;\n\nfunction populate(value, type = \"avg\") {\n\tlet v;\n\tswitch (type) {\n\t\tcase \"fill\":\n\t\t\tv = value;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tv = value / this.count();\n\t\t\tbreak;\n\t}\n\tlet df = this.generateSeries({ value: row => v });\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.populate = populate;\n\nfunction reduceToValue(columnNames) {\n\tfunction chooseValue(row, columnNames = []) {\n\t\tlet values = columnNames.map(n => row[n]).filter(v => v);\n\t\treturn values[0] || 0;\n\t}\n\tlet df = this.generateSeries({\n\t\tvalue: row => chooseValue(row, columnNames)\n\t}).subset([\"date\", \"value\"]);\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.reduceToValue = reduceToValue;\n\n// Baseline Functions\n\nfunction rollingPercentChange(col = \"value\") {\n\tlet df = this;\n\tlet delta = new Timeseries(\n\t\tdf\n\t\t\t.subset([\"date\", col])\n\t\t\t.rollingWindow(2)\n\t\t\t.select(window => {\n\t\t\t\tconst amountChange = window.last()[col] - window.first()[col]; // Compute amount of change.\n\t\t\t\tconst pctChange = amountChange / window.first()[col]; // Compute % change.\n\t\t\t\treturn { date: window.last().date, delta: pctChange };\n\t\t\t})\n\t\t\t.inflate()\n\t);\n\tlet withDelta = Timeseries.merge([df, delta]);\n\treturn new Timeseries(withDelta);\n}\n\nTimeseries.prototype.rollingPercentChange = rollingPercentChange;\nfunction baselinePercentChange(baselineDF) {\n\t// Only Change in Year\n\tif (!(baselineDF instanceof Timeseries))\n\t\tbaselineDF = new Timeseries(baselineDF);\n\tlet dfwb;\n\tif (baselineDF.count() > 1) {\n\t\tlet interval = this.getInterval();\n\t\tlet baselineInterval = baselineDF.interval;\n\t\tif (!isEqual(interval, baselineInterval)) {\n\t\t\tconsole.error(interval, baselineInterval);\n\t\t\tthrow new Error(\"baseline and data intervals do not match\");\n\t\t}\n\t\tlet indexer;\n\t\tswitch (interval[0]) {\n\t\t\tcase \"day\":\n\t\t\t\tindexer = date => `${date.month()}-${date.date()}`;\n\t\t\t\tbreak;\n\t\t\tcase \"month\":\n\t\t\t\tindexer = date => date.month();\n\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tindexer = date => 0;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tlet indexedBaseline = baselineDF.withIndex(row => indexer(row.date));\n\t\tlet getBaselineValue = index => {\n\t\t\tlet at = indexedBaseline.at(index);\n\t\t\tif (at && has(at, \"value\")) {\n\t\t\t\treturn at.value;\n\t\t\t} else {\n\t\t\t\treturn indexedBaseline.getSeries(\"value\").average();\n\t\t\t}\n\t\t};\n\t\tdfwb = this.generateSeries({\n\t\t\tbaseline: row => getBaselineValue(indexer(row.date))\n\t\t});\n\t} else {\n\t\tdfwb = this.generateSeries({\n\t\t\tbaseline: row => baselineDF.first().value\n\t\t});\n\t}\n\tdfwb = dfwb.generateSeries({\n\t\tdelta: row => calculateChange(row.baseline, row.value)\n\t});\n\treturn new Timeseries(dfwb);\n}\n\nTimeseries.prototype.baselinePercentChange = baselinePercentChange;\nTimeseries.prototype.addBaselineDelta = baselinePercentChange;\n\nfunction annualIntensity(normalizeValue = 1) {\n\tlet interval = this.getInterval();\n\tlet annual = this.groupBy(row => row.date.year())\n\t\t.select(group => {\n\t\t\tlet startDate = group.first().date;\n\t\t\tlet endDate = group\n\t\t\t\t.last()\n\t\t\t\t.date.add(interval[1] || 1, interval[0] || \"month\");\n\t\t\tlet scaler = annualScale(startDate, endDate);\n\t\t\treturn {\n\t\t\t\tstartDate,\n\t\t\t\tendDate,\n\t\t\t\t...fromPairs(\n\t\t\t\t\tthis.getValueColumns().map(col => [\n\t\t\t\t\t\tcol,\n\t\t\t\t\t\t(group\n\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t.where(v => v)\n\t\t\t\t\t\t\t.sum() *\n\t\t\t\t\t\t\tscaler) /\n\t\t\t\t\t\t\tnormalizeValue\n\t\t\t\t\t])\n\t\t\t\t)\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.renameSeries({ startDate: \"date\" })\n\t\t.dropSeries(\"endDate\");\n\treturn new Timeseries(annual);\n}\n\nTimeseries.prototype.annualIntensity = annualIntensity;\n\n// Fill Functions\n\nfunction fillMissing() {\n\tlet startDate = this.first().date.toDate(),\n\t\tendDate = this.last().date.toDate();\n\tlet interval = this.getInterval();\n\tlet bdf = Timeseries.blank(startDate, endDate, interval, \"missing\").withIndex(\n\t\trow => row.date.valueOf()\n\t);\n\tlet m = this.withIndex(row => row.date.valueOf()).merge(bdf);\n\tm = m.transformSeries({\n\t\tflag: row => (row.value ? undefined : row.flag)\n\t});\n\tm = new Timeseries(m);\n\treturn m;\n}\nTimeseries.prototype.fillMissing = fillMissing;\nfunction fillNull(v) {\n\tlet df = this.transformSeries({\n\t\tvalue: value => (value === null || value === undefined ? v : value)\n\t});\n\treturn new Timeseries(df);\n}\nTimeseries.prototype.fillNull = fillNull;\n\nfunction zeroReplacement(threshold) {\n\tlet df = this;\n\tlet { zeroGroups } = zeroCheck(df, threshold);\n\tlet dfs = zeroGroups.toArray().map((zdf, i) => {\n\t\tzdf = zdf\n\t\t\t.transformSeries({\n\t\t\t\tvalue: () => null,\n\t\t\t\traw: () => 0,\n\t\t\t\tflag: value => [\"zero\", ...(value || [])]\n\t\t\t})\n\t\t\t.withIndex(row => new Date(row.date).valueOf());\n\t\treturn zdf;\n\t});\n\tlet merged = df.withIndex(row => row.date.valueOf()).merge(...dfs);\n\treturn new Timeseries(merged);\n}\nTimeseries.prototype.zeroReplacement = zeroReplacement;\n\nfunction monthlyWithQual() {\n\tlet interval = this.getInterval();\n\tlet ms = intervalToMS(interval);\n\tconst duration = \"month\";\n\tlet dateComparison = row =>\n\t\tdayjs(row.date)\n\t\t\t.startOf()\n\t\t\t.valueOf();\n\tlet ts = this.groupBy(dateComparison)\n\t\t.select(group => {\n\t\t\tconst date = dayjs(group.first().date)\n\t\t\t\t.startOf(duration)\n\t\t\t\t.toDate();\n\t\t\tlet fullCount = Math.floor(\n\t\t\t\tdayjs(date)\n\t\t\t\t\t.endOf(\"month\")\n\t\t\t\t\t.diff(dayjs(date), \"millisecond\") / ms\n\t\t\t);\n\t\t\tlet days = new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\n\t\t\tlet count = group\n\t\t\t\t.getSeries(\"value\")\n\t\t\t\t.where(v => v && v !== 0)\n\t\t\t\t.toArray().length;\n\t\t\tlet value = group\n\t\t\t\t.getSeries(\"value\")\n\t\t\t\t.where(v => !isNaN(v))\n\t\t\t\t.sum();\n\t\t\treturn {\n\t\t\t\tdate,\n\t\t\t\tvalue: isNaN(value) ? 0 : value,\n\t\t\t\tcount,\n\t\t\t\tfullCount,\n\t\t\t\tscore: count / fullCount\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => row.date.toDate());\n\treturn new Timeseries(ts);\n}\nTimeseries.prototype.monthlyWithQual = monthlyWithQual;\n\nfunction threeYearAverage(date, column = \"value\", defaultValue) {\n\tdate = dayjs(date);\n\tif (!defaultValue)\n\t\tdefaultValue = this.getSeries(\"value\")\n\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t.average();\n\n\t// let months = df\n\t// \t.before(date.valueOf())\n\t// \t.where(row => dayjs(row.date).month() === date.month())\n\t// \t.where(row => row.score > 0.9)\n\t// \t.tail(3);\n\tlet months = this.before(date.toDate())\n\t\t.where(row => row.date.month() === date.month())\n\t\t.orderBy(row => dayjs(row.date))\n\t\t.tail(3);\n\t// .where(row => row.score > 0.9);\n\tif (months.count() > 0) {\n\t\tlet val = months\n\t\t\t.getSeries(column)\n\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t.average();\n\t\treturn val;\n\t} else {\n\t\treturn defaultValue;\n\t}\n}\nTimeseries.prototype.threeYearAverage = threeYearAverage;\n\nfunction averageFill() {\n\tlet df = this;\n\tlet avg = df\n\t\t// .where(row => row.score ?row.score >= 0.9)\n\t\t.getSeries(\"value\")\n\t\t.where(v => !isNaN(v) && v !== null)\n\t\t.average();\n\tlet monthlyAvg = df\n\t\t.generateSeries({\n\t\t\trollingAverage: row => df.threeYearAverage(row.date, \"value\", avg)\n\t\t})\n\t\t.generateSeries({\n\t\t\tflag: row => (row.value ? row.flag : [\"filled\", ...(row.flag || [])])\n\t\t})\n\t\t.generateSeries({\n\t\t\tvalue: row => (row.value ? row.value : row.rollingAverage)\n\t\t})\n\t\t.dropSeries([\"rollingAverage\"]);\n\treturn new Timeseries(monthlyAvg);\n}\n\nTimeseries.prototype.averageFill = averageFill;\n\n// Static Methods\nfunction blank(startDate, endDate, [duration, value = 1], flag) {\n\tif ([\"minute\", \"hour\", \"day\", \"month\", \"year\"].indexOf(duration) < 0) {\n\t\tconsole.error(interval);\n\t\tthrow new Error(\"interval type not supported\");\n\t}\n\tstartDate = dayjs(startDate);\n\tendDate = dayjs(endDate);\n\tlet dates = [startDate];\n\tlet interval = intervalToMS([duration, value]);\n\twhile (dates[dates.length - 1].valueOf() < endDate.valueOf()) {\n\t\tdates.push(dayjs(dates[dates.length - 1]).add(value, duration));\n\t}\n\tlet df = new Timeseries(dates.map(date => ({ date, ...(flag && { flag }) })));\n\t// if (flag) {\n\t// \tdf = df.generateSeries({\n\t// \t\tflag: row => [flag]\n\t// \t});\n\t// \tdf = new Timeseries(df);\n\t// }\n\treturn df;\n}\nTimeseries.blank = blank;\nfunction aggregate(dataframes) {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df => new Timeseries(df));\n\tconst valueColumns = new Set(\n\t\tdataframes.map(df => df.getValueColumns()).reduce((a, b) => a.concat(b), [])\n\t);\n\tconst concatenated = dataForge.DataFrame.concat(dataframes)\n\t\t.groupBy(row => row.date)\n\t\t.select(group => {\n\t\t\tconst date = group.first().date;\n\t\t\tlet o = { date };\n\t\t\tvalueColumns.forEach(c => (o[c] = group.deflate(row => row[c]).sum()));\n\t\t\tgroup\n\t\t\t\t.getColumnNames()\n\t\t\t\t.filter(col => col !== \"date\")\n\t\t\t\t.filter(col => valueColumns.has(col) === -1)\n\t\t\t\t.forEach(col => {\n\t\t\t\t\tlet value = group\n\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t.distinct()\n\t\t\t\t\t\t.toArray();\n\t\t\t\t\tif (value.length === 1) value = value[0];\n\t\t\t\t\to[col] = value;\n\t\t\t\t\treturn;\n\t\t\t\t});\n\t\t\treturn o;\n\t\t})\n\t\t.inflate();\n\t// .toArray();\n\n\treturn new Timeseries(concatenated);\n}\nTimeseries.aggregate = aggregate;\nTimeseries.concat = dataframes => {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df =>\n\t\tnew Timeseries(df).withIndex(row => row.date.valueOf())\n\t);\n\tlet df = dataForge.DataFrame.concat(dataframes);\n\treturn new Timeseries(df);\n};\nTimeseries.merge = dataframes => {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df =>\n\t\tnew Timeseries(df).withIndex(row => row.date.valueOf())\n\t);\n\tlet df = dataForge.DataFrame.merge(dataframes);\n\treturn new Timeseries(df);\n};\n","import { DataFrame } from \"data-forge\";\n\nconst zerogrouping = dataframe => {\n  // group sequential\n  let df = dataframe.variableWindow(\n    (a, b) => a.value === b.value\n  );\n};\n\nfunction zeroCheck(df, threshold = 2) {\n  let zeroGroups = df\n    .variableWindow((a, b) => {\n      return a.value === b.value && a.value === 0;\n    })\n    .where(window => window.getIndex().count() >= threshold);\n  let zeroSummary = zeroGroups\n    .select(window => ({\n      start: window.first().date,\n      end: window.last().date,\n      count: window.count()\n    }))\n    .inflate(); // Series -> dataframe.\n  // .toArray()\n  return { zeroSummary, zeroGroups };\n}\n\nfunction zeroReplacement(df, threshold) {\n  let { zeroGroups } = zeroCheck(df, threshold);\n  let dfs = zeroGroups.toArray().map(zdf => {\n    zdf = zdf\n      .transformSeries({\n        value: () => null,\n        raw: 0,\n        flag: value => [\"zero\", ...(value || [])]\n      })\n      .withIndex(row => new Date(row.date).valueOf());\n    return zdf;\n  });\n  let merged = DataFrame.merge([df, ...dfs]);\n\n  return merged;\n}\nexport { zerogrouping, zeroReplacement, zeroCheck };\n"],"names":["intervalToMS","unit","value","start","dayjs","add","diff","valueFiller","fillType","startValue","endValue","entryIndex","numEntries","overrideValue","dateFunction","date","flag","indexOf","Error","fromPairs","toPairs","map","key","rval","df","values","deflate","row","x","toArray","std","sampleStandardDeviation","mean","_mean","ndf","generateSeries","ares","R","DataFrame","Math","abs","max","lambdaTest","n","i","alpha","p","pValue","t","degreeOfFreedom","Studentt","inv","tValue","lambda","sqrt","pow","modz","mad","median","modifiedZScoreTest","_median","medianAbsoluteDeviation","outliers","sort","a","b","filter","v","thresholds","upper","min","Infinity","lower","calculateChange","baseline","Timeseries","data","options","dataForge","config","others","valueOf","index","toDate","considerAllRows","call","this","removeOutliers","column","lowerThreshold","upperThreshold","where","outlierCheck","raw","transformSeries","merge","baselinePercentChange","baselineDF","dfwb","count","indexer","interval","getInterval","baselineInterval","isEqual","console","error","month","indexedBaseline","withIndex","at","has","getSeries","average","first","delta","prototype","Object","create","constructor","getValueColumns","detectTypes","Type","distinct","Column","ms","end","getIndex","window","select","last","detectValues","orderBy","Frequency","Value","ceil","getDateRange","adjustment","startOf","endOf","calculateStatistics","filterZeros","filterNegative","series","isNaN","q1","quantile","q3","iqr","calculateThresholdOptions","k","noflags","Array","isArray","length","floor","esd","dataset","newdf","dataframe","trip","pair","assign","push","outlierValues","outlier","takeWhile","iterations","rosnerTest","box","lowerInner","upperInner","lowerOuter","upperOuter","transformAllSeries","adjustmentFunction","exclude","columns","col","forEach","reset","withSeries","subset","group","groupBy","clean","downsample","duration","dateComparison","valueColumns","sum","getColumnNames","inflate","upsample","fillGaps","durationValue","pairA","pairB","startDate","gapExists","endDate","newEntries","e","gapFill","populate","type","reduceToValue","columnNames","chooseValue","rollingPercentChange","rollingWindow","pctChange","withDelta","addBaselineDelta","annualIntensity","normalizeValue","year","scaler","_this","renameSeries","dropSeries","fillMissing","bdf","blank","m","undefined","fillNull","zeroReplacement","threshold","dfs","zeroGroups","variableWindow","zeroSummary","zeroCheck","zdf","Date","monthlyWithQual","fullCount","getFullYear","getMonth","getDate","score","threeYearAverage","defaultValue","months","before","tail","averageFill","avg","rollingAverage","dates","aggregate","dataframes","Set","reduce","concat","o","c"],"mappings":"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"}
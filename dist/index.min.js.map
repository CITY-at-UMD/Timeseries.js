{"version":3,"file":"index.min.js","sources":["../src/lib/Timeseries.interval.js","../src/lib/Timeseries.fill.js","../src/lib/Timeseries.statistics.js","../src/lib/misc.js","../src/index.js"],"sourcesContent":["import dayjs from \"dayjs\";\n\nconst msToInterval = ms => {\n\tlet start = dayjs();\n\tlet end = dayjs().add(ms);\n\tif (end.diff(start, \"month\", true) >= 11) {\n\t\treturn [\"year\", Math.ceil(end.diff(start, \"year\", true))];\n\t} else if (end.diff(start, \"day\", true) >= 28) {\n\t\treturn [\"month\", Math.ceil(end.diff(start, \"month\", true))];\n\t} else if (end.diff(start, \"hour\", true) >= 23) {\n\t\treturn [\"day\", Math.ceil(end.diff(start, \"day\", true))];\n\t} else if (end.diff(start, \"minute\", true) >= 55) {\n\t\treturn [\"hour\", Math.ceil(end.diff(start, \"hour\", true))];\n\t} else {\n\t\treturn [\"minute\", end.diff(start, \"minute\")];\n\t}\n};\nconst intervalToMS = ([unit, value]) => {\n\tlet start = dayjs();\n\tlet end = dayjs().add(value, unit);\n\treturn end.diff(start);\n};\nfunction calculateInterval(df, startDate, endDate) {\n\tif (!startDate) startDate = df.first.date;\n\tif (!endDate) endDate = df.last.date;\n\tfunction computeInterval(window) {\n\t\treturn window.last() - window.first();\n\t}\n\tconst intervals = df\n\t\t.between(startDate, endDate)\n\t\t.getIndex()\n\t\t.window(2)\n\t\t.select(computeInterval)\n\t\t.detectValues()\n\t\t.orderBy(row => row.Frequency);\n\n\tlet val = intervals.last().Value;\n\treturn msToInterval(val);\n}\nexport { msToInterval, intervalToMS, calculateInterval };\n","import dayjs from \"dayjs\";\nimport fromPairs from \"lodash/fromPairs\";\nimport toPairs from \"lodash/toPairs\";\nimport { mean } from \"simple-statistics\";\nimport { Timeseries } from \"../index\";\nconst gapExists = ([duration, durationValue = 1]) => (pairA, pairB) => {\n\tconst startDate = pairA[0];\n\tconst endDate = pairB[0];\n\tlet gapSize = Math.floor(\n\t\tdayjs(endDate).diff(startDate, duration, true) / durationValue\n\t);\n\n\tif (gapSize > 0) return true;\n\treturn false;\n};\n\nconst valueFiller = (\n\tfillType,\n\t{ startValue, endValue, entryIndex, numEntries },\n\t{ overrideValue, dateFunction, date, flag }\n) => {\n\tif (\n\t\t[\"pad\", \"interpolate\", \"average\", \"dateFunction\", \"value\"].indexOf(\n\t\t\tfillType\n\t\t) === -1\n\t) {\n\t\tthrow new Error(\"fill Type not supported\");\n\t}\n\tlet value;\n\tif (fillType === \"pad\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\treturn [key, startValue[key]];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", \"pad\"];\n\t} else if (fillType === \"interpolate\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv =\n\t\t\t\t\tstartValue[key] +\n\t\t\t\t\t(entryIndex + 1) *\n\t\t\t\t\t\t((endValue[key] - startValue[key]) / (numEntries + 1));\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"average\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv = (startValue[key] + endValue[key]) / numEntries;\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"dateFunction\" && dateFunction) {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv = dateFunction(date);\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"value\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv;\n\t\t\t\tif (typeof overrideValue === \"number\") {\n\t\t\t\t\tnv = overrideValue;\n\t\t\t\t} else {\n\t\t\t\t\tnv = overrideValue[key];\n\t\t\t\t}\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\treturn [key, null];\n\t\t\t})\n\t\t);\n\t\tflag = [\"fill\"];\n\t}\n\treturn { ...value, flag };\n};\n\nconst gapFill = (\n\tfillType,\n\t[duration, durationValue],\n\t{ overrideValue, dateFunction, flag } = {}\n) => (pairA, pairB) => {\n\t// Fill values forward.\n\n\tconst startDate = dayjs(pairA[0]);\n\tconst endDate = dayjs(pairB[0]);\n\tlet gapSize = Math.floor(\n\t\tdayjs(endDate).diff(startDate, duration) / durationValue\n\t);\n\tconst numEntries = gapSize - 1;\n\tconst startValue = pairA[1];\n\tconst endValue = pairB[1];\n\tconst newEntries = [];\n\tfor (let entryIndex = 0; entryIndex < numEntries; ++entryIndex) {\n\t\tlet adjustment = valueFiller(\n\t\t\t\tfillType,\n\t\t\t\t{ startValue, endValue, entryIndex, numEntries },\n\t\t\t\t{\n\t\t\t\t\toverrideValue,\n\t\t\t\t\tdateFunction,\n\t\t\t\t\tflag\n\t\t\t\t}\n\t\t\t),\n\t\t\tdate = dayjs(startDate)\n\t\t\t\t.add((entryIndex + 1) * durationValue, duration)\n\t\t\t\t.toDate();\n\t\tlet e = [date.valueOf(), Object.assign({}, adjustment, { date })];\n\t\tnewEntries.push(e);\n\t}\n\n\treturn newEntries;\n};\n\n// Basic Fill Functions\nconst averageMonthlyMap = df => {\n\tlet data = df.group(\"month\").select(group => ({\n\t\tmonth: group.first().date.month(),\n\t\tvalue: group\n\t\t\t.getSeries(\"value\")\n\t\t\t.where(v => v)\n\t\t\t.average()\n\t}));\n\tlet m = new Map(data.toArray().map(({ month, value }) => [month, value]));\n\tlet avg = data.getSeries(\"value\").average();\n\tm.set(\"default\", avg);\n\treturn m;\n};\n\nconst annualMonthlyAverageMap = df => {\n\tlet data = df\n\t\t.groupBy(row => row.date.year())\n\t\t.select(group => {\n\t\t\tconst date = group.first().date.startOf(\"year\");\n\t\t\tlet ts = new Timeseries(group).downsample([\"month\", 1], \"avg\");\n\t\t\tlet avg = ts.getSeries(\"value\").average();\n\t\t\tlet map = averageMonthlyMap(ts);\n\t\t\tmap.set(\"avg\", avg);\n\t\t\treturn [date.year(), map];\n\t\t});\n\tlet m = new Map(data.toArray());\n\t// let deafult =\n\treturn m;\n};\n\nconst monthlyRollingAverageMap = (\n\tdf,\n\t{ years = 3, series = \"value\", aggregator = \"average\", validOnly = true } = {}\n) => {\n\tlet months = df\n\t\t.groupBy(row => row.date.startOf(\"month\").toDate())\n\t\t.select(group => {\n\t\t\tlet date = group.first().date.startOf(\"month\");\n\t\t\tlet value = group\n\t\t\t\t.getSeries(series)\n\t\t\t\t.where(v => (validOnly ? Boolean(v) : true))\n\t\t\t\t.average();\n\t\t\treturn { date, value };\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => row.date.toDate())\n\t\t.bake();\n\tlet data = months\n\t\t.groupBy(row => row.date.month())\n\t\t.select(group => {\n\t\t\tlet values = new Map(\n\t\t\t\tgroup.rollingWindow(years).select(window => [\n\t\t\t\t\twindow.last().date.year(),\n\t\t\t\t\twindow\n\t\t\t\t\t\t.getSeries(series)\n\t\t\t\t\t\t.where(v => (validOnly ? Boolean(v) : true))\n\t\t\t\t\t\t.average() ||\n\t\t\t\t\t\tgroup\n\t\t\t\t\t\t\t.getSeries(series)\n\t\t\t\t\t\t\t.where(v => (validOnly ? Boolean(v) : true))\n\t\t\t\t\t\t\t.average()\n\t\t\t\t])\n\t\t\t);\n\t\t\tgroup\n\t\t\t\t.where(row => !values.has(row.date.year()))\n\t\t\t\t.forEach(row => {\n\t\t\t\t\tlet value =\n\t\t\t\t\t\tmonths.before(row.date.toDate()).count() > 0\n\t\t\t\t\t\t\t? months.before(row.date.toDate()).last()[series]\n\t\t\t\t\t\t\t: months.getSeries(series).average();\n\t\t\t\t\tvalues.set(row.date.year(), value);\n\t\t\t\t});\n\n\t\t\tlet month = group.first().date.month();\n\t\t\treturn [month, values];\n\t\t});\n\n\treturn new Map(data.toArray());\n};\n\nconst fillMonthlyByMap = monthMap => row => monthMap.get(row.date.month());\nconst fillMonthlyBAnnualyMap = annualMonthlyMap => row => {\n\tlet month = row.date.month(),\n\t\tyear = row.date.year();\n\tif (annualMonthlyMap.has(month)) {\n\t\tif (annualMonthlyMap.has(month)) {\n\t\t\treturn annualMonthlyMap.get(month).get(year);\n\t\t} else {\n\t\t\treturn mean([...annualMonthlyMap.get(month).values()]);\n\t\t}\n\t} else {\n\t\treturn mean(\n\t\t\t[...annualMonthlyMap.values()].map(m =>\n\t\t\t\t[...m.values()].reduce((a, b) => a.concat(b), [])\n\t\t\t)\n\t\t);\n\t}\n};\n\nconst pad = (df, { validOnly = true, series = \"value\" } = {}) => row => {\n\tlet values = df\n\t\t.before(row.date.toDate())\n\t\t.getSeries(series)\n\t\t.where(v => v);\n\tlet value = values.count() > 0 ? values.last() : 0;\n\treturn value;\n};\nconst annualAverage = (\n\tdf,\n\t{ validOnly = true, series = \"value\", years = 3, defaultValue } = {}\n) => row => {\n\tlet subset = df\n\t\t.subset([\"date\", series])\n\t\t.after(row.date.subtract(years, \"year\").toDate())\n\t\t.before(row.date.toDate())\n\t\t.bake();\n\tlet values = subset\n\t\t.where(r => r.date.month() === row.date.month())\n\t\t.where(r => r.date.date() === row.date.date())\n\t\t.where(r => r.date.hour() === row.date.hour())\n\t\t.where(r => r.date.minute() === row.date.minute())\n\t\t.getSeries(series)\n\t\t.where(v => v);\n\n\tlet value;\n\tif (values.count() < years) {\n\t\tvalue = values\n\t\t\t.appendPair([\n\t\t\t\tnull,\n\t\t\t\tsubset\n\t\t\t\t\t.getSeries(series)\n\t\t\t\t\t.where(v => v)\n\t\t\t\t\t.average()\n\t\t\t])\n\t\t\t.average();\n\t} else {\n\t\tvalue = values.average();\n\t}\n\treturn value;\n};\nexport {\n\tgapExists,\n\tgapFill,\n\taverageMonthlyMap,\n\tfillMonthlyByMap,\n\tpad,\n\tannualAverage,\n\tannualMonthlyAverageMap,\n\tmonthlyRollingAverageMap,\n\tfillMonthlyBAnnualyMap\n};\n","// Source: https://www.itl.nist.gov/div898/handbook/eda/section3/eda35h3.htm\n// https://vsp.pnnl.gov/help/Vsample/Rosners_Outlier_Test.htm\n// https://www.itl.nist.gov/div898/handbook/prc/section1/prc16.htm\n// https://www.math.ucla.edu/~tom/distributions/KolSmir2.html?\nimport { DataFrame } from \"data-forge\";\nimport {\n  sampleStandardDeviation,\n  mean as _mean,\n  max,\n  median as _median,\n  medianAbsoluteDeviation,\n  quantile\n} from \"simple-statistics\";\nimport { Studentt } from \"distributions\";\nimport dayjs from \"dayjs\";\n\nfunction rval(df) {\n  let values = df.deflate(row => row.x).toArray();\n  let std = sampleStandardDeviation(values);\n  let mean = _mean(values);\n  if (std === 0) {\n    let ndf = df.generateSeries({ ares: row => 0 });\n    return { R: 0, std, mean, df: ndf };\n  }\n  let ndf = new DataFrame({\n    values: values.map(x => ({\n      x,\n      ares: Math.abs(x - mean) / std\n    }))\n  });\n  let R = max(ndf.deflate(row => row.ares).toArray());\n  return { R, df: ndf, std, mean };\n}\n\nfunction pValue(n, i, alpha) {\n  let p = 1 - alpha / (2 * (n - i + 1));\n  return p;\n}\nfunction tValue(p, degreeOfFreedom) {\n  let qt = new Studentt(degreeOfFreedom);\n  let t = qt.inv(p);\n  return t;\n}\n//\nfunction lambdaTest(n, i, alpha) {\n  let p = pValue(n, i, alpha);\n  let df = n - i - 1;\n  let t = tValue(p, df);\n  let lambda =\n    (t * (n - i)) /\n    Math.sqrt((n - i - 1 + Math.pow(t, 2)) * (n - i + 1));\n  return { lambda, p, t };\n}\nfunction rosnerTest(dataset = [], k = 10, alpha = 0.05) {\n  let dataframe = new DataFrame({\n    values: dataset.map(x => ({ x }))\n  });\n  let n = dataframe.getSeries(\"x\").count();\n  let newdf;\n  let i = 1;\n  let outliers = [];\n  let trip = false;\n  while (i <= k) {\n    let pair = {};\n    let s = Date.now();\n    if (i === 1) {\n      let { R, df, mean, std } = rval(dataframe);\n      newdf = df.where(row => row.ares !== R);\n      pair = Object.assign({}, pair, {\n        mean,\n        std,\n        Value: df\n          .where(row => row.ares === R)\n          .getSeries(\"x\")\n          .first(),\n        R\n      });\n    } else {\n      let { R, df, mean, std } = rval(newdf);\n      newdf = df.where(row => row.ares !== R);\n      pair = Object.assign({}, pair, {\n        mean,\n        std,\n        Value: df\n          .where(row => row.ares === R)\n          .getSeries(\"x\")\n          .first(),\n        R\n      });\n    }\n    let { lambda, p, t } = lambdaTest(n, i, alpha);\n    pair = Object.assign({}, pair, { lambda });\n    outliers.push(pair);\n    if (trip && pair.R > pair.lambda) trip = false;\n    if (pair.R === 0) break;\n    if (pair.R < pair.lambda) {\n      if (trip) {\n        break;\n      } else {\n        trip = true;\n      }\n    }\n    i++;\n  }\n  outliers = new DataFrame(outliers)\n    .generateSeries({\n      outlier: row => row.R > row.lambda\n    })\n    .takeWhile(row => row.outlier);\n  let outlierValues = outliers\n    .where(row => row.Value > 0)\n    .deflate(row => row.Value);\n  let thresholds = {\n    lower: 0,\n    upper:\n      outlierValues.count() > 0 ? outlierValues.min() : Infinity\n  };\n  return {\n    outliers,\n    thresholds,\n    iterations: i\n  };\n}\nconst modz = (value, mad, median) => {\n  return (0.6745 * (value - median)) / mad;\n};\nfunction modifiedZScoreTest(values) {\n  let median = _median(values);\n  let mad = medianAbsoluteDeviation(values);\n  values = values\n    .sort((a, b) => b - a)\n    .filter(v => v > 0)\n    .map(v => [v, modz(v, mad, median)]);\n  let outliers = values.filter(\n    ([v, modz]) => Math.abs(modz) >= 3.5\n  );\n  let upper = Math.min(\n    ...[Infinity, ...outliers.map(v => v[0])]\n  );\n  // let score,\n  // \tvalue,\n  // \tthreshold = Infinity,\n  // \tindex = 0;\n  // do {\n  // \tvalue = values[index];\n  // \tscore = modz(value, mad, median);\n  // \tif (Math.abs(score) >= 3.5) threshold = value;\n  // } while (score >= 3.5);\n  return { thresholds: { upper, lower: 0 } };\n}\nfunction boxPlotTest(values) {\n  let q1 = quantile(values, 0.25);\n  let q3 = quantile(values, 0.75);\n  let iqr = q3 - q1;\n  return {\n    thresholds: {\n      lowerInner: q1 - 1.5 * iqr,\n      upperInner: q1 - 3 * iqr,\n      lowerOuter: q3 + 1.5 * iqr,\n      upperOuter: q3 + 3 * iqr\n    }\n  };\n}\nfunction calculateOutlierThresholds(\n  df,\n  { k, filterZeros = true } = {}\n) {\n  let values = df\n    .where(\n      row =>\n        row.flag === null ||\n        row.flag === undefined ||\n        Array.isArray(row.flag)\n    )\n    .where(row => !isNaN(row.value) && row.value !== null)\n    .getSeries(\"value\")\n    .bake();\n  if (filterZeros) values = values.where(value => value > 0);\n  if (!k) {\n    k =\n      values.count() < 1000\n        ? Math.floor(values.count() * 0.15)\n        : Math.min(...[1000, Math.floor(values.count() * 0.02)]);\n  }\n  if (values.count < 5) return {};\n  let { outliers, threshold } = rosnerTest(values.toArray(), k);\n  return { outliers, threshold };\n}\n\nfunction zeroCheck(df, threshold = 2) {\n  let zeroGroups = df\n    .variableWindow((a, b) => {\n      return a.value === b.value && a.value === 0;\n    })\n    .where(window => window.getIndex().count() >= threshold);\n  let zeroSummary = zeroGroups\n    .select(window => ({\n      start: window.first().date,\n      end: window.last().date,\n      count: window.count()\n    }))\n    .inflate(); // Series -> dataframe.\n  // .toArray()\n  return { zeroSummary, zeroGroups };\n}\n\nfunction zeroReplacement(df, threshold) {\n  let { zeroGroups } = zeroCheck(df, threshold);\n  zeroGroups.forEach(dff => {\n    dff = dff.transformSeries({\n      value: value => null,\n      flag: value => [\"zero\"]\n    });\n    df = DataFrame.merge([df, dff]);\n  });\n  return df;\n}\nfunction isOutlier(value, { lower, upper }) {\n  if (value < lower || value >= upper) {\n    return true;\n  }\n  return false;\n}\nfunction validMean(df) {\n  let values = df\n    .getSeries(\"value\")\n    .where(value => typeof value === \"number\");\n  return values.average();\n}\nfunction validMonthlyMeanMap(df) {\n  let dateComparison = row =>\n    dayjs(row.date)\n      .startOf(\"month\")\n      .month();\n\n  df = df\n    .where(row => typeof row.value === \"number\")\n    .groupBy(dateComparison)\n    .select(group => ({\n      month: new Date(group.first().date).getMonth(),\n      value: group.deflate(row => row.value).average()\n    }));\n  return new Map(\n    df.toArray().map(({ month, value }) => [month, value])\n  );\n}\n\nfunction quality(df) {\n  let count = df.getIndex().count();\n  let valid = df\n    .getSeries(\"flag\")\n    .where(\n      value =>\n        value === null ||\n        (Array.isArray(value) && value.length === 0)\n    )\n    .count();\n  let missing = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"missing\") !== -1)\n    .count();\n  let dirty = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"clean\") !== -1)\n    .count();\n  let zerod = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"zero\") !== -1)\n    .count();\n  let breakdown = {\n    valid: valid / count,\n    missing: missing / count,\n    invalid: (dirty + zerod) / count\n  };\n  let report = {\n    accuracy: (1 - dirty / count) * 4,\n    completeness: 4 * breakdown.valid,\n    consistency: 4 * ((count - missing - zerod) / count)\n  };\n  return { breakdown, report, count };\n}\n\nexport {\n  rosnerTest,\n  modifiedZScoreTest,\n  boxPlotTest,\n  calculateOutlierThresholds,\n  zeroReplacement,\n  isOutlier,\n  validMean,\n  validMonthlyMeanMap,\n  quality\n};\n","import dayjs from \"dayjs\";\nexport const annualScale = (start, end) =>\n\t365 / dayjs(end).diff(dayjs(start), \"day\");\nexport const calculateChange = (baseline, value) =>\n\t(value - baseline) / baseline;\n","import dayjs from \"dayjs\";\nimport dataForge from \"data-forge\";\nimport { msToInterval, intervalToMS } from \"./lib/Timeseries.interval\";\nimport isEqual from \"lodash/isEqual\";\nimport has from \"lodash/has\";\nimport get from \"lodash/get\";\nimport fromPairs from \"lodash/fromPairs\";\nimport {\n\tgapExists,\n\tgapFill,\n\taverageMonthlyMap,\n\tfillMonthlyByMap,\n\tpad,\n\tannualAverage,\n\tannualMonthlyAverageMap,\n\tmonthlyRollingAverageMap,\n\tfillMonthlyBAnnualyMap\n} from \"./lib/Timeseries.fill\";\nimport {\n\tckmeans,\n\tmax,\n\tmedianAbsoluteDeviation,\n\tquantile\n} from \"simple-statistics\";\n\nimport {\n\trosnerTest,\n\tboxPlotTest,\n\tmodifiedZScoreTest\n} from \"./lib/Timeseries.statistics\";\nimport { annualScale, calculateChange } from \"./lib/misc\";\n\n// export default ;\n// Fill Options\nexport {\n\tTimeseries,\n\tannualAverage,\n\taverageMonthlyMap,\n\tannualMonthlyAverageMap,\n\tmonthlyRollingAverageMap,\n\tfillMonthlyBAnnualyMap,\n\tfillMonthlyByMap,\n\tpad\n};\nfunction Timeseries(data = [], options = {}) {\n\t// const { msIndex } = options;\n\tif (data instanceof Timeseries) {\n\t\treturn data;\n\t}\n\tif (data instanceof dataForge.DataFrame) {\n\t\tdata = data.toArray();\n\t}\n\n\tdata = data\n\t\t.map(({ date, ...others }) => ({ date: dayjs(date), ...others }))\n\t\t.sort((a, b) => a.date.valueOf() - b.date.valueOf());\n\tlet config = {\n\t\t// columns: ['date', 'value', 'raw', 'flag'],\n\t\tvalues: data,\n\t\tindex: data.map(({ date }) => date.toDate()),\n\t\tconsiderAllRows: true\n\t};\n\tdataForge.DataFrame.call(this, config);\n}\n\nTimeseries.prototype = Object.create(dataForge.DataFrame.prototype);\nTimeseries.prototype.constructor = Timeseries;\n\n// Getters\nfunction getValueColumns() {\n\treturn this.detectTypes()\n\t\t.where(row => row.Type === \"number\")\n\t\t.distinct(row => row.Column)\n\t\t.getSeries(\"Column\")\n\t\t.toArray();\n}\nfunction interval() {\n\tconst computeInterval = window => window.last() - window.first();\n\tconst intervals = this.getIndex()\n\t\t.window(2)\n\t\t.select(computeInterval)\n\t\t.detectValues()\n\t\t.orderBy(row => -row.Frequency);\n\t// .orderBy(row => row.Value);\n\n\tlet val = intervals.first().Value;\n\n\treturn msToInterval(val);\n}\n\nfunction dateRange(unit, adjustment) {\n\tlet start = dayjs(this.first().date),\n\t\tend = dayjs(this.last().date);\n\tif (adjustment) {\n\t\tstart = start.startOf(adjustment);\n\t\tend = end.endOf(adjustment);\n\t}\n\treturn end.diff(start, unit);\n}\nTimeseries.prototype.getValueColumns = getValueColumns;\nTimeseries.prototype.getInterval = interval;\nTimeseries.prototype.getDateRange = dateRange;\n\n// Statistics\nfunction cvrsme(actual, simulated) {\n\tlet df = this.subset([actual, simulated])\n\t\t.resetIndex()\n\t\t.generateSeries({\n\t\t\tactual: row => row[actual] || 0,\n\t\t\tsimulated: row => row[simulated] || 0\n\t\t})\n\t\t.dropSeries([actual, simulated])\n\t\t.generateSeries({ diff: row => row.actual - row.simulated });\n\tlet n = df.count();\n\tlet p = 1.0;\n\tlet ybar = df.getSeries(\"actual\").sum() / n;\n\tlet v = Math.sqrt(df.getSeries(\"diff\").sum() / (n - p)) / ybar;\n\treturn v;\n}\nfunction nmbe(actual, simulated) {\n\tlet df = this.subset([actual, simulated])\n\t\t.resetIndex()\n\t\t.generateSeries({\n\t\t\tactual: row => row[actual] || 0,\n\t\t\tsimulated: row => row[simulated] || 0\n\t\t})\n\t\t.dropSeries([actual, simulated])\n\t\t.generateSeries({ diff: row => row.actual - row.simulated });\n\n\tlet n = df.count();\n\tlet p = 1.0;\n\tlet ybar = df.getSeries(\"actual\").sum() / n;\n\tlet b = df.getSeries(\"diff\").sum() / ((n - p) * ybar);\n\treturn b;\n}\nTimeseries.prototype.cvrsme = cvrsme;\nTimeseries.prototype.nmbe = nmbe;\n\n// Methods\nfunction calculateThresholdOptions({\n\tk,\n\tfilterZeros = true,\n\tfilterNegative = true\n} = {}) {\n\tlet noflags = this.where(\n\t\trow =>\n\t\t\trow.flag === null ||\n\t\t\trow.flag === undefined ||\n\t\t\t(Array.isArray(row.flag) && row.flag.length === 0)\n\t)\n\t\t.where(row => !isNaN(row.value) && row.value !== null)\n\t\t.getSeries(\"value\");\n\tif (filterZeros) noflags = noflags.where(value => value !== 0);\n\tif (filterNegative) noflags = noflags.where(value => value > 0);\n\tif (!k) {\n\t\tk =\n\t\t\tnoflags.count() < 1000\n\t\t\t\t? Math.floor(noflags.count() * 0.15)\n\t\t\t\t: Math.min(...[1000, Math.floor(noflags.count() * 0.02)]);\n\t}\n\tif (noflags.count() < 5) return {};\n\tlet { thresholds: esd } = rosnerTest(noflags.toArray(), k);\n\tlet { thresholds: box } = boxPlotTest(noflags.toArray());\n\tlet { thresholds: modz } = modifiedZScoreTest(noflags.toArray());\n\treturn { esd, box, modz };\n}\n\nfunction getBestThreshold() {\n\ttry {\n\t\tlet thresholds = this.calculateThresholdOptions();\n\t\tconst thresholdGroups = ckmeans(\n\t\t\t[\n\t\t\t\tget(thresholds, \"esd.upper\", null),\n\t\t\t\tget(thresholds, \"modz.upper\", null),\n\t\t\t\tget(thresholds, \"box.lowerOuter\", null),\n\t\t\t\tget(thresholds, \"box.upperOuter\", null)\n\t\t\t].filter(v => v),\n\t\t\t2\n\t\t);\n\t\tlet threshold_actual = max(\n\t\t\tthresholdGroups.reduce((a, b) => (a.length > b.length ? a : b))\n\t\t);\n\t\treturn threshold_actual;\n\t} catch (error) {\n\t\tconsole.error(error);\n\t\tthrow new Error(\"Cannot determine threshold\");\n\t}\n}\n\nfunction calculateStatistics(options = {}) {\n\tconst {\n\t\tcolumn = \"value\",\n\t\tfilterZeros = false,\n\t\tfilterNegative = true\n\t} = options;\n\tlet series = this.deflate(row => row[column]).where(value => !isNaN(value));\n\tif (filterNegative) series = series.where(value => value >= 0);\n\tif (filterZeros) series = series.where(value => value !== 0);\n\tlet median = series.median();\n\tlet mean = series.average();\n\tlet count = series.count();\n\tlet std = series.std();\n\tlet min = series.min();\n\tlet max = series.max();\n\tlet mad = medianAbsoluteDeviation(series.toArray());\n\tlet q1 = quantile(series.toArray(), 0.25);\n\tlet q3 = quantile(series.toArray(), 0.75);\n\tlet iqr = q3 - q1;\n\tlet stats = {\n\t\tmedian,\n\t\tmean,\n\t\tcount,\n\t\tstd,\n\t\tmin,\n\t\tmax,\n\t\tmad,\n\t\tq1,\n\t\tq3,\n\t\tiqr\n\t};\n\treturn stats;\n}\n\nTimeseries.prototype.calculateStatistics = calculateStatistics;\nTimeseries.prototype.calculateThresholdOptions = calculateThresholdOptions;\nTimeseries.prototype.getBestThreshold = getBestThreshold;\n\n// Chainable Methods\nfunction betweenDates(start, end) {\n\tstart = dayjs(start).toDate();\n\tend = dayjs(end).toDate();\n\tlet df = this.between(start, end);\n\treturn new Timeseries(df);\n}\nTimeseries.prototype.betweenDates = betweenDates;\n\nfunction transformAllSeries(adjustmentFunction, { exclude }) {\n\tlet df = this;\n\tlet columns = (columns = df\n\t\t.detectTypes()\n\t\t.where(row => row.Type === \"number\")\n\t\t.distinct(row => row.Column)\n\t\t.getSeries(\"Column\")\n\t\t.toArray());\n\tif (exclude && Array.isArray(exclude)) {\n\t\tcolumns = columns.filter(col => exclude.indexOf(col) === -1);\n\t}\n\tcolumns.forEach(col => {\n\t\tdf = df.transformSeries({\n\t\t\t[col]: value => {\n\t\t\t\tif (isNaN(value)) {\n\t\t\t\t\treturn value;\n\t\t\t\t} else {\n\t\t\t\t\treturn adjustmentFunction(value);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\treturn df;\n}\n\nTimeseries.prototype.transformAllSeries = transformAllSeries;\n\nfunction reset() {\n\tlet df = this.withSeries({\n\t\tvalue: row =>\n\t\t\trow.flag && Array.isArray(row.flag) && row.flag.length > 0\n\t\t\t\t? row.raw\n\t\t\t\t: row.value\n\t})\n\t\t.subset([\"date\", \"value\"])\n\t\t.where(row => !isNaN(row.value) && row.value !== null);\n\treturn new Timeseries(df);\n}\nTimeseries.prototype.reset = reset;\n\n// To and From Totalizers\nfunction fromTotalizer(col = \"value\", { acceptInitial = false } = {}) {\n\tlet array = this.subset([\"date\", col])\n\t\t.toArray()\n\t\t.map((v, i, arr) => {\n\t\t\tlet val = acceptInitial ? v[col] : null;\n\t\t\tif (arr[i - 1]) {\n\t\t\t\tval = v[col] - arr[i - 1][col];\n\t\t\t}\n\t\t\treturn { date: v.date, [col]: val };\n\t\t});\n\tlet ndf = new Timeseries(a);\n\treturn ndf;\n}\nfunction toTotalizer(col, { adjustInitial } = {}) {\n\tlet array = this.subset([\"date\", col])\n\t\t.toArray()\n\t\t.map((v, i, arr) => {\n\t\t\tlet val = arr\n\t\t\t\t.slice(0, i)\n\t\t\t\t.map(obj => obj[col])\n\t\t\t\t.reduce((a, b) => a + b, 0);\n\t\t\treturn { date: v.date, [col]: val };\n\t\t});\n\tlet ndf = new Timeseries(a);\n\treturn ndf;\n}\nTimeseries.prototype.fromTotalizer = fromTotalizer;\nTimeseries.prototype.toTotalizer = toTotalizer;\n\nfunction group(interval, toArray) {\n\tif ([\"hour\", \"day\", \"month\", \"year\"].indexOf(interval) === -1)\n\t\tthrow new Error(\"interval type not supported\");\n\tlet dateComparison = row => dayjs(row.date).startOf(interval);\n\tlet groups = this.groupBy(dateComparison);\n\treturn groups;\n}\n\nTimeseries.prototype.group = group;\n\nfunction removeOutliers({ series = \"value\", lower, upper } = {}) {\n\tif (lower > upper) throw new Error(\"thresholds invalid\");\n\tlet outlierCheck = (value, lower, upper) => value < lower || value > upper;\n\n\tlet outliers = this.where(row => outlierCheck(row[series], lower, upper))\n\t\t.generateSeries({\n\t\t\traw: row => row[series],\n\t\t\tflag: ({ flag = [] }) => [\"outlier\", ...flag]\n\t\t})\n\t\t.transformSeries({\n\t\t\t[series]: value => null\n\t\t});\n\n\tlet merged = this.merge(outliers);\n\treturn new Timeseries(merged);\n}\n\nTimeseries.prototype.removeOutliers = removeOutliers;\nTimeseries.prototype.clean = removeOutliers;\n\nfunction downsample([duration, value], fillType = \"sum\") {\n\tif ([\"hour\", \"day\", \"month\", \"year\"].indexOf(duration) === -1)\n\t\tthrow new Error(\"interval type not supported\");\n\tif ([\"sum\", \"avg\", \"median\"].indexOf(fillType) === -1) {\n\t\tthrow new Error(\"aggregation type not suppported, only:\");\n\t}\n\tlet dateComparison = row => row.date.startOf(duration);\n\tlet valueColumns = this.getValueColumns();\n\tif (value) {\n\t\tdateComparison = row => row.date.startOf(duration).add(value, duration);\n\t}\n\tlet df = this.groupBy(dateComparison)\n\t\t.select(group => {\n\t\t\tconst date = group.first().date.startOf(duration);\n\t\t\treturn {\n\t\t\t\tdate,\n\t\t\t\t...fromPairs([\n\t\t\t\t\t...valueColumns.map(col => {\n\t\t\t\t\t\tlet value;\n\t\t\t\t\t\tswitch (fillType) {\n\t\t\t\t\t\t\tcase \"median\":\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.median();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"avg\":\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.average();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t// sum\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.sum();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn [col, value];\n\t\t\t\t\t}),\n\t\t\t\t\t...group\n\t\t\t\t\t\t.getColumnNames()\n\t\t\t\t\t\t.filter(col => col !== \"date\")\n\t\t\t\t\t\t.filter(col => valueColumns.indexOf(col) === -1)\n\t\t\t\t\t\t.map(col => {\n\t\t\t\t\t\t\tlet value = group\n\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t.distinct()\n\t\t\t\t\t\t\t\t.toArray();\n\t\t\t\t\t\t\tif (value.length === 1) value = value[0];\n\t\t\t\t\t\t\treturn [col, value];\n\t\t\t\t\t\t})\n\t\t\t\t])\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => dayjs(row.date).toDate());\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.downsample = downsample;\nfunction downsampleClean([duration, value], threshold = 0.8) {\n\tif ([\"hour\", \"day\", \"month\", \"year\"].indexOf(duration) === -1)\n\t\tthrow new Error(\"interval type not supported\");\n\tlet dateComparison = row => row.date.startOf(duration);\n\tlet valueColumns = this.getValueColumns();\n\tif (value) {\n\t\tdateComparison = row => row.date.startOf(duration).add(value, duration);\n\t}\n\tlet df = this.groupBy(dateComparison)\n\t\t.select(group => {\n\t\t\tconst date = group.first().date.startOf(duration);\n\t\t\tlet quality = new Timeseries(group).dataQuality().setIndex(\"flag\");\n\t\t\tlet clean = quality.at(\"clean\").percent;\n\t\t\treturn {\n\t\t\t\tdate,\n\t\t\t\tvalue:\n\t\t\t\t\tclean >= threshold\n\t\t\t\t\t\t? group\n\t\t\t\t\t\t\t\t.deflate(row => row.value)\n\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t.sum()\n\t\t\t\t\t\t: null\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => dayjs(row.date).toDate());\n\treturn new Timeseries(df);\n}\nTimeseries.prototype.downsampleClean = downsampleClean;\nfunction upsample([duration, value], fillType = \"average\", flag = false) {\n\t// Dont use this b/c it has the raw and flag values\n\tlet df = this;\n\n\t// let blank = Timeseries.blank(df.first().date, df.last().date, [\n\t// \tduration,\n\t// \tvalue\n\t// ]);\n\t// let n = Timeseries.merge([blank, df]).fillNull();\n\n\tlet n = df.fillGaps(\n\t\tgapExists([duration, value]),\n\t\tgapFill(fillType, [duration, value])\n\t);\n\tif (!flag) n = n.dropSeries([\"flag\"]);\n\treturn new Timeseries(n);\n}\n\nTimeseries.prototype.upsample = upsample;\n\nfunction populate(value, type = \"average\") {\n\tlet v;\n\tswitch (type) {\n\t\tcase \"fill\":\n\t\t\tv = value;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tv = value / this.count();\n\t\t\tbreak;\n\t}\n\tlet df = this.generateSeries({ value: row => v });\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.populate = populate;\n\nfunction reduceToValue(columnNames) {\n\tfunction chooseValue(row, columnNames = []) {\n\t\tlet values = columnNames.map(n => row[n]).filter(v => v);\n\t\treturn values[0] || 0;\n\t}\n\tlet df = this.generateSeries({\n\t\tvalue: row => chooseValue(row, columnNames)\n\t}).subset([\"date\", \"value\"]);\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.reduceToValue = reduceToValue;\n\nfunction cumulativeSum(columns) {\n\tif (!columns) columns = this.getValueColumns();\n\tif (columns & !Array.isArray(columns)) columns = [columns];\n\tlet df = this;\n\tconst cumulativeSum = sum => value => (sum += value);\n\tcolumns.forEach(s => {\n\t\tdf = df.withSeries(s, df.getSeries(s).select(cumulativeSum(0)));\n\t});\n\treturn new Timeseries(df);\n}\nTimeseries.prototype.cumulativeSum = cumulativeSum;\n\nfunction totalRows(series = [\"value\"], colname = \"total\") {\n\tlet ndf = this.generateSeries({\n\t\t[colname]: row => series.map(v => row[v] || 0).reduce((a, b) => a + b, 0)\n\t});\n\treturn new Timeseries(ndf);\n}\nTimeseries.prototype.totalRows = totalRows;\nTimeseries.prototype.totalRow = totalRows;\nTimeseries.prototype.totalColumns = totalRows;\n\n// Baseline Functions\nfunction rollingPercentChange(col = \"value\", decimal = true) {\n\tlet df = this;\n\tlet s = df\n\t\t.getSeries(col)\n\t\t.rollingWindow(2)\n\t\t.select(window => {\n\t\t\tlet v = (window.last() - window.first()) / Math.abs(window.first());\n\t\t\treturn [window.getIndex().last(), v];\n\t\t})\n\t\t.withIndex(pair => pair[0])\n\t\t.select(pair => pair[1]);\n\tlet delta = df.withSeries(\"delta\", s);\n\tif (decimal) delta = delta.transformSeries({ delta: value => value / 100 });\n\treturn new Timeseries(delta);\n}\n\nTimeseries.prototype.rollingPercentChange = rollingPercentChange;\nfunction baselinePercentChange(baselineDF) {\n\t// Only Change in Year\n\tif (!(baselineDF instanceof Timeseries))\n\t\tbaselineDF = new Timeseries(baselineDF);\n\tlet dfwb;\n\tif (baselineDF.count() > 1) {\n\t\tlet interval = this.getInterval();\n\t\tlet baselineInterval = baselineDF.interval;\n\t\tif (!isEqual(interval, baselineInterval)) {\n\t\t\tconsole.error(interval, baselineInterval);\n\t\t\tthrow new Error(\"baseline and data intervals do not match\");\n\t\t}\n\t\tlet indexer;\n\t\tswitch (interval[0]) {\n\t\t\tcase \"day\":\n\t\t\t\tindexer = date => `${date.month()}-${date.date()}`;\n\t\t\t\tbreak;\n\t\t\tcase \"month\":\n\t\t\t\tindexer = date => date.month();\n\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tindexer = date => 0;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tlet indexedBaseline = baselineDF.withIndex(row => indexer(row.date));\n\t\tlet getBaselineValue = index => {\n\t\t\tlet at = indexedBaseline.at(index);\n\t\t\tif (at && has(at, \"value\")) {\n\t\t\t\treturn at.value;\n\t\t\t} else {\n\t\t\t\treturn indexedBaseline.getSeries(\"value\").average();\n\t\t\t}\n\t\t};\n\t\tdfwb = this.generateSeries({\n\t\t\tbaseline: row => getBaselineValue(indexer(row.date))\n\t\t});\n\t} else {\n\t\tdfwb = this.generateSeries({\n\t\t\tbaseline: row => baselineDF.first().value\n\t\t});\n\t}\n\tdfwb = dfwb.generateSeries({\n\t\tdelta: row => calculateChange(row.baseline, row.value)\n\t});\n\treturn new Timeseries(dfwb);\n}\n\nTimeseries.prototype.baselinePercentChange = baselinePercentChange;\nTimeseries.prototype.addBaselineDelta = baselinePercentChange;\n\nfunction annualIntensity(normalizeValue = 1) {\n\tlet interval = this.getInterval();\n\tlet annual = this.groupBy(row => row.date.year())\n\t\t.select(group => {\n\t\t\tlet startDate = group.first().date;\n\t\t\tlet endDate = group\n\t\t\t\t.last()\n\t\t\t\t.date.add(interval[1] || 1, interval[0] || \"month\");\n\t\t\tlet scaler = annualScale(startDate, endDate);\n\t\t\treturn {\n\t\t\t\tstartDate,\n\t\t\t\tendDate,\n\t\t\t\t...fromPairs(\n\t\t\t\t\tthis.getValueColumns().map(col => [\n\t\t\t\t\t\tcol,\n\t\t\t\t\t\t(group\n\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t.where(v => v)\n\t\t\t\t\t\t\t.sum() *\n\t\t\t\t\t\t\tscaler) /\n\t\t\t\t\t\t\tnormalizeValue\n\t\t\t\t\t])\n\t\t\t\t)\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.renameSeries({ startDate: \"date\" })\n\t\t.dropSeries(\"endDate\");\n\treturn new Timeseries(annual);\n}\n\nTimeseries.prototype.annualIntensity = annualIntensity;\n\n// Fill Functions\n\nfunction fillMissing() {\n\tlet df = this;\n\tlet startDate = df.first().date.toDate(),\n\t\tendDate = df.last().date.toDate();\n\tlet interval = df.getInterval();\n\tlet bdf = Timeseries.blank(\n\t\tstartDate,\n\t\tendDate,\n\t\tinterval,\n\t\t\"missing\"\n\t).withIndex(row => row.date.valueOf());\n\tlet m = bdf.merge(df.withIndex(row => row.date.valueOf())).generateSeries({\n\t\tflag: row =>\n\t\t\trow.value === null || row.value === undefined ? row.flag : undefined\n\t});\n\tm = new Timeseries(m);\n\treturn m;\n}\nTimeseries.prototype.fillMissing = fillMissing;\n\nfunction fillNull({ series = \"value\", value, callback }) {\n\tconst seriesCheck = row => row[series] === null || row[series] === undefined;\n\tif (callback) {\n\t\tlet df = this.generateSeries({\n\t\t\tflag: row =>\n\t\t\t\tseriesCheck(row) ? [\"fill\", ...(row.flag || [])] : row.flag,\n\t\t\t[series]: row => (seriesCheck(row) ? callback(row) : row[series])\n\t\t});\n\t\treturn new Timeseries(df);\n\t} else if (value) {\n\t\tlet df = this.generateSeries({\n\t\t\tflag: row => (seriesCheck(row) ? [\"fill\", ...(row.flag || [])] : row.flag)\n\t\t}).transformSeries({\n\t\t\t[series]: currentValue =>\n\t\t\t\tcurrentValue === null || currentValue === undefined\n\t\t\t\t\t? value\n\t\t\t\t\t: currentValue\n\t\t});\n\t\treturn new Timeseries(df);\n\t} else {\n\t\treturn this;\n\t}\n}\nTimeseries.prototype.fillNull = fillNull;\n\nfunction zeroFaultDetection(thresholdInterval) {\n\tif (!Array.isArray(thresholdInterval))\n\t\tthresholdInterval = [thresholdInterval, 1];\n\tthresholdInterval = intervalToMS(thresholdInterval);\n\tlet df = this;\n\tlet zeroFaultDates = df\n\t\t.where(row => row.value === 0)\n\t\t.ensureSeries(\n\t\t\t\"interval\",\n\t\t\tdf\n\t\t\t\t.where(row => row.value === 0)\n\t\t\t\t.getSeries(\"date\")\n\t\t\t\t.amountChange()\n\t\t)\n\t\t.where(v => v.interval <= thresholdInterval)\n\t\t.subset([\"date\"])\n\t\t.generateSeries({ value: row => null, flag: row => [\"zeroFault\"] });\n\n\tlet zeroFaultDF = new Timeseries(this.merge(zeroFaultDates));\n\treturn zeroFaultDF;\n}\n\nTimeseries.prototype.zeroFaultDetection = zeroFaultDetection;\n\nfunction dataQuality() {\n\tlet count = this.count();\n\tlet withFlags = this.where(r => Array.isArray(r.flag) && r.flag.length > 0)\n\t\t.groupBy(r => r.flag.toString())\n\t\t.select(group => ({\n\t\t\tflag: group.first().flag,\n\t\t\tcount: group.count(),\n\t\t\tpercent: group.count() / count\n\t\t}))\n\t\t.inflate();\n\tlet good = this.where(\n\t\tr =>\n\t\t\tr.flag === undefined ||\n\t\t\tr.flag === null ||\n\t\t\t(Array.isArray(r.flag) && r.flag.length === 0)\n\t).count();\n\tlet quality = withFlags\n\t\t.appendPair([\n\t\t\twithFlags.count(),\n\t\t\t{ flag: \"clean\", count: good, percent: good / count }\n\t\t])\n\t\t.orderByDescending(row => row.count);\n\treturn quality;\n}\n\nTimeseries.prototype.dataQuality = dataQuality;\n\nfunction monthlyWithQual() {\n\tlet interval = this.getInterval();\n\tlet ms = intervalToMS(interval);\n\tconst duration = \"month\";\n\tlet dateComparison = row =>\n\t\tdayjs(row.date)\n\t\t\t.startOf()\n\t\t\t.valueOf();\n\tlet ts = this.groupBy(dateComparison)\n\t\t.select(group => {\n\t\t\tconst date = dayjs(group.first().date)\n\t\t\t\t.startOf(duration)\n\t\t\t\t.toDate();\n\t\t\tlet fullCount = Math.floor(\n\t\t\t\tdayjs(date)\n\t\t\t\t\t.endOf(\"month\")\n\t\t\t\t\t.diff(dayjs(date), \"millisecond\") / ms\n\t\t\t);\n\t\t\tlet days = new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\n\t\t\tlet count = group\n\t\t\t\t.getSeries(\"value\")\n\t\t\t\t.where(v => v && v !== 0)\n\t\t\t\t.toArray().length;\n\t\t\tlet value = group\n\t\t\t\t.getSeries(\"value\")\n\t\t\t\t.where(v => !isNaN(v))\n\t\t\t\t.sum();\n\t\t\treturn {\n\t\t\t\tdate,\n\t\t\t\tvalue: isNaN(value) ? 0 : value,\n\t\t\t\tcount,\n\t\t\t\tfullCount,\n\t\t\t\tscore: count / fullCount\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => row.date.toDate());\n\treturn new Timeseries(ts);\n}\nTimeseries.prototype.monthlyWithQual = monthlyWithQual;\n\nfunction threeYearAverage(date, series = \"value\", defaultValue) {\n\tdate = dayjs(date);\n\tif (!defaultValue)\n\t\tdefaultValue = this.getSeries(series)\n\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t.average();\n\n\t// let months = df\n\t// \t.before(date.valueOf())\n\t// \t.where(row => dayjs(row.date).month() === date.month())\n\t// \t.where(row => row.score > 0.9)\n\t// \t.tail(3);\n\tlet months = this.before(date.toDate())\n\t\t.where(row => row.date.month() === date.month())\n\t\t.orderBy(row => dayjs(row.date))\n\t\t.tail(3);\n\t// .where(row => row.score > 0.9);\n\tif (months.count() > 0) {\n\t\tlet val = months\n\t\t\t.getSeries(series)\n\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t.average();\n\t\treturn val;\n\t} else {\n\t\treturn defaultValue;\n\t}\n}\nTimeseries.prototype.threeYearAverage = threeYearAverage;\n\nfunction averageFill() {\n\tlet df = this;\n\tlet avg = df\n\t\t// .where(row => row.score ?row.score >= 0.9)\n\t\t.getSeries(\"value\")\n\t\t.where(v => !isNaN(v) && v !== null)\n\t\t.average();\n\tlet monthlyAvg = df\n\t\t.generateSeries({\n\t\t\trollingAverage: row => df.threeYearAverage(row.date, \"value\", avg)\n\t\t})\n\t\t.generateSeries({\n\t\t\tflag: row => (row.value ? row.flag : [\"filled\", ...(row.flag || [])])\n\t\t})\n\t\t.generateSeries({\n\t\t\tvalue: row => (row.value ? row.value : row.rollingAverage)\n\t\t})\n\t\t.dropSeries([\"rollingAverage\"]);\n\treturn new Timeseries(monthlyAvg);\n}\n\nTimeseries.prototype.averageFill = averageFill;\nfunction toArray() {\n\tconst values = [];\n\tfor (const value of this.getContent().values) {\n\t\tif (value !== undefined) {\n\t\t\tvalues.push(value);\n\t\t}\n\t}\n\treturn values.map(({ date, ...others }) => ({\n\t\tdate: date.toDate(),\n\t\t...others\n\t}));\n}\nTimeseries.prototype.toArray = toArray;\n\nfunction atDate(date) {\n\tif (this.none()) {\n\t\treturn undefined;\n\t}\n\tdate = dayjs(date).valueOf();\n\n\tfor (const pair of this.getContent().pairs) {\n\t\tif (pair[0].valueOf() === date) {\n\t\t\treturn pair[1];\n\t\t}\n\t}\n\treturn undefined;\n}\nTimeseries.prototype.atDate = atDate;\n\n// Static Methods\nfunction blank(startDate, endDate, [duration, value = 1], flag) {\n\tif ([\"minute\", \"hour\", \"day\", \"month\", \"year\"].indexOf(duration) < 0) {\n\t\tconsole.error(interval);\n\t\tthrow new Error(\"interval type not supported\");\n\t}\n\tstartDate = dayjs(startDate);\n\tendDate = dayjs(endDate);\n\tlet dates = [startDate];\n\tlet interval = intervalToMS([duration, value]);\n\twhile (dates[dates.length - 1].valueOf() < endDate.valueOf()) {\n\t\tdates.push(dayjs(dates[dates.length - 1]).add(value, duration));\n\t}\n\tlet df = new Timeseries(dates.map(date => ({ date })));\n\n\tif (flag) {\n\t\tdf = new Timeseries(\n\t\t\tdf.generateSeries({\n\t\t\t\tflag: row => [flag]\n\t\t\t})\n\t\t);\n\t}\n\n\treturn df;\n}\nTimeseries.blank = blank;\nfunction aggregate(dataframes) {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df => new Timeseries(df));\n\tconst valueColumns = new Set(\n\t\tdataframes.map(df => df.getValueColumns()).reduce((a, b) => a.concat(b), [])\n\t);\n\tconst concatenated = dataForge.DataFrame.concat(dataframes)\n\t\t.groupBy(row => row.date)\n\t\t.select(group => {\n\t\t\tconst date = group.first().date;\n\t\t\tlet o = { date };\n\t\t\tvalueColumns.forEach(c => (o[c] = group.deflate(row => row[c]).sum()));\n\t\t\tgroup\n\t\t\t\t.getColumnNames()\n\t\t\t\t.filter(col => col !== \"date\")\n\t\t\t\t.filter(col => valueColumns.has(col) === -1)\n\t\t\t\t.forEach(col => {\n\t\t\t\t\tlet value = group\n\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t.distinct()\n\t\t\t\t\t\t.toArray();\n\t\t\t\t\tif (value.length === 1) value = value[0];\n\t\t\t\t\to[col] = value;\n\t\t\t\t\treturn;\n\t\t\t\t});\n\t\t\treturn o;\n\t\t})\n\t\t.inflate();\n\treturn new Timeseries(concatenated);\n}\n\nTimeseries.aggregate = aggregate;\nTimeseries.concat = dataframes => {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df =>\n\t\tnew Timeseries(df).withIndex(row => row.date.valueOf())\n\t);\n\tlet df = dataForge.DataFrame.concat(dataframes);\n\treturn new Timeseries(df);\n};\nTimeseries.merge = dataframes => {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df =>\n\t\tnew Timeseries(df).withIndex(row => row.date.valueOf())\n\t);\n\tlet df = dataForge.DataFrame.merge(dataframes);\n\treturn new Timeseries(df);\n};\n"],"names":["intervalToMS","unit","value","start","dayjs","add","diff","valueFiller","fillType","startValue","endValue","entryIndex","numEntries","overrideValue","dateFunction","date","flag","indexOf","Error","fromPairs","toPairs","map","key","averageMonthlyMap","df","data","group","select","month","first","getSeries","where","v","average","m","Map","toArray","avg","set","rval","values","deflate","row","x","std","sampleStandardDeviation","mean","_mean","ndf","generateSeries","ares","R","DataFrame","Math","abs","max","lambdaTest","n","i","alpha","p","pValue","t","degreeOfFreedom","Studentt","inv","tValue","lambda","sqrt","pow","modz","mad","median","modifiedZScoreTest","_median","medianAbsoluteDeviation","outliers","sort","a","b","filter","thresholds","upper","min","Infinity","lower","calculateChange","baseline","Timeseries","options","dataForge","config","others","valueOf","index","toDate","considerAllRows","call","this","removeOutliers","series","outlierCheck","raw","transformSeries","merge","totalRows","colname","reduce","baselinePercentChange","baselineDF","dfwb","count","indexer","interval","getInterval","baselineInterval","isEqual","console","error","indexedBaseline","withIndex","at","has","delta","prototype","Object","create","constructor","getValueColumns","detectTypes","Type","distinct","Column","ms","end","getIndex","window","last","detectValues","orderBy","Frequency","Value","ceil","getDateRange","adjustment","startOf","endOf","cvrsme","actual","simulated","subset","resetIndex","dropSeries","ybar","sum","nmbe","calculateStatistics","column","filterZeros","filterNegative","isNaN","q1","quantile","q3","iqr","calculateThresholdOptions","k","noflags","Array","isArray","length","floor","esd","dataset","newdf","dataframe","trip","pair","assign","push","outlierValues","outlier","takeWhile","iterations","rosnerTest","box","lowerInner","upperInner","lowerOuter","upperOuter","getBestThreshold","thresholdGroups","ckmeans","get","betweenDates","between","transformAllSeries","adjustmentFunction","exclude","columns","col","forEach","reset","withSeries","fromTotalizer","acceptInitial","arr","val","toTotalizer","slice","obj","groupBy","clean","downsample","duration","dateComparison","valueColumns","getColumnNames","inflate","downsampleClean","threshold","dataQuality","setIndex","percent","upsample","fillGaps","durationValue","pairA","pairB","startDate","gapExists","endDate","newEntries","e","gapFill","populate","type","reduceToValue","columnNames","chooseValue","cumulativeSum","s","totalRow","totalColumns","rollingPercentChange","decimal","rollingWindow","addBaselineDelta","annualIntensity","normalizeValue","year","scaler","_this","renameSeries","fillMissing","blank","undefined","fillNull","callback","seriesCheck","currentValue","zeroFaultDetection","thresholdInterval","zeroFaultDates","ensureSeries","amountChange","withFlags","r","toString","good","appendPair","orderByDescending","monthlyWithQual","fullCount","Date","getFullYear","getMonth","getDate","score","threeYearAverage","defaultValue","months","before","tail","averageFill","rollingAverage","getContent","atDate","none","pairs","dates","aggregate","dataframes","Set","concat","o","c","years","after","subtract","bake","hour","minute","ts","annualMonthlyMap","monthMap","validOnly","Boolean"],"mappings":"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"}
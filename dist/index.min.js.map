{"version":3,"file":"index.min.js","sources":["../src/lib/Timeseries.interval.js","../src/lib/Timeseries.fill.js","../src/lib/Timeseries.statistics.js","../src/lib/misc.js","../src/index.js","../src/lib/Timeseries.zero.js"],"sourcesContent":["import dayjs from \"dayjs\";\n\nconst msToInterval = ms => {\n\tlet start = dayjs();\n\tlet end = dayjs().add(ms);\n\tif (end.diff(start, \"month\", true) >= 11) {\n\t\treturn [\"year\", Math.ceil(end.diff(start, \"year\", true))];\n\t} else if (end.diff(start, \"day\", true) >= 28) {\n\t\treturn [\"month\", Math.ceil(end.diff(start, \"month\", true))];\n\t} else if (end.diff(start, \"hour\", true) >= 23) {\n\t\treturn [\"day\", Math.ceil(end.diff(start, \"day\", true))];\n\t} else if (end.diff(start, \"minute\", true) >= 55) {\n\t\treturn [\"hour\", Math.ceil(end.diff(start, \"hour\", true))];\n\t} else {\n\t\treturn [\"minute\", end.diff(start, \"minute\")];\n\t}\n};\nconst intervalToMS = ([unit, value]) => {\n\tlet start = dayjs();\n\tlet end = dayjs().add(value, unit);\n\treturn end.diff(start);\n};\nfunction calculateInterval(df, startDate, endDate) {\n\tif (!startDate) startDate = df.first.date;\n\tif (!endDate) endDate = df.last.date;\n\tfunction computeInterval(window) {\n\t\treturn window.last() - window.first();\n\t}\n\tconst intervals = df\n\t\t.between(startDate, endDate)\n\t\t.getIndex()\n\t\t.window(2)\n\t\t.select(computeInterval)\n\t\t.detectValues()\n\t\t.orderBy(row => row.Frequency);\n\n\tlet val = intervals.last().Value;\n\treturn msToInterval(val);\n}\nexport { msToInterval, intervalToMS, calculateInterval };\n","import dayjs from \"dayjs\";\nimport fromPairs from \"lodash/fromPairs\";\nimport toPairs from \"lodash/toPairs\";\n\nconst gapExists = ([duration, durationValue = 1]) => (pairA, pairB) => {\n\tconst startDate = pairA[0];\n\tconst endDate = pairB[0];\n\tlet gapSize = Math.floor(\n\t\tdayjs(endDate).diff(startDate, duration, true) / durationValue\n\t);\n\n\tif (gapSize > 0) return true;\n\treturn false;\n};\n\nconst valueFiller = (\n\tfillType,\n\t{ startValue, endValue, entryIndex, numEntries },\n\t{ overrideValue, dateFunction, date, flag }\n) => {\n\tif (\n\t\t[\"pad\", \"interpolate\", \"average\", \"dateFunction\", \"value\"].indexOf(\n\t\t\tfillType\n\t\t) === -1\n\t) {\n\t\tthrow new Error(\"fill Type not supported\");\n\t}\n\tlet value;\n\tif (fillType === \"pad\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\treturn [key, startValue[key]];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", \"pad\"];\n\t} else if (fillType === \"interpolate\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv =\n\t\t\t\t\tstartValue[key] +\n\t\t\t\t\t(entryIndex + 1) *\n\t\t\t\t\t\t((endValue[key] - startValue[key]) / (numEntries + 1));\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"average\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv = (startValue[key] + endValue[key]) / numEntries;\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"dateFunction\" && dateFunction) {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv = dateFunction(date);\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"value\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv;\n\t\t\t\tif (typeof overrideValue === \"number\") {\n\t\t\t\t\tnv = overrideValue;\n\t\t\t\t} else {\n\t\t\t\t\tnv = overrideValue[key];\n\t\t\t\t}\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\treturn [key, null];\n\t\t\t})\n\t\t);\n\t\tflag = [\"fill\"];\n\t}\n\treturn { ...value, flag };\n};\n\nconst gapFill = (\n\tfillType,\n\t[duration, durationValue],\n\t{ overrideValue, dateFunction, flag } = {}\n) => (pairA, pairB) => {\n\t// Fill values forward.\n\n\tconst startDate = dayjs(pairA[0]);\n\tconst endDate = dayjs(pairB[0]);\n\tlet gapSize = Math.floor(\n\t\tdayjs(endDate).diff(startDate, duration) / durationValue\n\t);\n\tconst numEntries = gapSize - 1;\n\tconst startValue = pairA[1];\n\tconst endValue = pairB[1];\n\tconst newEntries = [];\n\tfor (let entryIndex = 0; entryIndex < numEntries; ++entryIndex) {\n\t\tlet adjustment = valueFiller(\n\t\t\t\tfillType,\n\t\t\t\t{ startValue, endValue, entryIndex, numEntries },\n\t\t\t\t{\n\t\t\t\t\toverrideValue,\n\t\t\t\t\tdateFunction,\n\t\t\t\t\tflag\n\t\t\t\t}\n\t\t\t),\n\t\t\tdate = dayjs(startDate)\n\t\t\t\t.add((entryIndex + 1) * durationValue, duration)\n\t\t\t\t.toDate();\n\t\tlet e = [date.valueOf(), Object.assign({}, adjustment, { date })];\n\t\tnewEntries.push(e);\n\t}\n\n\treturn newEntries;\n};\n\n// Basic Fill Functions\nconst averageMonthlyMap = df =>\n\tnew Map(\n\t\tdf\n\t\t\t.group(\"month\")\n\t\t\t.select(group => ({\n\t\t\t\tmonth: group.first().date.month(),\n\t\t\t\tvalue: group\n\t\t\t\t\t.getSeries(\"value\")\n\t\t\t\t\t.where(v => v)\n\t\t\t\t\t.average()\n\t\t\t}))\n\t\t\t.toArray()\n\t\t\t.map(({ month, value }) => [month, value])\n\t);\nconst fillMonthlyByMap = monthMap => row => monthMap.get(row.date.month());\n\nconst pad = (df, { validOnly = true, series = \"value\" } = {}) => row => {\n\tlet values = df\n\t\t.before(row.date.toDate())\n\t\t.getSeries(series)\n\t\t.where(v => v);\n\tlet value = values.count() > 0 ? values.last() : 0;\n\t// console.log(row.date.toDate(), value);\n\treturn value;\n};\nconst annualAverage = (\n\tdf,\n\t{ validOnly = true, series = \"value\", years = 3, defaultValue } = {}\n) => row => {\n\tdf = df.subset([\"date\", series]).before(row.date.toDate());\n\tlet values = df\n\t\t.where(r => r.date.year(row.date.year()).isSame(row.date))\n\t\t.after(row.date.subtract(years, \"year\"))\n\t\t.getSeries(series)\n\t\t.where(v => v)\n\t\t.bake();\n\n\tlet value;\n\tif (values.count() < years) {\n\t\tvalue = values\n\t\t\t.appendPair([\n\t\t\t\tnull,\n\t\t\t\tdf\n\t\t\t\t\t.getSeries(series)\n\t\t\t\t\t.where(v => v)\n\t\t\t\t\t.average()\n\t\t\t])\n\t\t\t.average();\n\t} else {\n\t\tvalue = values.average();\n\t}\n\treturn value;\n};\nexport {\n\tgapExists,\n\tgapFill,\n\taverageMonthlyMap,\n\tfillMonthlyByMap,\n\tpad,\n\tannualAverage\n};\n","// Source: https://www.itl.nist.gov/div898/handbook/eda/section3/eda35h3.htm\n// https://vsp.pnnl.gov/help/Vsample/Rosners_Outlier_Test.htm\n// https://www.itl.nist.gov/div898/handbook/prc/section1/prc16.htm\n// https://www.math.ucla.edu/~tom/distributions/KolSmir2.html?\nimport { DataFrame } from \"data-forge\";\nimport {\n  sampleStandardDeviation,\n  mean as _mean,\n  max,\n  median as _median,\n  medianAbsoluteDeviation,\n  quantile\n} from \"simple-statistics\";\nimport { Studentt } from \"distributions\";\nimport dayjs from \"dayjs\";\n\nfunction rval(df) {\n  let values = df.deflate(row => row.x).toArray();\n  let std = sampleStandardDeviation(values);\n  let mean = _mean(values);\n  if (std === 0) {\n    let ndf = df.generateSeries({ ares: row => 0 });\n    return { R: 0, std, mean, df: ndf };\n  }\n  let ndf = new DataFrame({\n    values: values.map(x => ({\n      x,\n      ares: Math.abs(x - mean) / std\n    }))\n  });\n  let R = max(ndf.deflate(row => row.ares).toArray());\n  return { R, df: ndf, std, mean };\n}\n\nfunction pValue(n, i, alpha) {\n  let p = 1 - alpha / (2 * (n - i + 1));\n  return p;\n}\nfunction tValue(p, degreeOfFreedom) {\n  let qt = new Studentt(degreeOfFreedom);\n  let t = qt.inv(p);\n  return t;\n}\n//\nfunction lambdaTest(n, i, alpha) {\n  let p = pValue(n, i, alpha);\n  let df = n - i - 1;\n  let t = tValue(p, df);\n  let lambda =\n    (t * (n - i)) /\n    Math.sqrt((n - i - 1 + Math.pow(t, 2)) * (n - i + 1));\n  return { lambda, p, t };\n}\nfunction rosnerTest(dataset = [], k = 10, alpha = 0.05) {\n  let dataframe = new DataFrame({\n    values: dataset.map(x => ({ x }))\n  });\n  let n = dataframe.getSeries(\"x\").count();\n  let newdf;\n  let i = 1;\n  let outliers = [];\n  let trip = false;\n  while (i <= k) {\n    let pair = {};\n    let s = Date.now();\n    if (i === 1) {\n      let { R, df, mean, std } = rval(dataframe);\n      newdf = df.where(row => row.ares !== R);\n      pair = Object.assign({}, pair, {\n        mean,\n        std,\n        Value: df\n          .where(row => row.ares === R)\n          .getSeries(\"x\")\n          .first(),\n        R\n      });\n    } else {\n      let { R, df, mean, std } = rval(newdf);\n      newdf = df.where(row => row.ares !== R);\n      pair = Object.assign({}, pair, {\n        mean,\n        std,\n        Value: df\n          .where(row => row.ares === R)\n          .getSeries(\"x\")\n          .first(),\n        R\n      });\n    }\n    let { lambda, p, t } = lambdaTest(n, i, alpha);\n    pair = Object.assign({}, pair, { lambda });\n    outliers.push(pair);\n    if (trip && pair.R > pair.lambda) trip = false;\n    if (pair.R === 0) break;\n    if (pair.R < pair.lambda) {\n      if (trip) {\n        break;\n      } else {\n        trip = true;\n      }\n    }\n    i++;\n  }\n  outliers = new DataFrame(outliers)\n    .generateSeries({\n      outlier: row => row.R > row.lambda\n    })\n    .takeWhile(row => row.outlier);\n  let outlierValues = outliers\n    .where(row => row.Value > 0)\n    .deflate(row => row.Value);\n  let thresholds = {\n    lower: 0,\n    upper:\n      outlierValues.count() > 0 ? outlierValues.min() : Infinity\n  };\n  return {\n    outliers,\n    thresholds,\n    iterations: i\n  };\n}\nconst modz = (value, mad, median) => {\n  return (0.6745 * (value - median)) / mad;\n};\nfunction modifiedZScoreTest(values) {\n  let median = _median(values);\n  let mad = medianAbsoluteDeviation(values);\n  values = values\n    .sort((a, b) => b - a)\n    .filter(v => v > 0)\n    .map(v => [v, modz(v, mad, median)]);\n  let outliers = values.filter(\n    ([v, modz]) => Math.abs(modz) >= 3.5\n  );\n  let upper = Math.min(\n    ...[Infinity, ...outliers.map(v => v[0])]\n  );\n  // let score,\n  // \tvalue,\n  // \tthreshold = Infinity,\n  // \tindex = 0;\n  // do {\n  // \tvalue = values[index];\n  // \tscore = modz(value, mad, median);\n  // \tif (Math.abs(score) >= 3.5) threshold = value;\n  // } while (score >= 3.5);\n  return { thresholds: { upper, lower: 0 } };\n}\nfunction boxPlotTest(values) {\n  let q1 = quantile(values, 0.25);\n  let q3 = quantile(values, 0.75);\n  let iqr = q3 - q1;\n  return {\n    thresholds: {\n      lowerInner: q1 - 1.5 * iqr,\n      upperInner: q1 - 3 * iqr,\n      lowerOuter: q3 + 1.5 * iqr,\n      upperOuter: q3 + 3 * iqr\n    }\n  };\n}\nfunction calculateOutlierThresholds(\n  df,\n  { k, filterZeros = true } = {}\n) {\n  let values = df\n    .where(\n      row =>\n        row.flag === null ||\n        row.flag === undefined ||\n        Array.isArray(row.flag)\n    )\n    .where(row => !isNaN(row.value) && row.value !== null)\n    .getSeries(\"value\")\n    .bake();\n  if (filterZeros) values = values.where(value => value > 0);\n  if (!k) {\n    k =\n      values.count() < 1000\n        ? Math.floor(values.count() * 0.15)\n        : Math.min(...[1000, Math.floor(values.count() * 0.02)]);\n  }\n  if (values.count < 5) return {};\n  let { outliers, threshold } = rosnerTest(values.toArray(), k);\n  return { outliers, threshold };\n}\n\nfunction zeroCheck(df, threshold = 2) {\n  let zeroGroups = df\n    .variableWindow((a, b) => {\n      return a.value === b.value && a.value === 0;\n    })\n    .where(window => window.getIndex().count() >= threshold);\n  let zeroSummary = zeroGroups\n    .select(window => ({\n      start: window.first().date,\n      end: window.last().date,\n      count: window.count()\n    }))\n    .inflate(); // Series -> dataframe.\n  // .toArray()\n  return { zeroSummary, zeroGroups };\n}\n\nfunction zeroReplacement(df, threshold) {\n  let { zeroGroups } = zeroCheck(df, threshold);\n  zeroGroups.forEach(dff => {\n    dff = dff.transformSeries({\n      value: value => null,\n      flag: value => [\"zero\"]\n    });\n    df = DataFrame.merge([df, dff]);\n  });\n  return df;\n}\nfunction isOutlier(value, { lower, upper }) {\n  if (value < lower || value >= upper) {\n    return true;\n  }\n  return false;\n}\nfunction validMean(df) {\n  let values = df\n    .getSeries(\"value\")\n    .where(value => typeof value === \"number\");\n  return values.average();\n}\nfunction validMonthlyMeanMap(df) {\n  let dateComparison = row =>\n    dayjs(row.date)\n      .startOf(\"month\")\n      .month();\n\n  df = df\n    .where(row => typeof row.value === \"number\")\n    .groupBy(dateComparison)\n    .select(group => ({\n      month: new Date(group.first().date).getMonth(),\n      value: group.deflate(row => row.value).average()\n    }));\n  return new Map(\n    df.toArray().map(({ month, value }) => [month, value])\n  );\n}\n\nfunction quality(df) {\n  let count = df.getIndex().count();\n  let valid = df\n    .getSeries(\"flag\")\n    .where(\n      value =>\n        value === null ||\n        (Array.isArray(value) && value.length === 0)\n    )\n    .count();\n  let missing = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"missing\") !== -1)\n    .count();\n  let dirty = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"clean\") !== -1)\n    .count();\n  let zerod = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"zero\") !== -1)\n    .count();\n  let breakdown = {\n    valid: valid / count,\n    missing: missing / count,\n    invalid: (dirty + zerod) / count\n  };\n  let report = {\n    accuracy: (1 - dirty / count) * 4,\n    completeness: 4 * breakdown.valid,\n    consistency: 4 * ((count - missing - zerod) / count)\n  };\n  return { breakdown, report, count };\n}\n\nexport {\n  rosnerTest,\n  modifiedZScoreTest,\n  boxPlotTest,\n  calculateOutlierThresholds,\n  zeroReplacement,\n  isOutlier,\n  validMean,\n  validMonthlyMeanMap,\n  quality\n};\n","import dayjs from \"dayjs\";\nexport const annualScale = (start, end) =>\n\t365 / dayjs(end).diff(dayjs(start), \"day\");\nexport const calculateChange = (baseline, value) =>\n\t(value - baseline) / baseline;\n","import dayjs from \"dayjs\";\nimport dataForge from \"data-forge\";\nimport { msToInterval, intervalToMS } from \"./lib/Timeseries.interval\";\nimport isEqual from \"lodash/isEqual\";\nimport has from \"lodash/has\";\nimport get from \"lodash/get\";\nimport fromPairs from \"lodash/fromPairs\";\nimport {\n\tgapExists,\n\tgapFill,\n\taverageMonthlyMap,\n\tfillMonthlyByMap,\n\tpad,\n\tannualAverage\n} from \"./lib/Timeseries.fill\";\nimport {\n\tckmeans,\n\tmax,\n\tmedianAbsoluteDeviation,\n\tquantile\n} from \"simple-statistics\";\n\nimport {\n\trosnerTest,\n\tboxPlotTest,\n\tmodifiedZScoreTest\n} from \"./lib/Timeseries.statistics\";\nimport { annualScale, calculateChange } from \"./lib/misc\";\nimport { zeroCheck } from \"./lib/Timeseries.zero\";\n\nexport default Timeseries;\n// Fill Options\nexport { averageMonthlyMap, fillMonthlyByMap, pad, annualAverage };\nfunction Timeseries(data, options = {}) {\n\t// const { msIndex } = options;\n\tif (data instanceof Timeseries) {\n\t\treturn data;\n\t}\n\tif (data instanceof dataForge.DataFrame) {\n\t\tdata = data.toArray();\n\t}\n\n\tdata = data\n\t\t.map(({ date, ...others }) => ({ date: dayjs(date), ...others }))\n\t\t.sort((a, b) => a.date.valueOf() - b.date.valueOf());\n\tlet config = {\n\t\t// columns: ['date', 'value', 'raw', 'flag'],\n\t\tvalues: data,\n\t\tindex: data.map(({ date }) => date.toDate()),\n\t\tconsiderAllRows: true\n\t};\n\tdataForge.DataFrame.call(this, config);\n}\n\nTimeseries.prototype = Object.create(dataForge.DataFrame.prototype);\nTimeseries.prototype.constructor = Timeseries;\n\n// Getters\nfunction getValueColumns() {\n\treturn this.detectTypes()\n\t\t.where(row => row.Type === \"number\")\n\t\t.distinct(row => row.Column)\n\t\t.getSeries(\"Column\")\n\t\t.toArray();\n}\nfunction interval() {\n\tconst computeInterval = window => window.last() - window.first();\n\tconst intervals = this.getIndex()\n\t\t.window(2)\n\t\t.select(computeInterval)\n\t\t.detectValues()\n\t\t.orderBy(row => -row.Frequency);\n\t// .orderBy(row => row.Value);\n\n\tlet val = intervals.first().Value;\n\n\treturn msToInterval(val);\n}\n\nfunction dateRange(unit, adjustment) {\n\tlet start = dayjs(this.first().date),\n\t\tend = dayjs(this.last().date);\n\tif (adjustment) {\n\t\tstart = start.startOf(adjustment);\n\t\tend = end.endOf(adjustment);\n\t}\n\treturn end.diff(start, unit);\n}\nTimeseries.prototype.getValueColumns = getValueColumns;\nTimeseries.prototype.getInterval = interval;\nTimeseries.prototype.getDateRange = dateRange;\n\n// Methods\nfunction calculateThresholdOptions({\n\tk,\n\tfilterZeros = true,\n\tfilterNegative = true\n} = {}) {\n\tlet noflags = this.where(\n\t\trow =>\n\t\t\trow.flag === null ||\n\t\t\trow.flag === undefined ||\n\t\t\t(Array.isArray(row.flag) && row.flag.length === 0)\n\t)\n\t\t.where(row => !isNaN(row.value) && row.value !== null)\n\t\t.getSeries(\"value\");\n\tif (filterZeros) noflags = noflags.where(value => value !== 0);\n\tif (filterNegative) noflags = noflags.where(value => value > 0);\n\tif (!k) {\n\t\tk =\n\t\t\tnoflags.count() < 1000\n\t\t\t\t? Math.floor(noflags.count() * 0.15)\n\t\t\t\t: Math.min(...[1000, Math.floor(noflags.count() * 0.02)]);\n\t}\n\tif (noflags.count() < 5) return {};\n\tlet { thresholds: esd } = rosnerTest(noflags.toArray(), k);\n\tlet { thresholds: box } = boxPlotTest(noflags.toArray());\n\tlet { thresholds: modz } = modifiedZScoreTest(noflags.toArray());\n\treturn { esd, box, modz };\n}\n\nfunction getBestThreshold() {\n\ttry {\n\t\tlet thresholds = this.calculateThresholdOptions();\n\t\tconst thresholdGroups = ckmeans(\n\t\t\t[\n\t\t\t\tget(thresholds, \"esd.upper\", null),\n\t\t\t\tget(thresholds, \"modz.upper\", null),\n\t\t\t\tget(thresholds, \"box.lowerOuter\", null),\n\t\t\t\tget(thresholds, \"box.upperOuter\", null)\n\t\t\t].filter(v => v),\n\t\t\t2\n\t\t);\n\t\tlet threshold_actual = max(\n\t\t\tthresholdGroups.reduce((a, b) => (a.length > b.length ? a : b))\n\t\t);\n\t\treturn threshold_actual;\n\t} catch (error) {\n\t\tconsole.error(error);\n\t\tthrow new Error(\"Cannot determine threshold\");\n\t}\n}\n\nfunction calculateStatistics(options = {}) {\n\tconst {\n\t\tcolumn = \"value\",\n\t\tfilterZeros = false,\n\t\tfilterNegative = true\n\t} = options;\n\tlet series = this.deflate(row => row[column]).where(value => !isNaN(value));\n\tif (filterNegative) series = series.where(value => value >= 0);\n\tif (filterZeros) series = series.where(value => value !== 0);\n\tlet median = series.median();\n\tlet mean = series.average();\n\tlet count = series.count();\n\tlet std = series.std();\n\tlet min = series.min();\n\tlet max = series.max();\n\tlet mad = medianAbsoluteDeviation(series.toArray());\n\tlet q1 = quantile(series.toArray(), 0.25);\n\tlet q3 = quantile(series.toArray(), 0.75);\n\tlet iqr = q3 - q1;\n\tlet stats = {\n\t\tmedian,\n\t\tmean,\n\t\tcount,\n\t\tstd,\n\t\tmin,\n\t\tmax,\n\t\tmad,\n\t\tq1,\n\t\tq3,\n\t\tiqr\n\t};\n\treturn stats;\n}\n\nTimeseries.prototype.calculateStatistics = calculateStatistics;\nTimeseries.prototype.calculateThresholdOptions = calculateThresholdOptions;\nTimeseries.prototype.getBestThreshold = getBestThreshold;\n\n// Chainable Methods\nfunction transformAllSeries(adjustmentFunction, { exclude }) {\n\tlet df = this;\n\tlet columns = (columns = df\n\t\t.detectTypes()\n\t\t.where(row => row.Type === \"number\")\n\t\t.distinct(row => row.Column)\n\t\t.getSeries(\"Column\")\n\t\t.toArray());\n\tif (exclude && Array.isArray(exclude)) {\n\t\tcolumns = columns.filter(col => exclude.indexOf(col) === -1);\n\t}\n\tcolumns.forEach(col => {\n\t\tdf = df.transformSeries({\n\t\t\t[col]: value => {\n\t\t\t\tif (isNaN(value)) {\n\t\t\t\t\treturn value;\n\t\t\t\t} else {\n\t\t\t\t\treturn adjustmentFunction(value);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\treturn df;\n}\n\nTimeseries.prototype.transformAllSeries = transformAllSeries;\n\nfunction reset() {\n\tlet df = this.withSeries({\n\t\tvalue: row =>\n\t\t\trow.flag && Array.isArray(row.flag) && row.flag.length > 0\n\t\t\t\t? row.raw\n\t\t\t\t: row.value\n\t})\n\t\t.subset([\"date\", \"value\"])\n\t\t.where(row => !isNaN(row.value) && row.value !== null);\n\treturn new Timeseries(df);\n}\nTimeseries.prototype.reset = reset;\n\nfunction group(interval, toArray) {\n\tif ([\"hour\", \"day\", \"month\", \"year\"].indexOf(interval) === -1)\n\t\tthrow new Error(\"interval type not supported\");\n\tlet dateComparison = row => dayjs(row.date).startOf(interval);\n\tlet groups = this.groupBy(dateComparison);\n\treturn groups;\n}\n\nTimeseries.prototype.group = group;\n\nfunction removeOutliers({ series = \"value\", lower, upper } = {}) {\n\tif (lower > upper) throw new Error(\"thresholds invalid\");\n\tlet outlierCheck = (value, lower, upper) => value < lower || value > upper;\n\n\tlet outliers = this.where(row => outlierCheck(row[series], lower, upper))\n\t\t.generateSeries({\n\t\t\traw: row => row[series],\n\t\t\tflag: ({ flag = [] }) => [\"outlier\", ...flag]\n\t\t})\n\t\t.transformSeries({\n\t\t\t[series]: value => null\n\t\t});\n\n\tlet merged = this.merge(outliers);\n\treturn new Timeseries(merged);\n}\n\nTimeseries.prototype.removeOutliers = removeOutliers;\nTimeseries.prototype.clean = removeOutliers;\n\nfunction downsample([duration, value], fillType = \"sum\") {\n\tif ([\"hour\", \"day\", \"month\", \"year\"].indexOf(duration) === -1)\n\t\tthrow new Error(\"interval type not supported\");\n\tif ([\"sum\", \"avg\", \"median\"].indexOf(fillType) === -1) {\n\t\tthrow new Error(\"aggregation type not suppported, only:\");\n\t}\n\tlet dateComparison = row => row.date.startOf(duration);\n\tlet valueColumns = this.getValueColumns();\n\tif (value) {\n\t\tdateComparison = row => row.date.startOf(duration).add(value, duration);\n\t}\n\tlet df = this.groupBy(dateComparison)\n\t\t.select(group => {\n\t\t\tconst date = group.first().date.startOf(duration);\n\t\t\treturn {\n\t\t\t\tdate,\n\t\t\t\t...fromPairs([\n\t\t\t\t\t...valueColumns.map(col => {\n\t\t\t\t\t\tlet value;\n\t\t\t\t\t\tswitch (fillType) {\n\t\t\t\t\t\t\tcase \"median\":\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.median();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"avg\":\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.average();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t// sum\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.sum();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn [col, value];\n\t\t\t\t\t}),\n\t\t\t\t\t...group\n\t\t\t\t\t\t.getColumnNames()\n\t\t\t\t\t\t.filter(col => col !== \"date\")\n\t\t\t\t\t\t.filter(col => valueColumns.indexOf(col) === -1)\n\t\t\t\t\t\t.map(col => {\n\t\t\t\t\t\t\tlet value = group\n\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t.distinct()\n\t\t\t\t\t\t\t\t.toArray();\n\t\t\t\t\t\t\tif (value.length === 1) value = value[0];\n\t\t\t\t\t\t\treturn [col, value];\n\t\t\t\t\t\t})\n\t\t\t\t])\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => dayjs(row.date).toDate());\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.downsample = downsample;\n\nfunction upsample([duration, value], fillType = \"avg\") {\n\t// Dont use this b/c it has the raw and flag values\n\tlet df = this.fillGaps(\n\t\tgapExists([duration, value]),\n\t\tgapFill(fillType, [duration, value])\n\t);\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.upsample = upsample;\n\nfunction populate(value, type = \"avg\") {\n\tlet v;\n\tswitch (type) {\n\t\tcase \"fill\":\n\t\t\tv = value;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tv = value / this.count();\n\t\t\tbreak;\n\t}\n\tlet df = this.generateSeries({ value: row => v });\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.populate = populate;\n\nfunction reduceToValue(columnNames) {\n\tfunction chooseValue(row, columnNames = []) {\n\t\tlet values = columnNames.map(n => row[n]).filter(v => v);\n\t\treturn values[0] || 0;\n\t}\n\tlet df = this.generateSeries({\n\t\tvalue: row => chooseValue(row, columnNames)\n\t}).subset([\"date\", \"value\"]);\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.reduceToValue = reduceToValue;\n\n// Baseline Functions\n\nfunction rollingPercentChange(col = \"value\") {\n\tlet df = this;\n\tlet delta = df.withSeries(\"delta\", full.getSeries(\"value\").percentChange());\n\treturn new Timeseries(delta);\n}\n\nTimeseries.prototype.rollingPercentChange = rollingPercentChange;\nfunction baselinePercentChange(baselineDF) {\n\t// Only Change in Year\n\tif (!(baselineDF instanceof Timeseries))\n\t\tbaselineDF = new Timeseries(baselineDF);\n\tlet dfwb;\n\tif (baselineDF.count() > 1) {\n\t\tlet interval = this.getInterval();\n\t\tlet baselineInterval = baselineDF.interval;\n\t\tif (!isEqual(interval, baselineInterval)) {\n\t\t\tconsole.error(interval, baselineInterval);\n\t\t\tthrow new Error(\"baseline and data intervals do not match\");\n\t\t}\n\t\tlet indexer;\n\t\tswitch (interval[0]) {\n\t\t\tcase \"day\":\n\t\t\t\tindexer = date => `${date.month()}-${date.date()}`;\n\t\t\t\tbreak;\n\t\t\tcase \"month\":\n\t\t\t\tindexer = date => date.month();\n\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tindexer = date => 0;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tlet indexedBaseline = baselineDF.withIndex(row => indexer(row.date));\n\t\tlet getBaselineValue = index => {\n\t\t\tlet at = indexedBaseline.at(index);\n\t\t\tif (at && has(at, \"value\")) {\n\t\t\t\treturn at.value;\n\t\t\t} else {\n\t\t\t\treturn indexedBaseline.getSeries(\"value\").average();\n\t\t\t}\n\t\t};\n\t\tdfwb = this.generateSeries({\n\t\t\tbaseline: row => getBaselineValue(indexer(row.date))\n\t\t});\n\t} else {\n\t\tdfwb = this.generateSeries({\n\t\t\tbaseline: row => baselineDF.first().value\n\t\t});\n\t}\n\tdfwb = dfwb.generateSeries({\n\t\tdelta: row => calculateChange(row.baseline, row.value)\n\t});\n\treturn new Timeseries(dfwb);\n}\n\nTimeseries.prototype.baselinePercentChange = baselinePercentChange;\nTimeseries.prototype.addBaselineDelta = baselinePercentChange;\n\nfunction annualIntensity(normalizeValue = 1) {\n\tlet interval = this.getInterval();\n\tlet annual = this.groupBy(row => row.date.year())\n\t\t.select(group => {\n\t\t\tlet startDate = group.first().date;\n\t\t\tlet endDate = group\n\t\t\t\t.last()\n\t\t\t\t.date.add(interval[1] || 1, interval[0] || \"month\");\n\t\t\tlet scaler = annualScale(startDate, endDate);\n\t\t\treturn {\n\t\t\t\tstartDate,\n\t\t\t\tendDate,\n\t\t\t\t...fromPairs(\n\t\t\t\t\tthis.getValueColumns().map(col => [\n\t\t\t\t\t\tcol,\n\t\t\t\t\t\t(group\n\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t.where(v => v)\n\t\t\t\t\t\t\t.sum() *\n\t\t\t\t\t\t\tscaler) /\n\t\t\t\t\t\t\tnormalizeValue\n\t\t\t\t\t])\n\t\t\t\t)\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.renameSeries({ startDate: \"date\" })\n\t\t.dropSeries(\"endDate\");\n\treturn new Timeseries(annual);\n}\n\nTimeseries.prototype.annualIntensity = annualIntensity;\n\n// Fill Functions\n\nfunction fillMissing() {\n\tlet df = this;\n\tlet startDate = df.first().date.toDate(),\n\t\tendDate = df.last().date.toDate();\n\tlet interval = df.getInterval();\n\tlet bdf = Timeseries.blank(startDate, endDate, interval, \"missing\").withIndex(\n\t\trow => row.date.valueOf()\n\t);\n\tlet m = bdf.merge(df.withIndex(row => row.date.valueOf())).generateSeries({\n\t\tflag: row =>\n\t\t\trow.value === null || row.value === undefined ? row.flag : undefined\n\t});\n\tm = new Timeseries(m);\n\treturn m;\n}\nTimeseries.prototype.fillMissing = fillMissing;\n\nfunction fillNull({ series = \"value\", value, callback }) {\n\tconst seriesCheck = row => row[series] === null || row[series] === undefined;\n\tif (callback) {\n\t\tlet df = this.generateSeries({\n\t\t\tflag: row =>\n\t\t\t\tseriesCheck(row) ? [\"fill\", ...(row.flag || [])] : row.flag,\n\t\t\t[series]: row => (seriesCheck(row) ? callback(row) : row[series])\n\t\t});\n\t\treturn new Timeseries(df);\n\t} else if (value) {\n\t\tlet df = this.generateSeries({\n\t\t\tflag: row => (seriesCheck(row) ? [\"fill\", ...(row.flag || [])] : row.flag)\n\t\t}).transformSeries({\n\t\t\t[series]: currentValue =>\n\t\t\t\tcurrentValue === null || currentValue === undefined\n\t\t\t\t\t? value\n\t\t\t\t\t: currentValue\n\t\t});\n\t\treturn new Timeseries(df);\n\t} else {\n\t\treturn this;\n\t}\n}\nTimeseries.prototype.fillNull = fillNull;\n\nfunction zeroReplacement(threshold) {\n\tlet df = this;\n\tlet { zeroGroups } = zeroCheck(df, threshold);\n\tlet dfs = zeroGroups.toArray().map((zdf, i) => {\n\t\tzdf = zdf\n\t\t\t.transformSeries({\n\t\t\t\tvalue: () => null,\n\t\t\t\traw: () => 0,\n\t\t\t\tflag: value => [\"zero\", ...(value || [])]\n\t\t\t})\n\t\t\t.withIndex(row => new Date(row.date).valueOf());\n\t\treturn zdf;\n\t});\n\tlet merged = df.withIndex(row => row.date.valueOf()).merge(...dfs);\n\treturn new Timeseries(merged);\n}\nTimeseries.prototype.zeroReplacement = zeroReplacement;\n\nfunction monthlyWithQual() {\n\tlet interval = this.getInterval();\n\tlet ms = intervalToMS(interval);\n\tconst duration = \"month\";\n\tlet dateComparison = row =>\n\t\tdayjs(row.date)\n\t\t\t.startOf()\n\t\t\t.valueOf();\n\tlet ts = this.groupBy(dateComparison)\n\t\t.select(group => {\n\t\t\tconst date = dayjs(group.first().date)\n\t\t\t\t.startOf(duration)\n\t\t\t\t.toDate();\n\t\t\tlet fullCount = Math.floor(\n\t\t\t\tdayjs(date)\n\t\t\t\t\t.endOf(\"month\")\n\t\t\t\t\t.diff(dayjs(date), \"millisecond\") / ms\n\t\t\t);\n\t\t\tlet days = new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\n\t\t\tlet count = group\n\t\t\t\t.getSeries(\"value\")\n\t\t\t\t.where(v => v && v !== 0)\n\t\t\t\t.toArray().length;\n\t\t\tlet value = group\n\t\t\t\t.getSeries(\"value\")\n\t\t\t\t.where(v => !isNaN(v))\n\t\t\t\t.sum();\n\t\t\treturn {\n\t\t\t\tdate,\n\t\t\t\tvalue: isNaN(value) ? 0 : value,\n\t\t\t\tcount,\n\t\t\t\tfullCount,\n\t\t\t\tscore: count / fullCount\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => row.date.toDate());\n\treturn new Timeseries(ts);\n}\nTimeseries.prototype.monthlyWithQual = monthlyWithQual;\n\nfunction threeYearAverage(date, series = \"value\", defaultValue) {\n\tdate = dayjs(date);\n\tif (!defaultValue)\n\t\tdefaultValue = this.getSeries(series)\n\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t.average();\n\n\t// let months = df\n\t// \t.before(date.valueOf())\n\t// \t.where(row => dayjs(row.date).month() === date.month())\n\t// \t.where(row => row.score > 0.9)\n\t// \t.tail(3);\n\tlet months = this.before(date.toDate())\n\t\t.where(row => row.date.month() === date.month())\n\t\t.orderBy(row => dayjs(row.date))\n\t\t.tail(3);\n\t// .where(row => row.score > 0.9);\n\tif (months.count() > 0) {\n\t\tlet val = months\n\t\t\t.getSeries(series)\n\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t.average();\n\t\treturn val;\n\t} else {\n\t\treturn defaultValue;\n\t}\n}\nTimeseries.prototype.threeYearAverage = threeYearAverage;\n\nfunction averageFill() {\n\tlet df = this;\n\tlet avg = df\n\t\t// .where(row => row.score ?row.score >= 0.9)\n\t\t.getSeries(\"value\")\n\t\t.where(v => !isNaN(v) && v !== null)\n\t\t.average();\n\tlet monthlyAvg = df\n\t\t.generateSeries({\n\t\t\trollingAverage: row => df.threeYearAverage(row.date, \"value\", avg)\n\t\t})\n\t\t.generateSeries({\n\t\t\tflag: row => (row.value ? row.flag : [\"filled\", ...(row.flag || [])])\n\t\t})\n\t\t.generateSeries({\n\t\t\tvalue: row => (row.value ? row.value : row.rollingAverage)\n\t\t})\n\t\t.dropSeries([\"rollingAverage\"]);\n\treturn new Timeseries(monthlyAvg);\n}\n\nTimeseries.prototype.averageFill = averageFill;\n\n// Static Methods\nfunction blank(startDate, endDate, [duration, value = 1], flag) {\n\tif ([\"minute\", \"hour\", \"day\", \"month\", \"year\"].indexOf(duration) < 0) {\n\t\tconsole.error(interval);\n\t\tthrow new Error(\"interval type not supported\");\n\t}\n\tstartDate = dayjs(startDate);\n\tendDate = dayjs(endDate);\n\tlet dates = [startDate];\n\tlet interval = intervalToMS([duration, value]);\n\twhile (dates[dates.length - 1].valueOf() < endDate.valueOf()) {\n\t\tdates.push(dayjs(dates[dates.length - 1]).add(value, duration));\n\t}\n\tlet df = new Timeseries(dates.map(date => ({ date })));\n\n\tif (flag) {\n\t\tdf = new Timeseries(\n\t\t\tdf.generateSeries({\n\t\t\t\tflag: row => [flag]\n\t\t\t})\n\t\t);\n\t}\n\n\treturn df;\n}\nTimeseries.blank = blank;\nfunction aggregate(dataframes) {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df => new Timeseries(df));\n\tconst valueColumns = new Set(\n\t\tdataframes.map(df => df.getValueColumns()).reduce((a, b) => a.concat(b), [])\n\t);\n\tconst concatenated = dataForge.DataFrame.concat(dataframes)\n\t\t.groupBy(row => row.date)\n\t\t.select(group => {\n\t\t\tconst date = group.first().date;\n\t\t\tlet o = { date };\n\t\t\tvalueColumns.forEach(c => (o[c] = group.deflate(row => row[c]).sum()));\n\t\t\tgroup\n\t\t\t\t.getColumnNames()\n\t\t\t\t.filter(col => col !== \"date\")\n\t\t\t\t.filter(col => valueColumns.has(col) === -1)\n\t\t\t\t.forEach(col => {\n\t\t\t\t\tlet value = group\n\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t.distinct()\n\t\t\t\t\t\t.toArray();\n\t\t\t\t\tif (value.length === 1) value = value[0];\n\t\t\t\t\to[col] = value;\n\t\t\t\t\treturn;\n\t\t\t\t});\n\t\t\treturn o;\n\t\t})\n\t\t.inflate();\n\t// .toArray();\n\n\treturn new Timeseries(concatenated);\n}\nTimeseries.aggregate = aggregate;\nTimeseries.concat = dataframes => {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df =>\n\t\tnew Timeseries(df).withIndex(row => row.date.valueOf())\n\t);\n\tlet df = dataForge.DataFrame.concat(dataframes);\n\treturn new Timeseries(df);\n};\nTimeseries.merge = dataframes => {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df =>\n\t\tnew Timeseries(df).withIndex(row => row.date.valueOf())\n\t);\n\tlet df = dataForge.DataFrame.merge(dataframes);\n\treturn new Timeseries(df);\n};\n","import { DataFrame } from \"data-forge\";\n\nconst zerogrouping = dataframe => {\n  // group sequential\n  let df = dataframe.variableWindow(\n    (a, b) => a.value === b.value\n  );\n};\n\nfunction zeroCheck(df, threshold = 2) {\n  let zeroGroups = df\n    .variableWindow((a, b) => {\n      return a.value === b.value && a.value === 0;\n    })\n    .where(window => window.getIndex().count() >= threshold);\n  let zeroSummary = zeroGroups\n    .select(window => ({\n      start: window.first().date,\n      end: window.last().date,\n      count: window.count()\n    }))\n    .inflate(); // Series -> dataframe.\n  // .toArray()\n  return { zeroSummary, zeroGroups };\n}\n\nfunction zeroReplacement(df, threshold) {\n  let { zeroGroups } = zeroCheck(df, threshold);\n  let dfs = zeroGroups.toArray().map(zdf => {\n    zdf = zdf\n      .transformSeries({\n        value: () => null,\n        raw: 0,\n        flag: value => [\"zero\", ...(value || [])]\n      })\n      .withIndex(row => new Date(row.date).valueOf());\n    return zdf;\n  });\n  let merged = DataFrame.merge([df, ...dfs]);\n\n  return merged;\n}\nexport { zerogrouping, zeroReplacement, zeroCheck };\n"],"names":["intervalToMS","unit","value","start","dayjs","add","diff","valueFiller","fillType","startValue","endValue","entryIndex","numEntries","overrideValue","dateFunction","date","flag","indexOf","Error","fromPairs","toPairs","map","key","rval","df","values","deflate","row","x","toArray","std","sampleStandardDeviation","mean","_mean","ndf","generateSeries","ares","R","DataFrame","Math","abs","max","lambdaTest","n","i","alpha","p","pValue","t","degreeOfFreedom","Studentt","inv","tValue","lambda","sqrt","pow","modz","mad","median","modifiedZScoreTest","_median","medianAbsoluteDeviation","outliers","sort","a","b","filter","v","thresholds","upper","min","Infinity","lower","calculateChange","baseline","Timeseries","data","options","dataForge","config","others","valueOf","index","toDate","considerAllRows","call","this","removeOutliers","series","where","outlierCheck","raw","transformSeries","merge","baselinePercentChange","baselineDF","dfwb","count","indexer","interval","getInterval","baselineInterval","isEqual","console","error","month","indexedBaseline","withIndex","at","has","getSeries","average","first","delta","prototype","Object","create","constructor","getValueColumns","detectTypes","Type","distinct","Column","ms","end","getIndex","window","select","last","detectValues","orderBy","Frequency","Value","ceil","getDateRange","adjustment","startOf","endOf","calculateStatistics","column","filterZeros","filterNegative","isNaN","q1","quantile","q3","iqr","calculateThresholdOptions","k","noflags","Array","isArray","length","floor","esd","dataset","newdf","dataframe","trip","pair","assign","push","outlierValues","outlier","takeWhile","iterations","rosnerTest","box","lowerInner","upperInner","lowerOuter","upperOuter","getBestThreshold","thresholdGroups","ckmeans","get","reduce","transformAllSeries","adjustmentFunction","exclude","columns","col","forEach","reset","withSeries","subset","group","groupBy","clean","downsample","duration","dateComparison","valueColumns","sum","getColumnNames","inflate","upsample","fillGaps","durationValue","pairA","pairB","startDate","gapExists","endDate","newEntries","e","gapFill","populate","type","reduceToValue","columnNames","chooseValue","rollingPercentChange","full","percentChange","addBaselineDelta","annualIntensity","normalizeValue","year","scaler","_this","renameSeries","dropSeries","fillMissing","m","blank","undefined","fillNull","callback","seriesCheck","currentValue","zeroReplacement","threshold","dfs","zeroGroups","variableWindow","zeroSummary","zeroCheck","zdf","Date","monthlyWithQual","fullCount","getFullYear","getMonth","getDate","score","threeYearAverage","defaultValue","months","before","tail","averageFill","avg","rollingAverage","dates","aggregate","dataframes","Set","concat","o","c","years","r","isSame","after","subtract","bake","appendPair","Map","monthMap"],"mappings":"8oCAEA,IAeMA,EAAe,gBAAEC,OAAMC,OACxBC,EAAQC,IAEZ,OADUA,IAAQC,IAAIH,EAAOD,GAClBK,KAAKH,ICLXI,EAAc,SACnBC,WAWIN,EAVFO,IAAAA,WAAYC,IAAAA,SAAUC,IAAAA,WAAYC,IAAAA,WAClCC,IAAAA,cAAeC,IAAAA,aAAcC,IAAAA,KAAMC,IAAAA,KAErC,IAGQ,IAFP,CAAC,MAAO,cAAe,UAAW,eAAgB,SAASC,QAC1DT,GAGD,UAAUU,MAAM,2BA6DjB,MA1DiB,QAAbV,GACHN,EAAQiB,EACPC,EAAQX,GAAYY,KAAI,gBAAEC,OACzB,MAAO,CAACA,EAAKb,EAAWa,QAI1BN,EAAOA,GAAc,CAAC,OAAQ,QACP,gBAAbR,GACVN,EAAQiB,EACPC,EAAQX,GAAYY,KAAI,gBAAEC,OAKzB,MAAO,CAACA,EAHPb,EAAWa,IACVX,EAAa,KACXD,EAASY,GAAOb,EAAWa,KAASV,EAAa,SAKvDI,EAAOA,GAAc,CAAC,OAAQR,IACP,YAAbA,GACVN,EAAQiB,EACPC,EAAQX,GAAYY,KAAI,gBAAEC,OAEzB,MAAO,CAACA,GADEb,EAAWa,GAAOZ,EAASY,IAAQV,OAK/CI,EAAOA,GAAc,CAAC,OAAQR,IACP,iBAAbA,GAA+BM,GACzCZ,EAAQiB,EACPC,EAAQX,GAAYY,KAAI,YAEvB,MAAO,MADEP,EAAaC,QAIxBC,EAAOA,GAAc,CAAC,OAAQR,IACP,UAAbA,GACVN,EAAQiB,EACPC,EAAQX,GAAYY,KAAI,YAAEC,IAAAA,OAOzB,MAAO,CAACA,EALqB,iBAAlBT,EACLA,EAEAA,EAAcS,QAKtBN,EAAOA,GAAc,CAAC,OAAQR,KAE9BN,EAAQiB,EACPC,EAAQX,GAAYY,KAAI,YACvB,MAAO,MAAM,UAGfL,EAAO,CAAC,cAEGd,GAAOc,KAAAA,KCtEpB,SAASO,EAAKC,GACZ,IAAIC,EAASD,EAAGE,SAAQ,SAAAC,UAAOA,EAAIC,KAAGC,UAClCC,EAAMC,0BAAwBN,GAC9BO,EAAOC,OAAMR,GACjB,GAAY,IAARK,EAAW,CACb,IAAII,EAAMV,EAAGW,eAAe,CAAEC,KAAM,SAAAT,eACpC,MAAO,CAAEU,EAAG,EAAGP,IAAAA,EAAKE,KAAAA,EAAMR,GAAIU,GAEhC,IAAIA,EAAM,IAAII,YAAU,CACtBb,OAAQA,EAAOJ,KAAI,SAAAO,SAAM,CACvBA,EAAAA,EACAQ,KAAMG,KAAKC,IAAIZ,EAAII,GAAQF,QAI/B,MAAO,CAAEO,EADDI,MAAIP,EAAIR,SAAQ,SAAAC,UAAOA,EAAIS,QAAMP,WAC7BL,GAAIU,EAAKJ,IAAAA,EAAKE,KAAAA,GAa5B,SAASU,EAAWC,EAAGC,EAAGC,GACxB,IAAIC,EAXN,SAAgBH,EAAGC,EAAGC,GAEpB,OADQ,EAAIA,GAAS,GAAKF,EAAIC,EAAI,IAU1BG,CAAOJ,EAAGC,EAAGC,GAEjBG,EATN,SAAgBF,EAAGG,GAGjB,OAFS,IAAIC,WAASD,GACXE,IAAIL,GAOPM,CAAON,EADNH,EAAIC,EAAI,GAKjB,MAAO,CAAES,OAFNL,GAAKL,EAAIC,GACVL,KAAKe,MAAMX,EAAIC,EAAI,EAAIL,KAAKgB,IAAIP,EAAG,KAAOL,EAAIC,EAAI,IACnCE,EAAAA,EAAGE,EAAAA,GAwEtB,IAAMQ,EAAO,SAACtD,EAAOuD,EAAKC,GACxB,aAAkBxD,EAAQwD,GAAWD,GAEvC,SAASE,EAAmBlC,GAC1B,IAAIiC,EAASE,SAAQnC,GACjBgC,EAAMI,0BAAwBpC,GAK9BqC,GAJJrC,EAASA,EACNsC,MAAK,SAACC,EAAGC,UAAMA,EAAID,KACnBE,QAAO,SAAAC,UAAKA,EAAI,KAChB9C,KAAI,SAAA8C,SAAK,CAACA,EAAGX,EAAKW,EAAGV,EAAKC,QACPQ,QACpB,mBAAe3B,KAAKC,WAAa,OAcnC,MAAO,CAAE4B,WAAY,CAAEC,MAZX9B,KAAK+B,UAAL/B,MACNgC,iBAAaT,EAASzC,KAAI,SAAA8C,UAAKA,EAAE,QAWTK,MAAO,QCjJ1BC,EAAkB,SAACC,EAAUxE,UACxCA,EAAQwE,GAAYA,GC6BtB,SAASC,EAAWC,EAAMC,MAErBD,aAAgBD,EACnB,OAAOC,EAEJA,aAAgBE,EAAUxC,YAC7BsC,EAAOA,EAAK/C,WAMb,IAAIkD,EAAS,CAEZtD,OALDmD,EAAOA,EACLvD,KAAI,gBAAGN,IAAAA,KAASiE,2JAAgBjE,KAAMX,EAAMW,IAAUiE,MACtDjB,MAAK,SAACC,EAAGC,UAAMD,EAAEjD,KAAKkE,UAAYhB,EAAElD,KAAKkE,aAI1CC,MAAON,EAAKvD,KAAI,qBAAGN,KAAgBoE,YACnCC,iBAAiB,GAElBN,EAAUxC,UAAU+C,KAAKC,KAAMP,GAqLhC,SAASQ,wBAAoD,SAAnCC,OAAAA,aAAS,UAAShB,IAAAA,MAAOH,IAAAA,MAClD,GAAIG,EAAQH,EAAO,UAAUnD,MAAM,sBACnC,IAEI4C,EAAWwB,KAAKG,OAAM,SAAA9D,UAFP,SAACzB,EAAOsE,EAAOH,UAAUnE,EAAQsE,GAAStE,EAAQmE,EAEpCqB,CAAa/D,EAAI6D,GAAShB,EAAOH,MAChElC,eAAe,CACfwD,IAAK,SAAAhE,UAAOA,EAAI6D,IAChBxE,KAAM,oBAAGA,YAAiB,6BAAV,SAEhB4E,wBACCJ,GAAS,SAAAtF,oBAIZ,WAAWyE,EADEW,KAAKO,MAAM/B,IAwHzB,SAASgC,EAAsBC,GAI9B,IAAIC,EACJ,GAHMD,aAAsBpB,IAC3BoB,EAAa,IAAIpB,EAAWoB,IAEzBA,EAAWE,QAAU,EAAG,CAC3B,IAMIC,EANAC,EAAWb,KAAKc,cAChBC,EAAmBN,EAAWI,SAClC,IAAKG,EAAQH,EAAUE,GAEtB,MADAE,QAAQC,MAAML,EAAUE,OACdnF,MAAM,4CAGjB,OAAQiF,EAAS,IAChB,IAAK,MACJD,EAAU,SAAAnF,UAAWA,EAAK0F,YAAW1F,EAAKA,QAC1C,MACD,IAAK,QACJmF,EAAU,SAAAnF,UAAQA,EAAK0F,SAEvB,MACD,QACCP,EAAU,SAAAnF,aAIZ,IAAI2F,EAAkBX,EAAWY,WAAU,SAAAhF,UAAOuE,EAAQvE,EAAIZ,SAS9DiF,EAAOV,KAAKnD,eAAe,CAC1BuC,SAAU,SAAA/C,UATYuD,EASYgB,EAAQvE,EAAIZ,OAR1C6F,EAAKF,EAAgBE,GAAG1B,KAClB2B,EAAID,EAAI,SACVA,EAAG1G,MAEHwG,EAAgBI,UAAU,SAASC,UALrB,IAAA7B,EAClB0B,UAWLZ,EAAOV,KAAKnD,eAAe,CAC1BuC,SAAU,SAAA/C,UAAOoE,EAAWiB,QAAQ9G,SAMtC,WAAWyE,EAHXqB,EAAOA,EAAK7D,eAAe,CAC1B8E,MAAO,SAAAtF,UAAO8C,EAAgB9C,EAAI+C,SAAU/C,EAAIzB,YAnWlDyE,EAAWuC,UAAYC,OAAOC,OAAOtC,EAAUxC,UAAU4E,YACpCG,YAAc1C,EAiCnCA,EAAWuC,UAAUI,gBA9BrB,WACC,YAAYC,cACV9B,OAAM,SAAA9D,SAAoB,WAAbA,EAAI6F,QACjBC,UAAS,SAAA9F,UAAOA,EAAI+F,UACpBZ,UAAU,UACVjF,WA0BH8C,EAAWuC,UAAUd,YAxBrB,WACC,IJhEoBuB,EAChBxH,EACAyH,EIwEJ,OJ1EoBD,EIiEFrC,KAAKuC,WACrBC,OAAO,GACPC,QAHsB,SAAAD,UAAUA,EAAOE,OAASF,EAAOd,WAIvDiB,eACAC,SAAQ,SAAAvG,UAAQA,EAAIwG,aAGFnB,QAAQoB,MJvExBjI,EAAQC,KACRwH,EAAMxH,IAAQC,IAAIsH,IACdrH,KAAKH,EAAO,SAAS,IAAS,GAC9B,CAAC,OAAQoC,KAAK8F,KAAKT,EAAItH,KAAKH,EAAO,QAAQ,KACxCyH,EAAItH,KAAKH,EAAO,OAAO,IAAS,GACnC,CAAC,QAASoC,KAAK8F,KAAKT,EAAItH,KAAKH,EAAO,SAAS,KAC1CyH,EAAItH,KAAKH,EAAO,QAAQ,IAAS,GACpC,CAAC,MAAOoC,KAAK8F,KAAKT,EAAItH,KAAKH,EAAO,OAAO,KACtCyH,EAAItH,KAAKH,EAAO,UAAU,IAAS,GACtC,CAAC,OAAQoC,KAAK8F,KAAKT,EAAItH,KAAKH,EAAO,QAAQ,KAE3C,CAAC,SAAUyH,EAAItH,KAAKH,EAAO,YI4EpCwE,EAAWuC,UAAUoB,aAXrB,SAAmBrI,EAAMsI,GACxB,IAAIpI,EAAQC,EAAMkF,KAAK0B,QAAQjG,MAC9B6G,EAAMxH,EAAMkF,KAAK0C,OAAOjH,MAKzB,OAJIwH,IACHpI,EAAQA,EAAMqI,QAAQD,GACtBX,EAAMA,EAAIa,MAAMF,IAEVX,EAAItH,KAAKH,EAAOF,IA2FxB0E,EAAWuC,UAAUwB,oBAlCrB,SAA6B7D,YAAAA,IAAAA,EAAU,UAKlCA,EAHH8D,OAAAA,aAAS,YAGN9D,EAFH+D,YAAAA,kBAEG/D,EADHgE,eAAAA,gBAEGrD,EAASF,KAAK5D,SAAQ,SAAAC,UAAOA,EAAIgH,MAASlD,OAAM,SAAAvF,UAAU4I,MAAM5I,MAChE2I,IAAgBrD,EAASA,EAAOC,OAAM,SAAAvF,UAASA,GAAS,MACxD0I,IAAapD,EAASA,EAAOC,OAAM,SAAAvF,UAAmB,IAAVA,MAChD,IAAIwD,EAAS8B,EAAO9B,SAChB1B,EAAOwD,EAAOuB,UACdd,EAAQT,EAAOS,QACfnE,EAAM0D,EAAO1D,MACbwC,EAAMkB,EAAOlB,MACb7B,EAAM+C,EAAO/C,MACbgB,EAAMI,0BAAwB2B,EAAO3D,WACrCkH,EAAKC,WAASxD,EAAO3D,UAAW,KAChCoH,EAAKD,WAASxD,EAAO3D,UAAW,KAcpC,MAZY,CACX6B,OAAAA,EACA1B,KAAAA,EACAiE,MAAAA,EACAnE,IAAAA,EACAwC,IAAAA,EACA7B,IAAAA,EACAgB,IAAAA,EACAsF,GAAAA,EACAE,GAAAA,EACAC,IAXSD,EAAKF,IAiBhBpE,EAAWuC,UAAUiC,0BArFrB,gBFyDqB1H,EACfsH,EACAE,EACAC,eExDF,KAHHE,IAAAA,MACAR,YAAAA,oBACAC,eAAAA,gBAEIQ,EAAU/D,KAAKG,OAClB,SAAA9D,UACCA,MAAAA,EAAIX,MAEHsI,MAAMC,QAAQ5H,EAAIX,OAA6B,IAApBW,EAAIX,KAAKwI,UAErC/D,OAAM,SAAA9D,UAAQmH,MAAMnH,EAAIzB,QAAwB,OAAdyB,EAAIzB,SACtC4G,UAAU,SASZ,OARI8B,IAAaS,EAAUA,EAAQ5D,OAAM,SAAAvF,UAAmB,IAAVA,MAC9C2I,IAAgBQ,EAAUA,EAAQ5D,OAAM,SAAAvF,UAASA,EAAQ,MACxDkJ,IACJA,EACCC,EAAQpD,QAAU,IACf1D,KAAKkH,MAAwB,IAAlBJ,EAAQpD,SACnB1D,KAAK+B,UAAL/B,KAAY,CAAC,IAAMA,KAAKkH,MAAwB,IAAlBJ,EAAQpD,YAEvCoD,EAAQpD,QAAU,EAAU,GAIzB,CAAEyD,IFjEV,SAAoBC,EAAcP,EAAQvG,YAAtB8G,IAAAA,EAAU,aAAIP,IAAAA,EAAI,aAAIvG,IAAAA,EAAQ,KAShD,IARA,IAII+G,EAJAC,EAAY,IAAIvH,YAAU,CAC5Bb,OAAQkI,EAAQtI,KAAI,SAAAO,SAAM,CAAEA,EAAAA,QAE1Be,EAAIkH,EAAU/C,UAAU,KAAKb,QAE7BrD,EAAI,EACJkB,EAAW,GACXgG,GAAO,EACJlH,GAAKwG,GAAG,CACb,IAAIW,EAAO,GAED,IAANnH,mBACyBrB,EAAKsI,GAA1BxH,IAAAA,EAAGb,IAAAA,GAAIQ,IAAAA,KAAMF,IAAAA,IACnB8H,EAAQpI,EAAGiE,OAAM,SAAA9D,UAAOA,EAAIS,OAASC,KACrC0H,EAAO5C,OAAO6C,OAAO,GAAID,EAAM,CAC7B/H,KAAAA,EACAF,IAAAA,EACAsG,MAAO5G,EACJiE,OAAM,SAAA9D,UAAOA,EAAIS,OAASC,KAC1ByE,UAAU,KACVE,QACH3E,EAAAA,wBAGyBd,EAAKqI,GAA1BvH,IAAAA,EAAGb,IAAAA,GAAIQ,IAAAA,KAAMF,IAAAA,IACnB8H,EAAQpI,EAAGiE,OAAM,SAAA9D,UAAOA,EAAIS,OAASC,KACrC0H,EAAO5C,OAAO6C,OAAO,GAAID,EAAM,CAC7B/H,KAAAA,EACAF,IAAAA,EACAsG,MAAO5G,EACJiE,OAAM,SAAA9D,UAAOA,EAAIS,OAASC,KAC1ByE,UAAU,KACVE,QACH3E,EAAAA,OAzBS,MA4BUK,EAAWC,EAAGC,EAAGC,GAIxC,GAHAkH,EAAO5C,OAAO6C,OAAO,GAAID,EAAM,CAAE1G,SAD3BA,SAENS,EAASmG,KAAKF,GACVD,GAAQC,EAAK1H,EAAI0H,EAAK1G,SAAQyG,GAAO,GAC1B,IAAXC,EAAK1H,EAAS,MAClB,GAAI0H,EAAK1H,EAAI0H,EAAK1G,OAAQ,CACxB,GAAIyG,EACF,MAEAA,GAAO,EAGXlH,IAOF,IAAIsH,GALJpG,EAAW,IAAIxB,YAAUwB,GACtB3B,eAAe,CACdgI,QAAS,SAAAxI,UAAOA,EAAIU,EAAIV,EAAI0B,UAE7B+G,WAAU,SAAAzI,UAAOA,EAAIwI,YAErB1E,OAAM,SAAA9D,UAAOA,EAAIyG,MAAQ,KACzB1G,SAAQ,SAAAC,UAAOA,EAAIyG,SAMtB,MAAO,CACLtE,SAAAA,EACAM,WAPe,CACfI,MAAO,EACPH,MACE6F,EAAcjE,QAAU,EAAIiE,EAAc5F,MAAQC,UAKpD8F,WAAYzH,GELW0H,CAAWjB,EAAQxH,UAAWuH,GAAlDhF,WAGQmG,KFgCM9I,EElCkB4H,EAAQxH,UFmCzCkH,EAAKC,WAASvH,EAAQ,KACtBwH,EAAKD,WAASvH,EAAQ,KAEnB,CACL2C,WAAY,CACVoG,WAAYzB,EAAK,KAHjBG,EAAMD,EAAKF,GAIX0B,WAAY1B,EAAK,EAAIG,EACrBwB,WAAYzB,EAAK,IAAMC,EACvByB,WAAY1B,EAAK,EAAIC,KE3CpB9E,WAEaZ,KADQG,EAAmB0F,EAAQxH,WAAhDuC,aA8DPO,EAAWuC,UAAU0D,iBA1DrB,WACC,IACC,IAAIxG,EAAakB,KAAK6D,4BAChB0B,EAAkBC,UACvB,CACCC,EAAI3G,EAAY,YAAa,MAC7B2G,EAAI3G,EAAY,aAAc,MAC9B2G,EAAI3G,EAAY,iBAAkB,MAClC2G,EAAI3G,EAAY,iBAAkB,OACjCF,QAAO,SAAAC,UAAKA,KACd,GAKD,OAHuB1B,MACtBoI,EAAgBG,QAAO,SAAChH,EAAGC,UAAOD,EAAEwF,OAASvF,EAAEuF,OAASxF,EAAIC,MAG5D,MAAOuC,GAER,MADAD,QAAQC,MAAMA,OACJtF,MAAM,gCAoElByD,EAAWuC,UAAU+D,mBAzBrB,SAA4BC,SAAsBC,IAAAA,QAC7C3J,EAAK8D,KACL8F,EAAWA,EAAU5J,EACvB+F,cACA9B,OAAM,SAAA9D,SAAoB,WAAbA,EAAI6F,QACjBC,UAAS,SAAA9F,UAAOA,EAAI+F,UACpBZ,UAAU,UACVjF,UAeF,OAdIsJ,GAAW7B,MAAMC,QAAQ4B,KAC5BC,EAAUA,EAAQlH,QAAO,SAAAmH,UAAiC,IAA1BF,EAAQlK,QAAQoK,OAEjDD,EAAQE,SAAQ,SAAAD,SACf7J,EAAKA,EAAGoE,wBACNyF,GAAM,SAAAnL,GACN,OAAI4I,MAAM5I,GACFA,EAEAgL,EAAmBhL,WAKvBsB,GAgBRmD,EAAWuC,UAAUqE,MAXrB,WASC,WAAW5G,EARFW,KAAKkG,WAAW,CACxBtL,MAAO,SAAAyB,UACNA,EAAIX,MAAQsI,MAAMC,QAAQ5H,EAAIX,OAASW,EAAIX,KAAKwI,OAAS,EACtD7H,EAAIgE,IACJhE,EAAIzB,SAEPuL,OAAO,CAAC,OAAQ,UAChBhG,OAAM,SAAA9D,UAAQmH,MAAMnH,EAAIzB,QAAwB,OAAdyB,EAAIzB,WAazCyE,EAAWuC,UAAUwE,MARrB,SAAevF,EAAUtE,GACxB,IAA4D,IAAxD,CAAC,OAAQ,MAAO,QAAS,QAAQZ,QAAQkF,GAC5C,UAAUjF,MAAM,+BAGjB,OADaoE,KAAKqG,SADG,SAAAhK,UAAOvB,EAAMuB,EAAIZ,MAAMyH,QAAQrC,OAwBrDxB,EAAWuC,UAAU3B,eAAiBA,EACtCZ,EAAWuC,UAAU0E,MAAQrG,EAgE7BZ,EAAWuC,UAAU2E,WA9DrB,WAAuCrL,OAAlBsL,OAAU5L,OAC9B,YADsCM,IAAAA,EAAW,QACW,IAAxD,CAAC,OAAQ,MAAO,QAAS,QAAQS,QAAQ6K,GAC5C,UAAU5K,MAAM,+BACjB,IAAoD,IAAhD,CAAC,MAAO,MAAO,UAAUD,QAAQT,GACpC,UAAUU,MAAM,0CAEjB,IAAI6K,EAAiB,SAAApK,UAAOA,EAAIZ,KAAKyH,QAAQsD,IACzCE,EAAe1G,KAAKgC,kBAoDxB,OAnDIpH,IACH6L,EAAiB,SAAApK,UAAOA,EAAIZ,KAAKyH,QAAQsD,GAAUzL,IAAIH,EAAO4L,SAkDpDnH,EAhDFW,KAAKqG,QAAQI,GACpBhE,QAAO,SAAA2D,GAEP,UACC3K,KAFY2K,EAAM1E,QAAQjG,KAAKyH,QAAQsD,IAGpC3K,YACC6K,EAAa3K,KAAI,SAAAgK,GACnB,IAAInL,EACJ,OAAQM,GACP,IAAK,SACJN,EAAQwL,EACNhK,SAAQ,SAAAC,UAAOA,EAAI0J,MACnB5F,OAAM,SAAAtB,UAAM2E,MAAM3E,IAAY,OAANA,KACxBT,SACF,MACD,IAAK,MACJxD,EAAQwL,EACNhK,SAAQ,SAAAC,UAAOA,EAAI0J,MACnB5F,OAAM,SAAAtB,UAAM2E,MAAM3E,IAAY,OAANA,KACxB4C,UACF,MACD,QAEC7G,EAAQwL,EACNhK,SAAQ,SAAAC,UAAOA,EAAI0J,MACnB5F,OAAM,SAAAtB,UAAM2E,MAAM3E,IAAY,OAANA,KACxB8H,MAGJ,MAAO,CAACZ,EAAKnL,MAEXwL,EACDQ,iBACAhI,QAAO,SAAAmH,SAAe,SAARA,KACdnH,QAAO,SAAAmH,UAAsC,IAA/BW,EAAa/K,QAAQoK,MACnChK,KAAI,SAAAgK,GACJ,IAAInL,EAAQwL,EACVhK,SAAQ,SAAAC,UAAOA,EAAI0J,MACnB5D,WACA5F,UAEF,OADqB,IAAjB3B,EAAMsJ,SAActJ,EAAQA,EAAM,IAC/B,CAACmL,EAAKnL,YAKjBiM,UACAxF,WAAU,SAAAhF,UAAOvB,EAAMuB,EAAIZ,MAAMoE,cAepCR,EAAWuC,UAAUkF,SATrB,WAAqC5L,OAAlBsL,OAAU5L,OAM5B,gBANoCM,IAAAA,EAAW,WAMpCmE,EAJFW,KAAK+G,SH1TG,gBAAEP,cAAUQ,aAAgB,oBAAQC,EAAOC,GAC5D,IAAMC,EAAYF,EAAM,GAMxB,OAJchK,KAAKkH,MAClBrJ,EAFeoM,EAAM,IAENlM,KAAKmM,EAAWX,GAAU,GAAQQ,GAGpC,GGoTbI,CAAU,CAACZ,EAAU5L,IHtOP,SACfM,WACCsL,OAAUQ,SAC6B,GAAtCzL,IAAAA,cAAeC,IAAAA,aAAcE,IAAAA,qBAC1BuL,EAAOC,GAYZ,IATA,IAAMC,EAAYrM,EAAMmM,EAAM,IACxBI,EAAUvM,EAAMoM,EAAM,IAItB5L,EAHQ2B,KAAKkH,MAClBrJ,EAAMuM,GAASrM,KAAKmM,EAAWX,GAAYQ,GAEf,EACvB7L,EAAa8L,EAAM,GACnB7L,EAAW8L,EAAM,GACjBI,EAAa,GACVjM,EAAa,EAAGA,EAAaC,IAAcD,EAAY,CAC/D,IAAI4H,EAAahI,EACfC,EACA,CAAEC,WAAAA,EAAYC,SAAAA,EAAUC,WAAAA,EAAYC,WAAAA,GACpC,CACCC,cAAAA,EACAC,aAAAA,EACAE,KAAAA,IAGFD,EAAOX,EAAMqM,GACXpM,KAAKM,EAAa,GAAK2L,EAAeR,GACtC3G,SACC0H,EAAI,CAAC9L,EAAKkE,UAAWkC,OAAO6C,OAAO,GAAIzB,EAAY,CAAExH,KAAAA,KACzD6L,EAAW3C,KAAK4C,GAGjB,OAAOD,GGsMNE,CAAQtM,EAAU,CAACsL,EAAU5L,OAqB/ByE,EAAWuC,UAAU6F,SAdrB,SAAkB7M,EAAO8M,GACxB,IAAI7I,EACJ,gBAFwB6I,IAAAA,EAAO,OAEvBA,GACP,IAAK,OACJ7I,EAAIjE,EACJ,MACD,QACCiE,EAAIjE,EAAQoF,KAAKW,QAInB,WAAWtB,EADFW,KAAKnD,eAAe,CAAEjC,MAAO,SAAAyB,UAAOwC,OAiB9CQ,EAAWuC,UAAU+F,cAXrB,SAAuBC,GAQtB,WAAWvI,EAHFW,KAAKnD,eAAe,CAC5BjC,MAAO,SAAAyB,UALR,SAAqBA,EAAKuL,GAEzB,gBAFyBA,IAAAA,EAAc,IAC1BA,EAAY7L,KAAI,SAAAsB,UAAKhB,EAAIgB,MAAIuB,QAAO,SAAAC,UAAKA,KACxC,IAAM,EAGNgJ,CAAYxL,EAAKuL,MAC7BzB,OAAO,CAAC,OAAQ,YAcpB9G,EAAWuC,UAAUkG,qBANrB,SAA8B/B,GAG7B,WAAW1G,EAFFW,KACMkG,WAAW,QAAS6B,KAAKvG,UAAU,SAASwG,mBAsD5D3I,EAAWuC,UAAUpB,sBAAwBA,EAC7CnB,EAAWuC,UAAUqG,iBAAmBzH,EAiCxCnB,EAAWuC,UAAUsG,gBA/BrB,SAAyBC,uBAAAA,IAAAA,EAAiB,GACzC,IAAItH,EAAWb,KAAKc,cA2BpB,WAAWzB,EA1BEW,KAAKqG,SAAQ,SAAAhK,UAAOA,EAAIZ,KAAK2M,UACxC3F,QAAO,SAAA2D,GACP,IDpayBvL,ECoarBsM,EAAYf,EAAM1E,QAAQjG,KAC1B4L,EAAUjB,EACZ1D,OACAjH,KAAKV,IAAI8F,EAAS,IAAM,EAAGA,EAAS,IAAM,SACxCwH,GDxaqBxN,ECwaAsM,MDvarBrM,ECuagCuM,GDvarBrM,KAAKF,EAAMD,GAAQ,QCwalC,UACCsM,UAAAA,EACAE,QAAAA,GACGxL,EACFyM,EAAKtG,kBAAkBjG,KAAI,SAAAgK,SAAO,CACjCA,EACCK,EACChK,SAAQ,SAAAC,UAAOA,EAAI0J,MACnB5F,OAAM,SAAAtB,UAAKA,KACX8H,MACD0B,EACAF,WAKJtB,UACA0B,aAAa,CAAEpB,UAAW,SAC1BqB,WAAW,aAuBdnJ,EAAWuC,UAAU6G,YAfrB,WACC,IACItB,EADKnH,KACU0B,QAAQjG,KAAKoE,SAC/BwH,EAFQrH,KAEK0C,OAAOjH,KAAKoE,SACtBgB,EAHKb,KAGSc,cAId4H,EAHMrJ,EAAWsJ,MAAMxB,EAAWE,EAASxG,EAAU,WAAWQ,WACnE,SAAAhF,UAAOA,EAAIZ,KAAKkE,aAELY,MAPHP,KAOYqB,WAAU,SAAAhF,UAAOA,EAAIZ,KAAKkE,cAAY9C,eAAe,CACzEnB,KAAM,SAAAW,UACLA,MAAAA,EAAIzB,MAA4CyB,EAAIX,UAAOkN,KAG7D,OADI,IAAIvJ,EAAWqJ,IA4BpBrJ,EAAWuC,UAAUiH,SAvBrB,wBAAoB3I,OAAAA,aAAS,UAAStF,IAAAA,MAAOkO,IAAAA,SACtCC,EAAc,SAAA1M,UAAOA,MAAAA,EAAI6D,IAC/B,OAAI4I,MAMQzJ,EALFW,KAAKnD,oBACbnB,KAAM,SAAAW,UACL0M,EAAY1M,IAAQ,eAAYA,EAAIX,MAAQ,IAAOW,EAAIX,QACvDwE,GAAS,SAAA7D,UAAQ0M,EAAY1M,GAAOyM,EAASzM,GAAOA,EAAI6D,SAGhDtF,MASCyE,EARFW,KAAKnD,eAAe,CAC5BnB,KAAM,SAAAW,UAAQ0M,EAAY1M,IAAQ,eAAYA,EAAIX,MAAQ,IAAOW,EAAIX,QACnE4E,wBACDJ,GAAS,SAAA8I,UACTA,MAAAA,EACGpO,EACAoO,cAyBP3J,EAAWuC,UAAUqH,gBAhBrB,SAAyBC,SAGpBC,WCxecjN,EAAIgN,YAAAA,IAAAA,EAAY,GACjC,IAAIE,EAAalN,EACdmN,gBAAe,SAAC3K,EAAGC,GAClB,OAAOD,EAAE9D,QAAU+D,EAAE/D,OAAqB,IAAZ8D,EAAE9D,SAEjCuF,OAAM,SAAAqC,UAAUA,EAAOD,WAAW5B,SAAWuI,KAShD,MAAO,CAAEI,YARSF,EACf3G,QAAO,SAAAD,SAAW,CACjB3H,MAAO2H,EAAOd,QAAQjG,KACtB6G,IAAKE,EAAOE,OAAOjH,KACnBkF,MAAO6B,EAAO7B,YAEfkG,UAEmBuC,WAAAA,GDydFG,CADZvJ,KAC0BkJ,GAA7BE,WACe7M,UAAUR,KAAI,SAACyN,EAAKlM,GAQxC,OAPMkM,EACJlJ,gBAAgB,CAChB1F,MAAO,wBACPyF,IAAK,qBACL3E,KAAM,SAAAd,UAAU,eAAYA,GAAS,OAErCyG,WAAU,SAAAhF,cAAWoN,KAAKpN,EAAIZ,MAAMkE,gBAIvC,WAAWN,KAbFW,KAYOqB,WAAU,SAAAhF,UAAOA,EAAIZ,KAAKkE,cAAWY,cAAS4I,KA4C/D9J,EAAWuC,UAAU8H,gBAvCrB,WACC,IAAI7I,EAAWb,KAAKc,cAChBuB,EAAK3H,EAAamG,GAmCtB,WAAWxB,EA7BFW,KAAKqG,SAJO,SAAAhK,UACpBvB,EAAMuB,EAAIZ,MACRyH,UACAvD,aAED8C,QAAO,SAAA2D,GACP,IAAM3K,EAAOX,EAAMsL,EAAM1E,QAAQjG,MAC/ByH,QARa,SASbrD,SACE8J,EAAY1M,KAAKkH,MACpBrJ,EAAMW,GACJ0H,MAAM,SACNnI,KAAKF,EAAMW,GAAO,eAAiB4G,GAGlC1B,GADO,IAAI8I,KAAKhO,EAAKmO,cAAenO,EAAKoO,WAAa,EAAG,GAAGC,UACpD1D,EACV5E,UAAU,SACVrB,OAAM,SAAAtB,UAAKA,GAAW,IAANA,KAChBtC,UAAU2H,QACRtJ,EAAQwL,EACV5E,UAAU,SACVrB,OAAM,SAAAtB,UAAM2E,MAAM3E,MAClB8H,MACF,MAAO,CACNlL,KAAAA,EACAb,MAAO4I,MAAM5I,GAAS,EAAIA,EAC1B+F,MAAAA,EACAgJ,UAAAA,EACAI,MAAOpJ,EAAQgJ,MAGhB9C,UACAxF,WAAU,SAAAhF,UAAOA,EAAIZ,KAAKoE,cAgC7BR,EAAWuC,UAAUoI,iBA3BrB,SAA0BvO,EAAMyE,EAAkB+J,YAAlB/J,IAAAA,EAAS,SACxCzE,EAAOX,EAAMW,GACRwO,IACJA,EAAejK,KAAKwB,UAAUtB,GAC5BC,OAAM,SAAAtB,UAAM2E,MAAM3E,IAAY,OAANA,KACxB4C,WAOH,IAAIyI,EAASlK,KAAKmK,OAAO1O,EAAKoE,UAC5BM,OAAM,SAAA9D,UAAOA,EAAIZ,KAAK0F,UAAY1F,EAAK0F,WACvCyB,SAAQ,SAAAvG,UAAOvB,EAAMuB,EAAIZ,SACzB2O,KAAK,GAEP,OAAIF,EAAOvJ,QAAU,EACVuJ,EACR1I,UAAUtB,GACVC,OAAM,SAAAtB,UAAM2E,MAAM3E,IAAY,OAANA,KACxB4C,UAGKwI,GA0BT5K,EAAWuC,UAAUyI,YArBrB,WACC,IAAInO,EAAK8D,KACLsK,EAAMpO,EAERsF,UAAU,SACVrB,OAAM,SAAAtB,UAAM2E,MAAM3E,IAAY,OAANA,KACxB4C,UAYF,WAAWpC,EAXMnD,EACfW,eAAe,CACf0N,eAAgB,SAAAlO,UAAOH,EAAG8N,iBAAiB3N,EAAIZ,KAAM,QAAS6O,MAE9DzN,eAAe,CACfnB,KAAM,SAAAW,UAAQA,EAAIzB,MAAQyB,EAAIX,MAAQ,iBAAcW,EAAIX,MAAQ,OAEhEmB,eAAe,CACfjC,MAAO,SAAAyB,UAAQA,EAAIzB,MAAQyB,EAAIzB,MAAQyB,EAAIkO,kBAE3C/B,WAAW,CAAC,qBA+BfnJ,EAAWsJ,MAxBX,SAAexB,EAAWE,IAAgC3L,OAAtB8K,cAAU5L,aAAQ,IACrD,GAAI,CAAC,SAAU,OAAQ,MAAO,QAAS,QAAQe,QAAQ6K,GAAY,EAElE,MADAvF,QAAQC,MAAML,OACJjF,MAAM,+BAEjBuL,EAAYrM,EAAMqM,GAClBE,EAAUvM,EAAMuM,GAGhB,IAFA,IAAImD,EAAQ,CAACrD,GACTtG,EAAWnG,EAAa,CAAC8L,EAAU5L,IAChC4P,EAAMA,EAAMtG,OAAS,GAAGvE,UAAY0H,EAAQ1H,WAClD6K,EAAM7F,KAAK7J,EAAM0P,EAAMA,EAAMtG,OAAS,IAAInJ,IAAIH,EAAO4L,IAEtD,IAAItK,EAAK,IAAImD,EAAWmL,EAAMzO,KAAI,SAAAN,SAAS,CAAEA,KAAAA,OAU7C,OARIC,IACHQ,EAAK,IAAImD,EACRnD,EAAGW,eAAe,CACjBnB,KAAM,SAAAW,SAAO,CAACX,QAKVQ,GAmCRmD,EAAWoL,UAhCX,SAAmBC,GACb1G,MAAMC,QAAQyG,KAAaA,EAAa,CAACA,IAC9CA,EAAaA,EAAW3O,KAAI,SAAAG,cAAUmD,EAAWnD,MACjD,IAAMwK,EAAe,IAAIiE,IACxBD,EAAW3O,KAAI,SAAAG,UAAMA,EAAG8F,qBAAmB0D,QAAO,SAAChH,EAAGC,UAAMD,EAAEkM,OAAOjM,KAAI,KA0B1E,WAAWU,EAxBUG,EAAUxC,UAAU4N,OAAOF,GAC9CrE,SAAQ,SAAAhK,UAAOA,EAAIZ,QACnBgH,QAAO,SAAA2D,GACP,IACIyE,EAAI,CAAEpP,KADG2K,EAAM1E,QAAQjG,MAgB3B,OAdAiL,EAAaV,SAAQ,SAAA8E,UAAMD,EAAEC,GAAK1E,EAAMhK,SAAQ,SAAAC,UAAOA,EAAIyO,MAAInE,SAC/DP,EACEQ,iBACAhI,QAAO,SAAAmH,SAAe,SAARA,KACdnH,QAAO,SAAAmH,UAAkC,IAA3BW,EAAanF,IAAIwE,MAC/BC,SAAQ,SAAAD,GACR,IAAInL,EAAQwL,EACVhK,SAAQ,SAAAC,UAAOA,EAAI0J,MACnB5D,WACA5F,UACmB,IAAjB3B,EAAMsJ,SAActJ,EAAQA,EAAM,IACtCiQ,EAAE9E,GAAOnL,KAGJiQ,KAEPhE,YAMHxH,EAAWuL,OAAS,SAAAF,GAMnB,OALK1G,MAAMC,QAAQyG,KAAaA,EAAa,CAACA,IAC9CA,EAAaA,EAAW3O,KAAI,SAAAG,cACvBmD,EAAWnD,GAAImF,WAAU,SAAAhF,UAAOA,EAAIZ,KAAKkE,oBAGnCN,EADFG,EAAUxC,UAAU4N,OAAOF,KAGrCrL,EAAWkB,MAAQ,SAAAmK,GAMlB,OALK1G,MAAMC,QAAQyG,KAAaA,EAAa,CAACA,IAC9CA,EAAaA,EAAW3O,KAAI,SAAAG,cACvBmD,EAAWnD,GAAImF,WAAU,SAAAhF,UAAOA,EAAIZ,KAAKkE,oBAGnCN,EADFG,EAAUxC,UAAUuD,MAAMmK,qBH9gBd,SACrBxO,sBACkE,SAA9CgE,OAAAA,aAAS,cAAS6K,MAAAA,aAAQ,oBAC1C1O,GAEJ,IAAIF,GADJD,EAAKA,EAAGiK,OAAO,CAAC,OAAQjG,IAASiK,OAAO9N,EAAIZ,KAAKoE,WAE/CM,OAAM,SAAA6K,UAAKA,EAAEvP,KAAK2M,KAAK/L,EAAIZ,KAAK2M,QAAQ6C,OAAO5O,EAAIZ,SACnDyP,MAAM7O,EAAIZ,KAAK0P,SAASJ,EAAO,SAC/BvJ,UAAUtB,GACVC,OAAM,SAAAtB,UAAKA,KACXuM,OAgBF,OAbIjP,EAAOwE,QAAUoK,EACZ5O,EACNkP,WAAW,CACX,KACAnP,EACEsF,UAAUtB,GACVC,OAAM,SAAAtB,UAAKA,KACX4C,YAEFA,UAEMtF,EAAOsF,gCAjDS,SAAAvF,cACrBoP,IACHpP,EACEkK,MAAM,SACN3D,QAAO,SAAA2D,SAAU,CACjBjF,MAAOiF,EAAM1E,QAAQjG,KAAK0F,QAC1BvG,MAAOwL,EACL5E,UAAU,SACVrB,OAAM,SAAAtB,UAAKA,KACX4C,cAEFlF,UACAR,KAAI,kBAAsB,GAAnBoF,QAAOvG,2CAEO,SAAA2Q,mBAAYlP,UAAOkP,EAAS9F,IAAIpJ,EAAIZ,KAAK0F,iBAEtD,SAACjF,uBAA6C,MAArBgE,OAAAA,aAAS,0BAAmB7D,GAChE,IAAIF,EAASD,EACXiO,OAAO9N,EAAIZ,KAAKoE,UAChB2B,UAAUtB,GACVC,OAAM,SAAAtB,UAAKA,KAGb,OAFY1C,EAAOwE,QAAU,EAAIxE,EAAOuG,OAAS"}
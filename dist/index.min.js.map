{"version":3,"file":"index.min.js","sources":["../src/lib/Timeseries.interval.js","../src/lib/Timeseries.fill.js","../src/lib/Timeseries.statistics.js","../src/lib/misc.js","../src/index.js"],"sourcesContent":["import dayjs from \"dayjs\";\n\nconst msToInterval = ms => {\n\tlet start = dayjs();\n\tlet end = dayjs().add(ms);\n\tif (end.diff(start, \"month\", true) >= 11) {\n\t\treturn [\"year\", Math.ceil(end.diff(start, \"year\", true))];\n\t} else if (end.diff(start, \"day\", true) >= 28) {\n\t\treturn [\"month\", Math.ceil(end.diff(start, \"month\", true))];\n\t} else if (end.diff(start, \"hour\", true) >= 23) {\n\t\treturn [\"day\", Math.ceil(end.diff(start, \"day\", true))];\n\t} else if (end.diff(start, \"minute\", true) >= 55) {\n\t\treturn [\"hour\", Math.ceil(end.diff(start, \"hour\", true))];\n\t} else {\n\t\treturn [\"minute\", end.diff(start, \"minute\")];\n\t}\n};\nconst intervalToMS = ([unit, value]) => {\n\tlet start = dayjs();\n\tlet end = dayjs().add(value, unit);\n\treturn end.diff(start);\n};\nfunction calculateInterval(df, startDate, endDate) {\n\tif (!startDate) startDate = df.first.date;\n\tif (!endDate) endDate = df.last.date;\n\tfunction computeInterval(window) {\n\t\treturn window.last() - window.first();\n\t}\n\tconst intervals = df\n\t\t.between(startDate, endDate)\n\t\t.getIndex()\n\t\t.window(2)\n\t\t.select(computeInterval)\n\t\t.detectValues()\n\t\t.orderBy(row => row.Frequency);\n\n\tlet val = intervals.last().Value;\n\treturn msToInterval(val);\n}\nexport { msToInterval, intervalToMS, calculateInterval };\n","import dayjs from \"dayjs\";\nimport fromPairs from \"lodash/fromPairs\";\nimport toPairs from \"lodash/toPairs\";\nimport { mean } from \"simple-statistics\";\nconst gapExists = ([duration, durationValue = 1]) => (pairA, pairB) => {\n\tconst startDate = pairA[0];\n\tconst endDate = pairB[0];\n\tlet gapSize = Math.floor(\n\t\tdayjs(endDate).diff(startDate, duration, true) / durationValue\n\t);\n\n\tif (gapSize > 0) return true;\n\treturn false;\n};\n\nconst valueFiller = (\n\tfillType,\n\t{ startValue, endValue, entryIndex, numEntries },\n\t{ overrideValue, dateFunction, date, flag }\n) => {\n\tif (\n\t\t[\"pad\", \"interpolate\", \"average\", \"dateFunction\", \"value\"].indexOf(\n\t\t\tfillType\n\t\t) === -1\n\t) {\n\t\tthrow new Error(\"fill Type not supported\");\n\t}\n\tlet value;\n\tif (fillType === \"pad\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\treturn [key, startValue[key]];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", \"pad\"];\n\t} else if (fillType === \"interpolate\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv =\n\t\t\t\t\tstartValue[key] +\n\t\t\t\t\t(entryIndex + 1) *\n\t\t\t\t\t\t((endValue[key] - startValue[key]) / (numEntries + 1));\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"average\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv = (startValue[key] + endValue[key]) / numEntries;\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"dateFunction\" && dateFunction) {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv = dateFunction(date);\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"value\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv;\n\t\t\t\tif (typeof overrideValue === \"number\") {\n\t\t\t\t\tnv = overrideValue;\n\t\t\t\t} else {\n\t\t\t\t\tnv = overrideValue[key];\n\t\t\t\t}\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\treturn [key, null];\n\t\t\t})\n\t\t);\n\t\tflag = [\"fill\"];\n\t}\n\treturn { ...value, flag };\n};\n\nconst gapFill = (\n\tfillType,\n\t[duration, durationValue],\n\t{ overrideValue, dateFunction, flag } = {}\n) => (pairA, pairB) => {\n\t// Fill values forward.\n\n\tconst startDate = dayjs(pairA[0]);\n\tconst endDate = dayjs(pairB[0]);\n\tlet gapSize = Math.floor(\n\t\tdayjs(endDate).diff(startDate, duration) / durationValue\n\t);\n\tconst numEntries = gapSize - 1;\n\tconst startValue = pairA[1];\n\tconst endValue = pairB[1];\n\tconst newEntries = [];\n\tfor (let entryIndex = 0; entryIndex < numEntries; ++entryIndex) {\n\t\tlet adjustment = valueFiller(\n\t\t\t\tfillType,\n\t\t\t\t{ startValue, endValue, entryIndex, numEntries },\n\t\t\t\t{\n\t\t\t\t\toverrideValue,\n\t\t\t\t\tdateFunction,\n\t\t\t\t\tflag\n\t\t\t\t}\n\t\t\t),\n\t\t\tdate = dayjs(startDate)\n\t\t\t\t.add((entryIndex + 1) * durationValue, duration)\n\t\t\t\t.toDate();\n\t\tlet e = [date.valueOf(), Object.assign({}, adjustment, { date })];\n\t\tnewEntries.push(e);\n\t}\n\n\treturn newEntries;\n};\n\n// Basic Fill Functions\nconst averageMonthlyMap = df =>\n\tnew Map(\n\t\tdf\n\t\t\t.group(\"month\")\n\t\t\t.select(group => ({\n\t\t\t\tmonth: group.first().date.month(),\n\t\t\t\tvalue: group\n\t\t\t\t\t.getSeries(\"value\")\n\t\t\t\t\t.where(v => v)\n\t\t\t\t\t.average()\n\t\t\t}))\n\t\t\t.toArray()\n\t\t\t.map(({ month, value }) => [month, value])\n\t);\nconst annualMonthlyAverageMap = df =>\n\tnew Map(\n\t\tdf\n\t\t\t.groupBy(row => row.date.year())\n\t\t\t.select(group => {\n\t\t\t\tconst date = group.first().date.startOf(\"year\");\n\t\t\t\tlet ts = new Timeseries(group).downsample([\"month\", 1], \"avg\");\n\t\t\t\tlet avg = ts.getSeries(\"value\").average();\n\t\t\t\tlet map = averageMonthlyMap(ts);\n\t\t\t\tmap.set(\"avg\", avg);\n\t\t\t\treturn [date.year(), map];\n\t\t\t})\n\t\t\t.toArray()\n\t);\nconst monthlyRollingAverageMap = (\n\tdf,\n\t{ years = 3, series = \"value\", aggregator = \"average\" } = {}\n) => {\n\tlet months = df\n\t\t.groupBy(row => row.date.startOf(\"month\").toDate())\n\t\t.select(group => {\n\t\t\tlet date = group.first().date.startOf(\"month\");\n\t\t\tlet value = group\n\t\t\t\t.getSeries(series)\n\t\t\t\t.where(v => v)\n\t\t\t\t.average();\n\t\t\treturn { date, value };\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => row.date.toDate())\n\t\t.bake();\n\tlet data = months\n\t\t.groupBy(row => row.date.month())\n\t\t.select(group => {\n\t\t\tlet values = new Map(\n\t\t\t\tgroup\n\t\t\t\t\t.rollingWindow(years)\n\t\t\t\t\t.select(window => [\n\t\t\t\t\t\twindow.last().date.year(),\n\t\t\t\t\t\twindow.getSeries(series).average()\n\t\t\t\t\t])\n\t\t\t);\n\t\t\tgroup\n\t\t\t\t.where(row => !values.has(row.date.year()))\n\t\t\t\t.forEach(row => {\n\t\t\t\t\tlet value =\n\t\t\t\t\t\tmonths.before(row.date.toDate()).count() > 0\n\t\t\t\t\t\t\t? months.before(row.date.toDate()).last()[series]\n\t\t\t\t\t\t\t: months.getSeries(series).average();\n\t\t\t\t\tvalues.set(row.date.year(), value);\n\t\t\t\t});\n\n\t\t\tlet month = group.first().date.month();\n\t\t\treturn [month, values];\n\t\t})\n\t\t.toArray();\n\treturn new Map(data);\n};\n\nconst fillMonthlyByMap = monthMap => row => monthMap.get(row.date.month());\nconst fillMonthlyBAnnualyMap = annualMonthlyMap => row => {\n\tlet month = row.date.month(),\n\t\tyear = row.date.year();\n\tif (annualMonthlyMap.has(month)) {\n\t\tif (annualMonthlyMap.has(month)) {\n\t\t\treturn  annualMonthlyMap.get(month).get(year);\n\t\t} else {\n\t\t\treturn mean([...annualMonthlyMap.get(month).values()]);\n\t\t}\n\t} else {\n\t\treturn mean(\n\t\t\t[...annualMonthlyMap.values()].map(m =>\n\t\t\t\t[...m.values()].reduce((a, b) => a.concat(b), [])\n\t\t\t)\n\t\t);\n\t}\n};\n\nconst pad = (df, { validOnly = true, series = \"value\" } = {}) => row => {\n\tlet values = df\n\t\t.before(row.date.toDate())\n\t\t.getSeries(series)\n\t\t.where(v => v);\n\tlet value = values.count() > 0 ? values.last() : 0;\n\t// console.log(row.date.toDate(), value);\n\treturn value;\n};\nconst annualAverage = (\n\tdf,\n\t{ validOnly = true, series = \"value\", years = 3, defaultValue } = {}\n) => row => {\n\tlet subset = df\n\t\t.subset([\"date\", series])\n\t\t.after(row.date.subtract(years, \"year\").toDate())\n\t\t.before(row.date.toDate())\n\t\t.bake();\n\tlet values = subset\n\t\t.where(r => r.date.month() === row.date.month())\n\t\t.where(r => r.date.date() === row.date.date())\n\t\t.where(r => r.date.hour() === row.date.hour())\n\t\t.where(r => r.date.minute() === row.date.minute())\n\t\t.getSeries(series)\n\t\t.where(v => v);\n\n\tlet value;\n\tif (values.count() < years) {\n\t\tvalue = values\n\t\t\t.appendPair([\n\t\t\t\tnull,\n\t\t\t\tsubset\n\t\t\t\t\t.getSeries(series)\n\t\t\t\t\t.where(v => v)\n\t\t\t\t\t.average()\n\t\t\t])\n\t\t\t.average();\n\t} else {\n\t\tvalue = values.average();\n\t}\n\t// console.log(row.date.toDate(), values.toArray(), value);\n\treturn value;\n};\nexport {\n\tgapExists,\n\tgapFill,\n\taverageMonthlyMap,\n\tfillMonthlyByMap,\n\tpad,\n\tannualAverage,\n\tannualMonthlyAverageMap,\n\tmonthlyRollingAverageMap,\n\tfillMonthlyBAnnualyMap\n};\n","// Source: https://www.itl.nist.gov/div898/handbook/eda/section3/eda35h3.htm\n// https://vsp.pnnl.gov/help/Vsample/Rosners_Outlier_Test.htm\n// https://www.itl.nist.gov/div898/handbook/prc/section1/prc16.htm\n// https://www.math.ucla.edu/~tom/distributions/KolSmir2.html?\nimport { DataFrame } from \"data-forge\";\nimport {\n  sampleStandardDeviation,\n  mean as _mean,\n  max,\n  median as _median,\n  medianAbsoluteDeviation,\n  quantile\n} from \"simple-statistics\";\nimport { Studentt } from \"distributions\";\nimport dayjs from \"dayjs\";\n\nfunction rval(df) {\n  let values = df.deflate(row => row.x).toArray();\n  let std = sampleStandardDeviation(values);\n  let mean = _mean(values);\n  if (std === 0) {\n    let ndf = df.generateSeries({ ares: row => 0 });\n    return { R: 0, std, mean, df: ndf };\n  }\n  let ndf = new DataFrame({\n    values: values.map(x => ({\n      x,\n      ares: Math.abs(x - mean) / std\n    }))\n  });\n  let R = max(ndf.deflate(row => row.ares).toArray());\n  return { R, df: ndf, std, mean };\n}\n\nfunction pValue(n, i, alpha) {\n  let p = 1 - alpha / (2 * (n - i + 1));\n  return p;\n}\nfunction tValue(p, degreeOfFreedom) {\n  let qt = new Studentt(degreeOfFreedom);\n  let t = qt.inv(p);\n  return t;\n}\n//\nfunction lambdaTest(n, i, alpha) {\n  let p = pValue(n, i, alpha);\n  let df = n - i - 1;\n  let t = tValue(p, df);\n  let lambda =\n    (t * (n - i)) /\n    Math.sqrt((n - i - 1 + Math.pow(t, 2)) * (n - i + 1));\n  return { lambda, p, t };\n}\nfunction rosnerTest(dataset = [], k = 10, alpha = 0.05) {\n  let dataframe = new DataFrame({\n    values: dataset.map(x => ({ x }))\n  });\n  let n = dataframe.getSeries(\"x\").count();\n  let newdf;\n  let i = 1;\n  let outliers = [];\n  let trip = false;\n  while (i <= k) {\n    let pair = {};\n    let s = Date.now();\n    if (i === 1) {\n      let { R, df, mean, std } = rval(dataframe);\n      newdf = df.where(row => row.ares !== R);\n      pair = Object.assign({}, pair, {\n        mean,\n        std,\n        Value: df\n          .where(row => row.ares === R)\n          .getSeries(\"x\")\n          .first(),\n        R\n      });\n    } else {\n      let { R, df, mean, std } = rval(newdf);\n      newdf = df.where(row => row.ares !== R);\n      pair = Object.assign({}, pair, {\n        mean,\n        std,\n        Value: df\n          .where(row => row.ares === R)\n          .getSeries(\"x\")\n          .first(),\n        R\n      });\n    }\n    let { lambda, p, t } = lambdaTest(n, i, alpha);\n    pair = Object.assign({}, pair, { lambda });\n    outliers.push(pair);\n    if (trip && pair.R > pair.lambda) trip = false;\n    if (pair.R === 0) break;\n    if (pair.R < pair.lambda) {\n      if (trip) {\n        break;\n      } else {\n        trip = true;\n      }\n    }\n    i++;\n  }\n  outliers = new DataFrame(outliers)\n    .generateSeries({\n      outlier: row => row.R > row.lambda\n    })\n    .takeWhile(row => row.outlier);\n  let outlierValues = outliers\n    .where(row => row.Value > 0)\n    .deflate(row => row.Value);\n  let thresholds = {\n    lower: 0,\n    upper:\n      outlierValues.count() > 0 ? outlierValues.min() : Infinity\n  };\n  return {\n    outliers,\n    thresholds,\n    iterations: i\n  };\n}\nconst modz = (value, mad, median) => {\n  return (0.6745 * (value - median)) / mad;\n};\nfunction modifiedZScoreTest(values) {\n  let median = _median(values);\n  let mad = medianAbsoluteDeviation(values);\n  values = values\n    .sort((a, b) => b - a)\n    .filter(v => v > 0)\n    .map(v => [v, modz(v, mad, median)]);\n  let outliers = values.filter(\n    ([v, modz]) => Math.abs(modz) >= 3.5\n  );\n  let upper = Math.min(\n    ...[Infinity, ...outliers.map(v => v[0])]\n  );\n  // let score,\n  // \tvalue,\n  // \tthreshold = Infinity,\n  // \tindex = 0;\n  // do {\n  // \tvalue = values[index];\n  // \tscore = modz(value, mad, median);\n  // \tif (Math.abs(score) >= 3.5) threshold = value;\n  // } while (score >= 3.5);\n  return { thresholds: { upper, lower: 0 } };\n}\nfunction boxPlotTest(values) {\n  let q1 = quantile(values, 0.25);\n  let q3 = quantile(values, 0.75);\n  let iqr = q3 - q1;\n  return {\n    thresholds: {\n      lowerInner: q1 - 1.5 * iqr,\n      upperInner: q1 - 3 * iqr,\n      lowerOuter: q3 + 1.5 * iqr,\n      upperOuter: q3 + 3 * iqr\n    }\n  };\n}\nfunction calculateOutlierThresholds(\n  df,\n  { k, filterZeros = true } = {}\n) {\n  let values = df\n    .where(\n      row =>\n        row.flag === null ||\n        row.flag === undefined ||\n        Array.isArray(row.flag)\n    )\n    .where(row => !isNaN(row.value) && row.value !== null)\n    .getSeries(\"value\")\n    .bake();\n  if (filterZeros) values = values.where(value => value > 0);\n  if (!k) {\n    k =\n      values.count() < 1000\n        ? Math.floor(values.count() * 0.15)\n        : Math.min(...[1000, Math.floor(values.count() * 0.02)]);\n  }\n  if (values.count < 5) return {};\n  let { outliers, threshold } = rosnerTest(values.toArray(), k);\n  return { outliers, threshold };\n}\n\nfunction zeroCheck(df, threshold = 2) {\n  let zeroGroups = df\n    .variableWindow((a, b) => {\n      return a.value === b.value && a.value === 0;\n    })\n    .where(window => window.getIndex().count() >= threshold);\n  let zeroSummary = zeroGroups\n    .select(window => ({\n      start: window.first().date,\n      end: window.last().date,\n      count: window.count()\n    }))\n    .inflate(); // Series -> dataframe.\n  // .toArray()\n  return { zeroSummary, zeroGroups };\n}\n\nfunction zeroReplacement(df, threshold) {\n  let { zeroGroups } = zeroCheck(df, threshold);\n  zeroGroups.forEach(dff => {\n    dff = dff.transformSeries({\n      value: value => null,\n      flag: value => [\"zero\"]\n    });\n    df = DataFrame.merge([df, dff]);\n  });\n  return df;\n}\nfunction isOutlier(value, { lower, upper }) {\n  if (value < lower || value >= upper) {\n    return true;\n  }\n  return false;\n}\nfunction validMean(df) {\n  let values = df\n    .getSeries(\"value\")\n    .where(value => typeof value === \"number\");\n  return values.average();\n}\nfunction validMonthlyMeanMap(df) {\n  let dateComparison = row =>\n    dayjs(row.date)\n      .startOf(\"month\")\n      .month();\n\n  df = df\n    .where(row => typeof row.value === \"number\")\n    .groupBy(dateComparison)\n    .select(group => ({\n      month: new Date(group.first().date).getMonth(),\n      value: group.deflate(row => row.value).average()\n    }));\n  return new Map(\n    df.toArray().map(({ month, value }) => [month, value])\n  );\n}\n\nfunction quality(df) {\n  let count = df.getIndex().count();\n  let valid = df\n    .getSeries(\"flag\")\n    .where(\n      value =>\n        value === null ||\n        (Array.isArray(value) && value.length === 0)\n    )\n    .count();\n  let missing = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"missing\") !== -1)\n    .count();\n  let dirty = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"clean\") !== -1)\n    .count();\n  let zerod = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"zero\") !== -1)\n    .count();\n  let breakdown = {\n    valid: valid / count,\n    missing: missing / count,\n    invalid: (dirty + zerod) / count\n  };\n  let report = {\n    accuracy: (1 - dirty / count) * 4,\n    completeness: 4 * breakdown.valid,\n    consistency: 4 * ((count - missing - zerod) / count)\n  };\n  return { breakdown, report, count };\n}\n\nexport {\n  rosnerTest,\n  modifiedZScoreTest,\n  boxPlotTest,\n  calculateOutlierThresholds,\n  zeroReplacement,\n  isOutlier,\n  validMean,\n  validMonthlyMeanMap,\n  quality\n};\n","import dayjs from \"dayjs\";\nexport const annualScale = (start, end) =>\n\t365 / dayjs(end).diff(dayjs(start), \"day\");\nexport const calculateChange = (baseline, value) =>\n\t(value - baseline) / baseline;\n","import dayjs from \"dayjs\";\nimport dataForge from \"data-forge\";\nimport { msToInterval, intervalToMS } from \"./lib/Timeseries.interval\";\nimport isEqual from \"lodash/isEqual\";\nimport has from \"lodash/has\";\nimport get from \"lodash/get\";\nimport fromPairs from \"lodash/fromPairs\";\nimport {\n\tgapExists,\n\tgapFill,\n\taverageMonthlyMap,\n\tfillMonthlyByMap,\n\tpad,\n\tannualAverage,\n\tannualMonthlyAverageMap,\n\tmonthlyRollingAverageMap,\n\tfillMonthlyBAnnualyMap\n} from \"./lib/Timeseries.fill\";\nimport {\n\tckmeans,\n\tmax,\n\tmedianAbsoluteDeviation,\n\tquantile\n} from \"simple-statistics\";\n\nimport {\n\trosnerTest,\n\tboxPlotTest,\n\tmodifiedZScoreTest\n} from \"./lib/Timeseries.statistics\";\nimport { annualScale, calculateChange } from \"./lib/misc\";\n\n// export default ;\n// Fill Options\nexport {\n\tTimeseries,\n\tannualAverage,\n\taverageMonthlyMap,\n\tannualMonthlyAverageMap,\n\tmonthlyRollingAverageMap,\n\tfillMonthlyBAnnualyMap,\n\tfillMonthlyByMap,\n\tpad\n};\nfunction Timeseries(data, options = {}) {\n\t// const { msIndex } = options;\n\tif (data instanceof Timeseries) {\n\t\treturn data;\n\t}\n\tif (data instanceof dataForge.DataFrame) {\n\t\tdata = data.toArray();\n\t}\n\n\tdata = data\n\t\t.map(({ date, ...others }) => ({ date: dayjs(date), ...others }))\n\t\t.sort((a, b) => a.date.valueOf() - b.date.valueOf());\n\tlet config = {\n\t\t// columns: ['date', 'value', 'raw', 'flag'],\n\t\tvalues: data,\n\t\tindex: data.map(({ date }) => date.toDate()),\n\t\tconsiderAllRows: true\n\t};\n\tdataForge.DataFrame.call(this, config);\n}\n\nTimeseries.prototype = Object.create(dataForge.DataFrame.prototype);\nTimeseries.prototype.constructor = Timeseries;\n\n// Getters\nfunction getValueColumns() {\n\treturn this.detectTypes()\n\t\t.where(row => row.Type === \"number\")\n\t\t.distinct(row => row.Column)\n\t\t.getSeries(\"Column\")\n\t\t.toArray();\n}\nfunction interval() {\n\tconst computeInterval = window => window.last() - window.first();\n\tconst intervals = this.getIndex()\n\t\t.window(2)\n\t\t.select(computeInterval)\n\t\t.detectValues()\n\t\t.orderBy(row => -row.Frequency);\n\t// .orderBy(row => row.Value);\n\n\tlet val = intervals.first().Value;\n\n\treturn msToInterval(val);\n}\n\nfunction dateRange(unit, adjustment) {\n\tlet start = dayjs(this.first().date),\n\t\tend = dayjs(this.last().date);\n\tif (adjustment) {\n\t\tstart = start.startOf(adjustment);\n\t\tend = end.endOf(adjustment);\n\t}\n\treturn end.diff(start, unit);\n}\nTimeseries.prototype.getValueColumns = getValueColumns;\nTimeseries.prototype.getInterval = interval;\nTimeseries.prototype.getDateRange = dateRange;\n\n// Methods\nfunction calculateThresholdOptions({\n\tk,\n\tfilterZeros = true,\n\tfilterNegative = true\n} = {}) {\n\tlet noflags = this.where(\n\t\trow =>\n\t\t\trow.flag === null ||\n\t\t\trow.flag === undefined ||\n\t\t\t(Array.isArray(row.flag) && row.flag.length === 0)\n\t)\n\t\t.where(row => !isNaN(row.value) && row.value !== null)\n\t\t.getSeries(\"value\");\n\tif (filterZeros) noflags = noflags.where(value => value !== 0);\n\tif (filterNegative) noflags = noflags.where(value => value > 0);\n\tif (!k) {\n\t\tk =\n\t\t\tnoflags.count() < 1000\n\t\t\t\t? Math.floor(noflags.count() * 0.15)\n\t\t\t\t: Math.min(...[1000, Math.floor(noflags.count() * 0.02)]);\n\t}\n\tif (noflags.count() < 5) return {};\n\tlet { thresholds: esd } = rosnerTest(noflags.toArray(), k);\n\tlet { thresholds: box } = boxPlotTest(noflags.toArray());\n\tlet { thresholds: modz } = modifiedZScoreTest(noflags.toArray());\n\treturn { esd, box, modz };\n}\n\nfunction getBestThreshold() {\n\ttry {\n\t\tlet thresholds = this.calculateThresholdOptions();\n\t\tconst thresholdGroups = ckmeans(\n\t\t\t[\n\t\t\t\tget(thresholds, \"esd.upper\", null),\n\t\t\t\tget(thresholds, \"modz.upper\", null),\n\t\t\t\tget(thresholds, \"box.lowerOuter\", null),\n\t\t\t\tget(thresholds, \"box.upperOuter\", null)\n\t\t\t].filter(v => v),\n\t\t\t2\n\t\t);\n\t\tlet threshold_actual = max(\n\t\t\tthresholdGroups.reduce((a, b) => (a.length > b.length ? a : b))\n\t\t);\n\t\treturn threshold_actual;\n\t} catch (error) {\n\t\tconsole.error(error);\n\t\tthrow new Error(\"Cannot determine threshold\");\n\t}\n}\n\nfunction calculateStatistics(options = {}) {\n\tconst {\n\t\tcolumn = \"value\",\n\t\tfilterZeros = false,\n\t\tfilterNegative = true\n\t} = options;\n\tlet series = this.deflate(row => row[column]).where(value => !isNaN(value));\n\tif (filterNegative) series = series.where(value => value >= 0);\n\tif (filterZeros) series = series.where(value => value !== 0);\n\tlet median = series.median();\n\tlet mean = series.average();\n\tlet count = series.count();\n\tlet std = series.std();\n\tlet min = series.min();\n\tlet max = series.max();\n\tlet mad = medianAbsoluteDeviation(series.toArray());\n\tlet q1 = quantile(series.toArray(), 0.25);\n\tlet q3 = quantile(series.toArray(), 0.75);\n\tlet iqr = q3 - q1;\n\tlet stats = {\n\t\tmedian,\n\t\tmean,\n\t\tcount,\n\t\tstd,\n\t\tmin,\n\t\tmax,\n\t\tmad,\n\t\tq1,\n\t\tq3,\n\t\tiqr\n\t};\n\treturn stats;\n}\n\nTimeseries.prototype.calculateStatistics = calculateStatistics;\nTimeseries.prototype.calculateThresholdOptions = calculateThresholdOptions;\nTimeseries.prototype.getBestThreshold = getBestThreshold;\n\n// Chainable Methods\nfunction betweenDates(start, end) {\n\tlet df = this.between(start, end);\n\treturn new Timeseries(df);\n}\nTimeseries.prototype.betweenDates = betweenDates;\n\nfunction transformAllSeries(adjustmentFunction, { exclude }) {\n\tlet df = this;\n\tlet columns = (columns = df\n\t\t.detectTypes()\n\t\t.where(row => row.Type === \"number\")\n\t\t.distinct(row => row.Column)\n\t\t.getSeries(\"Column\")\n\t\t.toArray());\n\tif (exclude && Array.isArray(exclude)) {\n\t\tcolumns = columns.filter(col => exclude.indexOf(col) === -1);\n\t}\n\tcolumns.forEach(col => {\n\t\tdf = df.transformSeries({\n\t\t\t[col]: value => {\n\t\t\t\tif (isNaN(value)) {\n\t\t\t\t\treturn value;\n\t\t\t\t} else {\n\t\t\t\t\treturn adjustmentFunction(value);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\treturn df;\n}\n\nTimeseries.prototype.transformAllSeries = transformAllSeries;\n\nfunction reset() {\n\tlet df = this.withSeries({\n\t\tvalue: row =>\n\t\t\trow.flag && Array.isArray(row.flag) && row.flag.length > 0\n\t\t\t\t? row.raw\n\t\t\t\t: row.value\n\t})\n\t\t.subset([\"date\", \"value\"])\n\t\t.where(row => !isNaN(row.value) && row.value !== null);\n\treturn new Timeseries(df);\n}\nTimeseries.prototype.reset = reset;\n\nfunction group(interval, toArray) {\n\tif ([\"hour\", \"day\", \"month\", \"year\"].indexOf(interval) === -1)\n\t\tthrow new Error(\"interval type not supported\");\n\tlet dateComparison = row => dayjs(row.date).startOf(interval);\n\tlet groups = this.groupBy(dateComparison);\n\treturn groups;\n}\n\nTimeseries.prototype.group = group;\n\nfunction removeOutliers({ series = \"value\", lower, upper } = {}) {\n\tif (lower > upper) throw new Error(\"thresholds invalid\");\n\tlet outlierCheck = (value, lower, upper) => value < lower || value > upper;\n\n\tlet outliers = this.where(row => outlierCheck(row[series], lower, upper))\n\t\t.generateSeries({\n\t\t\traw: row => row[series],\n\t\t\tflag: ({ flag = [] }) => [\"outlier\", ...flag]\n\t\t})\n\t\t.transformSeries({\n\t\t\t[series]: value => null\n\t\t});\n\n\tlet merged = this.merge(outliers);\n\treturn new Timeseries(merged);\n}\n\nTimeseries.prototype.removeOutliers = removeOutliers;\nTimeseries.prototype.clean = removeOutliers;\n\nfunction downsample([duration, value], fillType = \"sum\") {\n\tif ([\"hour\", \"day\", \"month\", \"year\"].indexOf(duration) === -1)\n\t\tthrow new Error(\"interval type not supported\");\n\tif ([\"sum\", \"avg\", \"median\"].indexOf(fillType) === -1) {\n\t\tthrow new Error(\"aggregation type not suppported, only:\");\n\t}\n\tlet dateComparison = row => row.date.startOf(duration);\n\tlet valueColumns = this.getValueColumns();\n\tif (value) {\n\t\tdateComparison = row => row.date.startOf(duration).add(value, duration);\n\t}\n\tlet df = this.groupBy(dateComparison)\n\t\t.select(group => {\n\t\t\tconst date = group.first().date.startOf(duration);\n\t\t\treturn {\n\t\t\t\tdate,\n\t\t\t\t...fromPairs([\n\t\t\t\t\t...valueColumns.map(col => {\n\t\t\t\t\t\tlet value;\n\t\t\t\t\t\tswitch (fillType) {\n\t\t\t\t\t\t\tcase \"median\":\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.median();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"avg\":\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.average();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t// sum\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.sum();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn [col, value];\n\t\t\t\t\t}),\n\t\t\t\t\t...group\n\t\t\t\t\t\t.getColumnNames()\n\t\t\t\t\t\t.filter(col => col !== \"date\")\n\t\t\t\t\t\t.filter(col => valueColumns.indexOf(col) === -1)\n\t\t\t\t\t\t.map(col => {\n\t\t\t\t\t\t\tlet value = group\n\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t.distinct()\n\t\t\t\t\t\t\t\t.toArray();\n\t\t\t\t\t\t\tif (value.length === 1) value = value[0];\n\t\t\t\t\t\t\treturn [col, value];\n\t\t\t\t\t\t})\n\t\t\t\t])\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => dayjs(row.date).toDate());\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.downsample = downsample;\n\nfunction upsample([duration, value], fillType = \"avg\") {\n\t// Dont use this b/c it has the raw and flag values\n\tlet df = this.fillGaps(\n\t\tgapExists([duration, value]),\n\t\tgapFill(fillType, [duration, value])\n\t);\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.upsample = upsample;\n\nfunction populate(value, type = \"avg\") {\n\tlet v;\n\tswitch (type) {\n\t\tcase \"fill\":\n\t\t\tv = value;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tv = value / this.count();\n\t\t\tbreak;\n\t}\n\tlet df = this.generateSeries({ value: row => v });\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.populate = populate;\n\nfunction reduceToValue(columnNames) {\n\tfunction chooseValue(row, columnNames = []) {\n\t\tlet values = columnNames.map(n => row[n]).filter(v => v);\n\t\treturn values[0] || 0;\n\t}\n\tlet df = this.generateSeries({\n\t\tvalue: row => chooseValue(row, columnNames)\n\t}).subset([\"date\", \"value\"]);\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.reduceToValue = reduceToValue;\n\n// Baseline Functions\n\nfunction rollingPercentChange(col = \"value\") {\n\tlet df = this;\n\tlet delta = df.withSeries(\"delta\", df.getSeries(\"value\").percentChange());\n\treturn new Timeseries(delta);\n}\n\nTimeseries.prototype.rollingPercentChange = rollingPercentChange;\nfunction baselinePercentChange(baselineDF) {\n\t// Only Change in Year\n\tif (!(baselineDF instanceof Timeseries))\n\t\tbaselineDF = new Timeseries(baselineDF);\n\tlet dfwb;\n\tif (baselineDF.count() > 1) {\n\t\tlet interval = this.getInterval();\n\t\tlet baselineInterval = baselineDF.interval;\n\t\tif (!isEqual(interval, baselineInterval)) {\n\t\t\tconsole.error(interval, baselineInterval);\n\t\t\tthrow new Error(\"baseline and data intervals do not match\");\n\t\t}\n\t\tlet indexer;\n\t\tswitch (interval[0]) {\n\t\t\tcase \"day\":\n\t\t\t\tindexer = date => `${date.month()}-${date.date()}`;\n\t\t\t\tbreak;\n\t\t\tcase \"month\":\n\t\t\t\tindexer = date => date.month();\n\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tindexer = date => 0;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tlet indexedBaseline = baselineDF.withIndex(row => indexer(row.date));\n\t\tlet getBaselineValue = index => {\n\t\t\tlet at = indexedBaseline.at(index);\n\t\t\tif (at && has(at, \"value\")) {\n\t\t\t\treturn at.value;\n\t\t\t} else {\n\t\t\t\treturn indexedBaseline.getSeries(\"value\").average();\n\t\t\t}\n\t\t};\n\t\tdfwb = this.generateSeries({\n\t\t\tbaseline: row => getBaselineValue(indexer(row.date))\n\t\t});\n\t} else {\n\t\tdfwb = this.generateSeries({\n\t\t\tbaseline: row => baselineDF.first().value\n\t\t});\n\t}\n\tdfwb = dfwb.generateSeries({\n\t\tdelta: row => calculateChange(row.baseline, row.value)\n\t});\n\treturn new Timeseries(dfwb);\n}\n\nTimeseries.prototype.baselinePercentChange = baselinePercentChange;\nTimeseries.prototype.addBaselineDelta = baselinePercentChange;\n\nfunction annualIntensity(normalizeValue = 1) {\n\tlet interval = this.getInterval();\n\tlet annual = this.groupBy(row => row.date.year())\n\t\t.select(group => {\n\t\t\tlet startDate = group.first().date;\n\t\t\tlet endDate = group\n\t\t\t\t.last()\n\t\t\t\t.date.add(interval[1] || 1, interval[0] || \"month\");\n\t\t\tlet scaler = annualScale(startDate, endDate);\n\t\t\treturn {\n\t\t\t\tstartDate,\n\t\t\t\tendDate,\n\t\t\t\t...fromPairs(\n\t\t\t\t\tthis.getValueColumns().map(col => [\n\t\t\t\t\t\tcol,\n\t\t\t\t\t\t(group\n\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t.where(v => v)\n\t\t\t\t\t\t\t.sum() *\n\t\t\t\t\t\t\tscaler) /\n\t\t\t\t\t\t\tnormalizeValue\n\t\t\t\t\t])\n\t\t\t\t)\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.renameSeries({ startDate: \"date\" })\n\t\t.dropSeries(\"endDate\");\n\treturn new Timeseries(annual);\n}\n\nTimeseries.prototype.annualIntensity = annualIntensity;\n\n// Fill Functions\n\nfunction fillMissing() {\n\tlet df = this;\n\tlet startDate = df.first().date.toDate(),\n\t\tendDate = df.last().date.toDate();\n\tlet interval = df.getInterval();\n\tlet bdf = Timeseries.blank(startDate, endDate, interval, \"missing\").withIndex(\n\t\trow => row.date.valueOf()\n\t);\n\tlet m = bdf.merge(df.withIndex(row => row.date.valueOf())).generateSeries({\n\t\tflag: row =>\n\t\t\trow.value === null || row.value === undefined ? row.flag : undefined\n\t});\n\tm = new Timeseries(m);\n\treturn m;\n}\nTimeseries.prototype.fillMissing = fillMissing;\n\nfunction fillNull({ series = \"value\", value, callback }) {\n\tconst seriesCheck = row => row[series] === null || row[series] === undefined;\n\tif (callback) {\n\t\tlet df = this.generateSeries({\n\t\t\tflag: row =>\n\t\t\t\tseriesCheck(row) ? [\"fill\", ...(row.flag || [])] : row.flag,\n\t\t\t[series]: row => (seriesCheck(row) ? callback(row) : row[series])\n\t\t});\n\t\treturn new Timeseries(df);\n\t} else if (value) {\n\t\tlet df = this.generateSeries({\n\t\t\tflag: row => (seriesCheck(row) ? [\"fill\", ...(row.flag || [])] : row.flag)\n\t\t}).transformSeries({\n\t\t\t[series]: currentValue =>\n\t\t\t\tcurrentValue === null || currentValue === undefined\n\t\t\t\t\t? value\n\t\t\t\t\t: currentValue\n\t\t});\n\t\treturn new Timeseries(df);\n\t} else {\n\t\treturn this;\n\t}\n}\nTimeseries.prototype.fillNull = fillNull;\n\nfunction zeroFaultDetection(thresholdInterval) {\n\tif (!Array.isArray(thresholdInterval))\n\t\tthresholdInterval = [thresholdInterval, 1];\n\tthresholdInterval = intervalToMS(thresholdInterval);\n\tlet df = this;\n\tlet zeroFaultDates = df\n\t\t.where(row => row.value === 0)\n\t\t.ensureSeries(\n\t\t\t\"interval\",\n\t\t\tdf\n\t\t\t\t.where(row => row.value === 0)\n\t\t\t\t.getSeries(\"date\")\n\t\t\t\t.amountChange()\n\t\t)\n\t\t.where(v => v.interval <= thresholdInterval)\n\t\t.subset([\"date\"])\n\t\t.generateSeries({ value: row => null, flag: row => [\"zeroFault\"] });\n\n\tlet zeroFaultDF = new Timeseries(this.merge(zeroFaultDates));\n\treturn zeroFaultDF;\n}\n\nTimeseries.prototype.zeroFaultDetection = zeroFaultDetection;\n\nfunction dataQuality() {\n\tlet count = this.count();\n\tlet withFlags = this.where(r => Array.isArray(r.flag) && r.flag.length > 0)\n\t\t.groupBy(r => r.flag.toString())\n\t\t.select(group => ({\n\t\t\tflag: group.first().flag,\n\t\t\tcount: group.count(),\n\t\t\tpercent: (group.count() / count) * 100\n\t\t}))\n\t\t.inflate();\n\tconsole.log(withFlags.toString());\n\treturn {};\n}\n\nTimeseries.prototype.dataQuality = dataQuality;\n\nfunction monthlyWithQual() {\n\tlet interval = this.getInterval();\n\tlet ms = intervalToMS(interval);\n\tconst duration = \"month\";\n\tlet dateComparison = row =>\n\t\tdayjs(row.date)\n\t\t\t.startOf()\n\t\t\t.valueOf();\n\tlet ts = this.groupBy(dateComparison)\n\t\t.select(group => {\n\t\t\tconst date = dayjs(group.first().date)\n\t\t\t\t.startOf(duration)\n\t\t\t\t.toDate();\n\t\t\tlet fullCount = Math.floor(\n\t\t\t\tdayjs(date)\n\t\t\t\t\t.endOf(\"month\")\n\t\t\t\t\t.diff(dayjs(date), \"millisecond\") / ms\n\t\t\t);\n\t\t\tlet days = new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\n\t\t\tlet count = group\n\t\t\t\t.getSeries(\"value\")\n\t\t\t\t.where(v => v && v !== 0)\n\t\t\t\t.toArray().length;\n\t\t\tlet value = group\n\t\t\t\t.getSeries(\"value\")\n\t\t\t\t.where(v => !isNaN(v))\n\t\t\t\t.sum();\n\t\t\treturn {\n\t\t\t\tdate,\n\t\t\t\tvalue: isNaN(value) ? 0 : value,\n\t\t\t\tcount,\n\t\t\t\tfullCount,\n\t\t\t\tscore: count / fullCount\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => row.date.toDate());\n\treturn new Timeseries(ts);\n}\nTimeseries.prototype.monthlyWithQual = monthlyWithQual;\n\nfunction threeYearAverage(date, series = \"value\", defaultValue) {\n\tdate = dayjs(date);\n\tif (!defaultValue)\n\t\tdefaultValue = this.getSeries(series)\n\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t.average();\n\n\t// let months = df\n\t// \t.before(date.valueOf())\n\t// \t.where(row => dayjs(row.date).month() === date.month())\n\t// \t.where(row => row.score > 0.9)\n\t// \t.tail(3);\n\tlet months = this.before(date.toDate())\n\t\t.where(row => row.date.month() === date.month())\n\t\t.orderBy(row => dayjs(row.date))\n\t\t.tail(3);\n\t// .where(row => row.score > 0.9);\n\tif (months.count() > 0) {\n\t\tlet val = months\n\t\t\t.getSeries(series)\n\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t.average();\n\t\treturn val;\n\t} else {\n\t\treturn defaultValue;\n\t}\n}\nTimeseries.prototype.threeYearAverage = threeYearAverage;\n\nfunction averageFill() {\n\tlet df = this;\n\tlet avg = df\n\t\t// .where(row => row.score ?row.score >= 0.9)\n\t\t.getSeries(\"value\")\n\t\t.where(v => !isNaN(v) && v !== null)\n\t\t.average();\n\tlet monthlyAvg = df\n\t\t.generateSeries({\n\t\t\trollingAverage: row => df.threeYearAverage(row.date, \"value\", avg)\n\t\t})\n\t\t.generateSeries({\n\t\t\tflag: row => (row.value ? row.flag : [\"filled\", ...(row.flag || [])])\n\t\t})\n\t\t.generateSeries({\n\t\t\tvalue: row => (row.value ? row.value : row.rollingAverage)\n\t\t})\n\t\t.dropSeries([\"rollingAverage\"]);\n\treturn new Timeseries(monthlyAvg);\n}\n\nTimeseries.prototype.averageFill = averageFill;\n\n// Static Methods\nfunction blank(startDate, endDate, [duration, value = 1], flag) {\n\tif ([\"minute\", \"hour\", \"day\", \"month\", \"year\"].indexOf(duration) < 0) {\n\t\tconsole.error(interval);\n\t\tthrow new Error(\"interval type not supported\");\n\t}\n\tstartDate = dayjs(startDate);\n\tendDate = dayjs(endDate);\n\tlet dates = [startDate];\n\tlet interval = intervalToMS([duration, value]);\n\twhile (dates[dates.length - 1].valueOf() < endDate.valueOf()) {\n\t\tdates.push(dayjs(dates[dates.length - 1]).add(value, duration));\n\t}\n\tlet df = new Timeseries(dates.map(date => ({ date })));\n\n\tif (flag) {\n\t\tdf = new Timeseries(\n\t\t\tdf.generateSeries({\n\t\t\t\tflag: row => [flag]\n\t\t\t})\n\t\t);\n\t}\n\n\treturn df;\n}\nTimeseries.blank = blank;\nfunction aggregate(dataframes) {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df => new Timeseries(df));\n\tconst valueColumns = new Set(\n\t\tdataframes.map(df => df.getValueColumns()).reduce((a, b) => a.concat(b), [])\n\t);\n\tconst concatenated = dataForge.DataFrame.concat(dataframes)\n\t\t.groupBy(row => row.date)\n\t\t.select(group => {\n\t\t\tconst date = group.first().date;\n\t\t\tlet o = { date };\n\t\t\tvalueColumns.forEach(c => (o[c] = group.deflate(row => row[c]).sum()));\n\t\t\tgroup\n\t\t\t\t.getColumnNames()\n\t\t\t\t.filter(col => col !== \"date\")\n\t\t\t\t.filter(col => valueColumns.has(col) === -1)\n\t\t\t\t.forEach(col => {\n\t\t\t\t\tlet value = group\n\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t.distinct()\n\t\t\t\t\t\t.toArray();\n\t\t\t\t\tif (value.length === 1) value = value[0];\n\t\t\t\t\to[col] = value;\n\t\t\t\t\treturn;\n\t\t\t\t});\n\t\t\treturn o;\n\t\t})\n\t\t.inflate();\n\t// .toArray();\n\n\treturn new Timeseries(concatenated);\n}\n\nTimeseries.aggregate = aggregate;\nTimeseries.concat = dataframes => {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df =>\n\t\tnew Timeseries(df).withIndex(row => row.date.valueOf())\n\t);\n\tlet df = dataForge.DataFrame.concat(dataframes);\n\treturn new Timeseries(df);\n};\nTimeseries.merge = dataframes => {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df =>\n\t\tnew Timeseries(df).withIndex(row => row.date.valueOf())\n\t);\n\tlet df = dataForge.DataFrame.merge(dataframes);\n\treturn new Timeseries(df);\n};\n"],"names":["intervalToMS","unit","value","start","dayjs","add","diff","valueFiller","fillType","startValue","endValue","entryIndex","numEntries","overrideValue","dateFunction","date","flag","indexOf","Error","fromPairs","toPairs","map","key","averageMonthlyMap","df","Map","group","select","month","first","getSeries","where","v","average","toArray","rval","values","deflate","row","x","std","sampleStandardDeviation","mean","_mean","ndf","generateSeries","ares","R","DataFrame","Math","abs","max","lambdaTest","n","i","alpha","p","pValue","t","degreeOfFreedom","Studentt","inv","tValue","lambda","sqrt","pow","modz","mad","median","modifiedZScoreTest","_median","medianAbsoluteDeviation","outliers","sort","a","b","filter","thresholds","upper","min","Infinity","lower","calculateChange","baseline","Timeseries","data","options","dataForge","config","others","valueOf","index","toDate","considerAllRows","call","this","removeOutliers","series","outlierCheck","raw","transformSeries","merge","baselinePercentChange","baselineDF","dfwb","count","indexer","interval","getInterval","baselineInterval","isEqual","console","error","indexedBaseline","withIndex","at","has","delta","prototype","Object","create","constructor","getValueColumns","detectTypes","Type","distinct","Column","ms","end","getIndex","window","last","detectValues","orderBy","Frequency","Value","ceil","getDateRange","adjustment","startOf","endOf","calculateStatistics","column","filterZeros","filterNegative","isNaN","q1","quantile","q3","iqr","calculateThresholdOptions","k","noflags","Array","isArray","length","floor","esd","dataset","newdf","dataframe","trip","pair","assign","push","outlierValues","outlier","takeWhile","iterations","rosnerTest","box","lowerInner","upperInner","lowerOuter","upperOuter","getBestThreshold","thresholdGroups","ckmeans","get","reduce","betweenDates","between","transformAllSeries","adjustmentFunction","exclude","columns","col","forEach","reset","withSeries","subset","groupBy","clean","downsample","duration","dateComparison","valueColumns","sum","getColumnNames","inflate","upsample","fillGaps","durationValue","pairA","pairB","startDate","gapExists","endDate","newEntries","e","gapFill","populate","type","reduceToValue","columnNames","chooseValue","rollingPercentChange","percentChange","addBaselineDelta","annualIntensity","normalizeValue","year","scaler","_this","renameSeries","dropSeries","fillMissing","m","blank","undefined","fillNull","callback","seriesCheck","currentValue","zeroFaultDetection","thresholdInterval","zeroFaultDates","ensureSeries","amountChange","dataQuality","withFlags","r","toString","percent","log","monthlyWithQual","fullCount","Date","getFullYear","getMonth","getDate","score","threeYearAverage","defaultValue","months","before","tail","averageFill","avg","rollingAverage","dates","aggregate","dataframes","Set","concat","o","c","years","after","subtract","bake","hour","minute","appendPair","ts","set","annualMonthlyMap","monthMap","rollingWindow"],"mappings":"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"}
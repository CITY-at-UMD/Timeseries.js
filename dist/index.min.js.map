{"version":3,"file":"index.min.js","sources":["../src/lib/Timeseries.interval.js","../src/lib/Timeseries.fill.js","../src/lib/Timeseries.statistics.js","../src/index.js","../src/lib/misc.js"],"sourcesContent":["import dayjs from \"dayjs\";\n\nconst msToInterval = ms => {\n\tlet start = dayjs();\n\tlet end = dayjs().add(ms);\n\tif (end.diff(start, \"month\", true) >= 11) {\n\t\treturn [\"year\", Math.ceil(end.diff(start, \"year\", true))];\n\t} else if (end.diff(start, \"day\", true) >= 28) {\n\t\treturn [\"month\", Math.ceil(end.diff(start, \"month\", true))];\n\t} else if (end.diff(start, \"hour\", true) >= 23) {\n\t\treturn [\"day\", Math.ceil(end.diff(start, \"day\", true))];\n\t} else if (end.diff(start, \"minute\", true) >= 55) {\n\t\treturn [\"hour\", Math.ceil(end.diff(start, \"hour\", true))];\n\t} else {\n\t\treturn [\"minute\", end.diff(start, \"minute\")];\n\t}\n};\nconst intervalToMS = ([unit, value]) => {\n\tlet start = dayjs();\n\tlet end = dayjs().add(value, unit);\n\treturn end.diff(start);\n};\nfunction calculateInterval(df, startDate, endDate) {\n\tif (!startDate) startDate = df.first.date;\n\tif (!endDate) endDate = df.last.date;\n\tfunction computeInterval(window) {\n\t\treturn window.last() - window.first();\n\t}\n\tconst intervals = df\n\t\t.between(startDate, endDate)\n\t\t.getIndex()\n\t\t.window(2)\n\t\t.select(computeInterval)\n\t\t.detectValues()\n\t\t.orderBy(row => row.Frequency);\n\n\tlet val = intervals.last().Value;\n\treturn msToInterval(val);\n}\nexport { msToInterval, intervalToMS, calculateInterval };\n","import dayjs from \"dayjs\";\nimport fromPairs from \"lodash/fromPairs\";\nimport toPairs from \"lodash/toPairs\";\nimport { mean } from \"simple-statistics\";\nimport { Timeseries } from \"../index\";\nconst gapExists = ([duration, durationValue = 1]) => (pairA, pairB) => {\n\tconst startDate = pairA[0];\n\tconst endDate = pairB[0];\n\tlet gapSize = Math.floor(\n\t\tdayjs(endDate).diff(startDate, duration, true) / durationValue\n\t);\n\n\tif (gapSize > 0) return true;\n\treturn false;\n};\n\nconst valueFiller = (\n\tfillType,\n\t{ startValue, endValue, entryIndex, numEntries },\n\t{ overrideValue, dateFunction, date, flag }\n) => {\n\tif (\n\t\t[\"pad\", \"interpolate\", \"average\", \"dateFunction\", \"value\"].indexOf(\n\t\t\tfillType\n\t\t) === -1\n\t) {\n\t\tthrow new Error(\"fill Type not supported\");\n\t}\n\tlet value;\n\tif (fillType === \"pad\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\treturn [key, startValue[key]];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", \"pad\"];\n\t} else if (fillType === \"interpolate\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv =\n\t\t\t\t\tstartValue[key] +\n\t\t\t\t\t(entryIndex + 1) *\n\t\t\t\t\t\t((endValue[key] - startValue[key]) / (numEntries + 1));\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"average\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv = (startValue[key] + endValue[key]) / numEntries;\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"dateFunction\" && dateFunction) {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv = dateFunction(date);\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"value\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv;\n\t\t\t\tif (typeof overrideValue === \"number\") {\n\t\t\t\t\tnv = overrideValue;\n\t\t\t\t} else {\n\t\t\t\t\tnv = overrideValue[key];\n\t\t\t\t}\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\treturn [key, null];\n\t\t\t})\n\t\t);\n\t\tflag = [\"fill\"];\n\t}\n\treturn { ...value, flag };\n};\n\nconst gapFill = (\n\tfillType,\n\t[duration, durationValue],\n\t{ overrideValue, dateFunction, flag } = {}\n) => (pairA, pairB) => {\n\t// Fill values forward.\n\n\tconst startDate = dayjs(pairA[0]);\n\tconst endDate = dayjs(pairB[0]);\n\tlet gapSize = Math.floor(\n\t\tdayjs(endDate).diff(startDate, duration) / durationValue\n\t);\n\tconst numEntries = gapSize - 1;\n\tconst startValue = pairA[1];\n\tconst endValue = pairB[1];\n\tconst newEntries = [];\n\tfor (let entryIndex = 0; entryIndex < numEntries; ++entryIndex) {\n\t\tlet adjustment = valueFiller(\n\t\t\t\tfillType,\n\t\t\t\t{ startValue, endValue, entryIndex, numEntries },\n\t\t\t\t{\n\t\t\t\t\toverrideValue,\n\t\t\t\t\tdateFunction,\n\t\t\t\t\tflag\n\t\t\t\t}\n\t\t\t),\n\t\t\tdate = dayjs(startDate)\n\t\t\t\t.add((entryIndex + 1) * durationValue, duration)\n\t\t\t\t.toDate();\n\t\tlet e = [date.valueOf(), Object.assign({}, adjustment, { date })];\n\t\tnewEntries.push(e);\n\t}\n\n\treturn newEntries;\n};\n\n// Basic Fill Functions\nconst averageMonthlyMap = df => {\n\tlet data = df.group(\"month\").select(group => ({\n\t\tmonth: group.first().date.month(),\n\t\tvalue: group\n\t\t\t.getSeries(\"value\")\n\t\t\t.where(v => v)\n\t\t\t.average()\n\t}));\n\tlet m = new Map(data.toArray().map(({ month, value }) => [month, value]));\n\tlet avg = data.getSeries(\"value\").average();\n\tm.set(\"default\", avg);\n\treturn m;\n};\n\nconst annualMonthlyAverageMap = df => {\n\tlet data = df\n\t\t.groupBy(row => row.date.year())\n\t\t.select(group => {\n\t\t\tconst date = group.first().date.startOf(\"year\");\n\t\t\tlet ts = new Timeseries(group).downsample([\"month\", 1], \"avg\");\n\t\t\tlet avg = ts.getSeries(\"value\").average();\n\t\t\tlet map = averageMonthlyMap(ts);\n\t\t\tmap.set(\"avg\", avg);\n\t\t\treturn [date.year(), map];\n\t\t});\n\tlet m = new Map(data.toArray());\n\t// let deafult =\n\treturn m;\n};\n\nconst monthlyRollingAverageMap = (\n\tdf,\n\t{ years = 3, series = \"value\", aggregator = \"average\", validOnly = true } = {}\n) => {\n\tlet months = df\n\t\t.groupBy(row => row.date.startOf(\"month\").toDate())\n\t\t.select(group => {\n\t\t\tlet date = group.first().date.startOf(\"month\");\n\t\t\tlet value = group\n\t\t\t\t.getSeries(series)\n\t\t\t\t.where(v => (validOnly ? Boolean(v) : true))\n\t\t\t\t.average();\n\t\t\treturn { date, value };\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => row.date.toDate())\n\t\t.bake();\n\tlet data = months\n\t\t.groupBy(row => row.date.month())\n\t\t.select(group => {\n\t\t\tlet values = new Map(\n\t\t\t\tgroup.rollingWindow(years).select(window => [\n\t\t\t\t\twindow.last().date.year(),\n\t\t\t\t\twindow\n\t\t\t\t\t\t.getSeries(series)\n\t\t\t\t\t\t.where(v => (validOnly ? Boolean(v) : true))\n\t\t\t\t\t\t.average() ||\n\t\t\t\t\t\tgroup\n\t\t\t\t\t\t\t.getSeries(series)\n\t\t\t\t\t\t\t.where(v => (validOnly ? Boolean(v) : true))\n\t\t\t\t\t\t\t.average()\n\t\t\t\t])\n\t\t\t);\n\t\t\tgroup\n\t\t\t\t.where(row => !values.has(row.date.year()))\n\t\t\t\t.forEach(row => {\n\t\t\t\t\tlet value =\n\t\t\t\t\t\tmonths.before(row.date.toDate()).count() > 0\n\t\t\t\t\t\t\t? months.before(row.date.toDate()).last()[series]\n\t\t\t\t\t\t\t: months.getSeries(series).average();\n\t\t\t\t\tvalues.set(row.date.year(), value);\n\t\t\t\t});\n\n\t\t\tlet month = group.first().date.month();\n\t\t\treturn [month, values];\n\t\t});\n\n\treturn new Map(data.toArray());\n};\n\nconst fillMonthlyByMap = monthMap => row => monthMap.get(row.date.month());\nconst fillMonthlyBAnnualyMap = annualMonthlyMap => row => {\n\tlet month = row.date.month(),\n\t\tyear = row.date.year();\n\tif (annualMonthlyMap.has(month)) {\n\t\tif (annualMonthlyMap.has(month)) {\n\t\t\treturn annualMonthlyMap.get(month).get(year);\n\t\t} else {\n\t\t\treturn mean([...annualMonthlyMap.get(month).values()]);\n\t\t}\n\t} else {\n\t\treturn mean(\n\t\t\t[...annualMonthlyMap.values()].map(m =>\n\t\t\t\t[...m.values()].reduce((a, b) => a.concat(b), [])\n\t\t\t)\n\t\t);\n\t}\n};\n\nconst pad = (df, { validOnly = true, series = \"value\" } = {}) => row => {\n\tlet values = df\n\t\t.before(row.date.toDate())\n\t\t.getSeries(series)\n\t\t.where(v => v);\n\tlet value = values.count() > 0 ? values.last() : 0;\n\treturn value;\n};\nconst annualAverage = (\n\tdf,\n\t{ validOnly = true, series = \"value\", years = 3, defaultValue } = {}\n) => row => {\n\tlet subset = df\n\t\t.subset([\"date\", series])\n\t\t.after(row.date.subtract(years, \"year\").toDate())\n\t\t.before(row.date.toDate())\n\t\t.bake();\n\tlet values = subset\n\t\t.where(r => r.date.month() === row.date.month())\n\t\t.where(r => r.date.date() === row.date.date())\n\t\t.where(r => r.date.hour() === row.date.hour())\n\t\t.where(r => r.date.minute() === row.date.minute())\n\t\t.getSeries(series)\n\t\t.where(v => v);\n\n\tlet value;\n\tif (values.count() < years) {\n\t\tvalue = values\n\t\t\t.appendPair([\n\t\t\t\tnull,\n\t\t\t\tsubset\n\t\t\t\t\t.getSeries(series)\n\t\t\t\t\t.where(v => v)\n\t\t\t\t\t.average()\n\t\t\t])\n\t\t\t.average();\n\t} else {\n\t\tvalue = values.average();\n\t}\n\treturn value;\n};\nexport {\n\tgapExists,\n\tgapFill,\n\taverageMonthlyMap,\n\tfillMonthlyByMap,\n\tpad,\n\tannualAverage,\n\tannualMonthlyAverageMap,\n\tmonthlyRollingAverageMap,\n\tfillMonthlyBAnnualyMap\n};\n","// Source: https://www.itl.nist.gov/div898/handbook/eda/section3/eda35h3.htm\n// https://vsp.pnnl.gov/help/Vsample/Rosners_Outlier_Test.htm\n// https://www.itl.nist.gov/div898/handbook/prc/section1/prc16.htm\n// https://www.math.ucla.edu/~tom/distributions/KolSmir2.html?\nimport { DataFrame } from \"data-forge\";\nimport {\n  sampleStandardDeviation,\n  mean as _mean,\n  max,\n  median as _median,\n  medianAbsoluteDeviation,\n  quantile\n} from \"simple-statistics\";\nimport { Studentt } from \"distributions\";\nimport dayjs from \"dayjs\";\n\nfunction rval(df) {\n  let values = df.deflate(row => row.x).toArray();\n  let std = sampleStandardDeviation(values);\n  let mean = _mean(values);\n  if (std === 0) {\n    let ndf = df.generateSeries({ ares: row => 0 });\n    return { R: 0, std, mean, df: ndf };\n  }\n  let ndf = new DataFrame({\n    values: values.map(x => ({\n      x,\n      ares: Math.abs(x - mean) / std\n    }))\n  });\n  let R = max(ndf.deflate(row => row.ares).toArray());\n  return { R, df: ndf, std, mean };\n}\n\nfunction pValue(n, i, alpha) {\n  let p = 1 - alpha / (2 * (n - i + 1));\n  return p;\n}\nfunction tValue(p, degreeOfFreedom) {\n  let qt = new Studentt(degreeOfFreedom);\n  let t = qt.inv(p);\n  return t;\n}\n//\nfunction lambdaTest(n, i, alpha) {\n  let p = pValue(n, i, alpha);\n  let df = n - i - 1;\n  let t = tValue(p, df);\n  let lambda =\n    (t * (n - i)) /\n    Math.sqrt((n - i - 1 + Math.pow(t, 2)) * (n - i + 1));\n  return { lambda, p, t };\n}\nfunction rosnerTest(dataset = [], k = 10, alpha = 0.05) {\n  let dataframe = new DataFrame({\n    values: dataset.map(x => ({ x }))\n  });\n  let n = dataframe.getSeries(\"x\").count();\n  let newdf;\n  let i = 1;\n  let outliers = [];\n  let trip = false;\n  while (i <= k) {\n    let pair = {};\n    let s = Date.now();\n    if (i === 1) {\n      let { R, df, mean, std } = rval(dataframe);\n      newdf = df.where(row => row.ares !== R);\n      pair = Object.assign({}, pair, {\n        mean,\n        std,\n        Value: df\n          .where(row => row.ares === R)\n          .getSeries(\"x\")\n          .first(),\n        R\n      });\n    } else {\n      let { R, df, mean, std } = rval(newdf);\n      newdf = df.where(row => row.ares !== R);\n      pair = Object.assign({}, pair, {\n        mean,\n        std,\n        Value: df\n          .where(row => row.ares === R)\n          .getSeries(\"x\")\n          .first(),\n        R\n      });\n    }\n    let { lambda, p, t } = lambdaTest(n, i, alpha);\n    pair = Object.assign({}, pair, { lambda });\n    outliers.push(pair);\n    if (trip && pair.R > pair.lambda) trip = false;\n    if (pair.R === 0) break;\n    if (pair.R < pair.lambda) {\n      if (trip) {\n        break;\n      } else {\n        trip = true;\n      }\n    }\n    i++;\n  }\n  outliers = new DataFrame(outliers)\n    .generateSeries({\n      outlier: row => row.R > row.lambda\n    })\n    .takeWhile(row => row.outlier);\n  let outlierValues = outliers\n    .where(row => row.Value > 0)\n    .deflate(row => row.Value);\n  let thresholds = {\n    lower: 0,\n    upper:\n      outlierValues.count() > 0 ? outlierValues.min() : Infinity\n  };\n  return {\n    outliers,\n    thresholds,\n    iterations: i\n  };\n}\nconst modz = (value, mad, median) => {\n  return (0.6745 * (value - median)) / mad;\n};\nfunction modifiedZScoreTest(values) {\n  let median = _median(values);\n  let mad = medianAbsoluteDeviation(values);\n  values = values\n    .sort((a, b) => b - a)\n    .filter(v => v > 0)\n    .map(v => [v, modz(v, mad, median)]);\n  let outliers = values.filter(\n    ([v, modz]) => Math.abs(modz) >= 3.5\n  );\n  let upper = Math.min(\n    ...[Infinity, ...outliers.map(v => v[0])]\n  );\n  // let score,\n  // \tvalue,\n  // \tthreshold = Infinity,\n  // \tindex = 0;\n  // do {\n  // \tvalue = values[index];\n  // \tscore = modz(value, mad, median);\n  // \tif (Math.abs(score) >= 3.5) threshold = value;\n  // } while (score >= 3.5);\n  return { thresholds: { upper, lower: 0 } };\n}\nfunction boxPlotTest(values) {\n  let q1 = quantile(values, 0.25);\n  let q3 = quantile(values, 0.75);\n  let iqr = q3 - q1;\n  return {\n    thresholds: {\n      lowerInner: q1 - 1.5 * iqr,\n      upperInner: q1 - 3 * iqr,\n      lowerOuter: q3 + 1.5 * iqr,\n      upperOuter: q3 + 3 * iqr\n    }\n  };\n}\nfunction calculateOutlierThresholds(\n  df,\n  { k, filterZeros = true } = {}\n) {\n  let values = df\n    .where(\n      row =>\n        row.flag === null ||\n        row.flag === undefined ||\n        Array.isArray(row.flag)\n    )\n    .where(row => !isNaN(row.value) && row.value !== null)\n    .getSeries(\"value\")\n    .bake();\n  if (filterZeros) values = values.where(value => value > 0);\n  if (!k) {\n    k =\n      values.count() < 1000\n        ? Math.floor(values.count() * 0.15)\n        : Math.min(...[1000, Math.floor(values.count() * 0.02)]);\n  }\n  if (values.count < 5) return {};\n  let { outliers, threshold } = rosnerTest(values.toArray(), k);\n  return { outliers, threshold };\n}\n\nfunction zeroCheck(df, threshold = 2) {\n  let zeroGroups = df\n    .variableWindow((a, b) => {\n      return a.value === b.value && a.value === 0;\n    })\n    .where(window => window.getIndex().count() >= threshold);\n  let zeroSummary = zeroGroups\n    .select(window => ({\n      start: window.first().date,\n      end: window.last().date,\n      count: window.count()\n    }))\n    .inflate(); // Series -> dataframe.\n  // .toArray()\n  return { zeroSummary, zeroGroups };\n}\n\nfunction zeroReplacement(df, threshold) {\n  let { zeroGroups } = zeroCheck(df, threshold);\n  zeroGroups.forEach(dff => {\n    dff = dff.transformSeries({\n      value: value => null,\n      flag: value => [\"zero\"]\n    });\n    df = DataFrame.merge([df, dff]);\n  });\n  return df;\n}\nfunction isOutlier(value, { lower, upper }) {\n  if (value < lower || value >= upper) {\n    return true;\n  }\n  return false;\n}\nfunction validMean(df) {\n  let values = df\n    .getSeries(\"value\")\n    .where(value => typeof value === \"number\");\n  return values.average();\n}\nfunction validMonthlyMeanMap(df) {\n  let dateComparison = row =>\n    dayjs(row.date)\n      .startOf(\"month\")\n      .month();\n\n  df = df\n    .where(row => typeof row.value === \"number\")\n    .groupBy(dateComparison)\n    .select(group => ({\n      month: new Date(group.first().date).getMonth(),\n      value: group.deflate(row => row.value).average()\n    }));\n  return new Map(\n    df.toArray().map(({ month, value }) => [month, value])\n  );\n}\n\nfunction quality(df) {\n  let count = df.getIndex().count();\n  let valid = df\n    .getSeries(\"flag\")\n    .where(\n      value =>\n        value === null ||\n        (Array.isArray(value) && value.length === 0)\n    )\n    .count();\n  let missing = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"missing\") !== -1)\n    .count();\n  let dirty = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"clean\") !== -1)\n    .count();\n  let zerod = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"zero\") !== -1)\n    .count();\n  let breakdown = {\n    valid: valid / count,\n    missing: missing / count,\n    invalid: (dirty + zerod) / count\n  };\n  let report = {\n    accuracy: (1 - dirty / count) * 4,\n    completeness: 4 * breakdown.valid,\n    consistency: 4 * ((count - missing - zerod) / count)\n  };\n  return { breakdown, report, count };\n}\n\nexport {\n  rosnerTest,\n  modifiedZScoreTest,\n  boxPlotTest,\n  calculateOutlierThresholds,\n  zeroReplacement,\n  isOutlier,\n  validMean,\n  validMonthlyMeanMap,\n  quality\n};\n","import dayjs from \"dayjs\";\nimport dataForge from \"data-forge\";\nimport { msToInterval, intervalToMS } from \"./lib/Timeseries.interval\";\nimport isEqual from \"lodash/isEqual\";\nimport has from \"lodash/has\";\nimport get from \"lodash/get\";\nimport fromPairs from \"lodash/fromPairs\";\nimport {\n\tgapExists,\n\tgapFill,\n\taverageMonthlyMap,\n\tfillMonthlyByMap,\n\tpad,\n\tannualAverage,\n\tannualMonthlyAverageMap,\n\tmonthlyRollingAverageMap,\n\tfillMonthlyBAnnualyMap\n} from \"./lib/Timeseries.fill\";\nimport {\n\tckmeans,\n\tmax,\n\tmedianAbsoluteDeviation,\n\tquantile\n} from \"simple-statistics\";\n\nimport {\n\trosnerTest,\n\tboxPlotTest,\n\tmodifiedZScoreTest\n} from \"./lib/Timeseries.statistics\";\nimport { annualScale, calculateChange } from \"./lib/misc\";\n\n// export default ;\n// Fill Options\nexport {\n\tTimeseries,\n\tannualAverage,\n\taverageMonthlyMap,\n\tannualMonthlyAverageMap,\n\tmonthlyRollingAverageMap,\n\tfillMonthlyBAnnualyMap,\n\tfillMonthlyByMap,\n\tpad\n};\nfunction Timeseries(data = [], options = {}) {\n\t// const { msIndex } = options;\n\tif (data instanceof Timeseries) {\n\t\treturn data;\n\t}\n\tif (data instanceof dataForge.DataFrame) {\n\t\tdata = data.toArray();\n\t}\n\n\tdata = data\n\t\t.map(({ date, ...others }) => ({ date: dayjs(date), ...others }))\n\t\t.sort((a, b) => a.date.valueOf() - b.date.valueOf());\n\tlet config = {\n\t\t// columns: ['date', 'value', 'raw', 'flag'],\n\t\tvalues: data,\n\t\tindex: data.map(({ date }) => date.toDate()),\n\t\tconsiderAllRows: true\n\t};\n\tdataForge.DataFrame.call(this, config);\n}\n\nTimeseries.prototype = Object.create(dataForge.DataFrame.prototype);\nTimeseries.prototype.constructor = Timeseries;\n\n// Getters\nfunction getValueColumns() {\n\treturn this.detectTypes()\n\t\t.where(row => row.Type === \"number\")\n\t\t.distinct(row => row.Column)\n\t\t.getSeries(\"Column\")\n\t\t.toArray();\n}\nfunction interval() {\n\tconst computeInterval = window => window.last() - window.first();\n\tconst intervals = this.getIndex()\n\t\t.window(2)\n\t\t.select(computeInterval)\n\t\t.detectValues()\n\t\t.orderBy(row => -row.Frequency);\n\t// .orderBy(row => row.Value);\n\n\tlet val = intervals.first().Value;\n\n\treturn msToInterval(val);\n}\n\nfunction dateRange(unit, adjustment) {\n\tlet start = dayjs(this.first().date),\n\t\tend = dayjs(this.last().date);\n\tif (adjustment) {\n\t\tstart = start.startOf(adjustment);\n\t\tend = end.endOf(adjustment);\n\t}\n\treturn end.diff(start, unit);\n}\nTimeseries.prototype.getValueColumns = getValueColumns;\nTimeseries.prototype.getInterval = interval;\nTimeseries.prototype.getDateRange = dateRange;\n\n// Statistics\nfunction cvrsme(actual, simulated) {\n\tlet df = this.subset([actual, simulated])\n\t\t.resetIndex()\n\t\t.generateSeries({\n\t\t\tactual: row => row[actual] || 0,\n\t\t\tsimulated: row => row[simulated] || 0\n\t\t})\n\t\t.dropSeries([actual, simulated])\n\t\t.generateSeries({ diff: row => row.actual - row.simulated });\n\tlet n = df.count();\n\tlet p = 1.0;\n\tlet ybar = df.getSeries(\"actual\").sum() / n;\n\tlet v = Math.sqrt(df.getSeries(\"diff\").sum() / (n - p)) / ybar;\n\treturn v;\n}\nfunction nmbe(actual, simulated) {\n\tlet df = this.subset([actual, simulated])\n\t\t.resetIndex()\n\t\t.generateSeries({\n\t\t\tactual: row => row[actual] || 0,\n\t\t\tsimulated: row => row[simulated] || 0\n\t\t})\n\t\t.dropSeries([actual, simulated])\n\t\t.generateSeries({ diff: row => row.actual - row.simulated });\n\n\tlet n = df.count();\n\tlet p = 1.0;\n\tlet ybar = df.getSeries(\"actual\").sum() / n;\n\tlet b = df.getSeries(\"diff\").sum() / ((n - p) * ybar);\n\treturn b;\n}\nTimeseries.prototype.cvrsme = cvrsme;\nTimeseries.prototype.nmbe = nmbe;\n\n// Formatting\nfunction toCSV() {\n\tlet df = this.transformSeries({\n\t\tdate: date => dayjs(date).toISOString()\n\t}).toCSV();\n\treturn df;\n}\nTimeseries.prototype.asCSV = toCSV;\n// Methods\nfunction calculateThresholdOptions({\n\tk,\n\tfilterZeros = true,\n\tfilterNegative = true\n} = {}) {\n\tlet noflags = this.where(\n\t\trow =>\n\t\t\trow.flag === null ||\n\t\t\trow.flag === undefined ||\n\t\t\t(Array.isArray(row.flag) && row.flag.length === 0)\n\t)\n\t\t.where(row => !isNaN(row.value) && row.value !== null)\n\t\t.getSeries(\"value\");\n\tif (filterZeros) noflags = noflags.where(value => value !== 0);\n\tif (filterNegative) noflags = noflags.where(value => value > 0);\n\tif (!k) {\n\t\tk =\n\t\t\tnoflags.count() < 1000\n\t\t\t\t? Math.floor(noflags.count() * 0.15)\n\t\t\t\t: Math.min(...[1000, Math.floor(noflags.count() * 0.02)]);\n\t}\n\tif (noflags.count() < 5) return {};\n\tlet { thresholds: esd } = rosnerTest(noflags.toArray(), k);\n\tlet { thresholds: box } = boxPlotTest(noflags.toArray());\n\tlet { thresholds: modz } = modifiedZScoreTest(noflags.toArray());\n\treturn { esd, box, modz };\n}\n\nfunction getBestThreshold() {\n\ttry {\n\t\tlet thresholds = this.calculateThresholdOptions();\n\t\tconst thresholdGroups = ckmeans(\n\t\t\t[\n\t\t\t\tget(thresholds, \"esd.upper\", null),\n\t\t\t\tget(thresholds, \"modz.upper\", null),\n\t\t\t\tget(thresholds, \"box.lowerOuter\", null),\n\t\t\t\tget(thresholds, \"box.upperOuter\", null)\n\t\t\t].filter(v => v),\n\t\t\t2\n\t\t);\n\t\tlet threshold_actual = max(\n\t\t\tthresholdGroups.reduce((a, b) => (a.length > b.length ? a : b))\n\t\t);\n\t\treturn threshold_actual;\n\t} catch (error) {\n\t\tconsole.error(error);\n\t\tthrow new Error(\"Cannot determine threshold\");\n\t}\n}\n\nfunction calculateStatistics(options = {}) {\n\tconst {\n\t\tcolumn = \"value\",\n\t\tfilterZeros = false,\n\t\tfilterNegative = true\n\t} = options;\n\tlet series = this.deflate(row => row[column]).where(value => !isNaN(value));\n\tif (filterNegative) series = series.where(value => value >= 0);\n\tif (filterZeros) series = series.where(value => value !== 0);\n\tlet median = series.median();\n\tlet mean = series.average();\n\tlet count = series.count();\n\tlet std = series.std();\n\tlet min = series.min();\n\tlet max = series.max();\n\tlet mad = medianAbsoluteDeviation(series.toArray());\n\tlet q1 = quantile(series.toArray(), 0.25);\n\tlet q3 = quantile(series.toArray(), 0.75);\n\tlet iqr = q3 - q1;\n\tlet stats = {\n\t\tmedian,\n\t\tmean,\n\t\tcount,\n\t\tstd,\n\t\tmin,\n\t\tmax,\n\t\tmad,\n\t\tq1,\n\t\tq3,\n\t\tiqr\n\t};\n\treturn stats;\n}\n\nTimeseries.prototype.calculateStatistics = calculateStatistics;\nTimeseries.prototype.calculateThresholdOptions = calculateThresholdOptions;\nTimeseries.prototype.getBestThreshold = getBestThreshold;\n\n// Chainable Methods\nfunction betweenDates(start, end) {\n\tstart = dayjs(start).toDate();\n\tend = dayjs(end).toDate();\n\tlet df = this.between(start, end);\n\treturn new Timeseries(df);\n}\nTimeseries.prototype.betweenDates = betweenDates;\n\nfunction transformAllSeries(adjustmentFunction, { exclude }) {\n\tlet df = this;\n\tlet columns = (columns = df\n\t\t.detectTypes()\n\t\t.where(row => row.Type === \"number\")\n\t\t.distinct(row => row.Column)\n\t\t.getSeries(\"Column\")\n\t\t.toArray());\n\tif (exclude && Array.isArray(exclude)) {\n\t\tcolumns = columns.filter(col => exclude.indexOf(col) === -1);\n\t}\n\tcolumns.forEach(col => {\n\t\tdf = df.transformSeries({\n\t\t\t[col]: value => {\n\t\t\t\tif (isNaN(value)) {\n\t\t\t\t\treturn value;\n\t\t\t\t} else {\n\t\t\t\t\treturn adjustmentFunction(value);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\treturn df;\n}\n\nTimeseries.prototype.transformAllSeries = transformAllSeries;\n\nfunction reset() {\n\tlet df = this.withSeries({\n\t\tvalue: row =>\n\t\t\trow.flag && Array.isArray(row.flag) && row.flag.length > 0\n\t\t\t\t? row.raw\n\t\t\t\t: row.value\n\t})\n\t\t.subset([\"date\", \"value\"])\n\t\t.where(row => !isNaN(row.value) && row.value !== null);\n\treturn new Timeseries(df);\n}\nTimeseries.prototype.reset = reset;\n\n// To and From Totalizers\nfunction fromTotalizer(col = \"value\", { acceptInitial = false } = {}) {\n\tlet array = this.subset([\"date\", col])\n\t\t.toArray()\n\t\t.map((v, i, arr) => {\n\t\t\tlet val = acceptInitial ? v[col] : null;\n\t\t\tif (arr[i - 1]) {\n\t\t\t\tval = v[col] - arr[i - 1][col];\n\t\t\t}\n\t\t\treturn { date: v.date, [col]: val };\n\t\t});\n\tlet ndf = new Timeseries(a);\n\treturn ndf;\n}\nfunction toTotalizer(col, { adjustInitial } = {}) {\n\tlet array = this.subset([\"date\", col])\n\t\t.toArray()\n\t\t.map((v, i, arr) => {\n\t\t\tlet val = arr\n\t\t\t\t.slice(0, i)\n\t\t\t\t.map(obj => obj[col])\n\t\t\t\t.reduce((a, b) => a + b, 0);\n\t\t\treturn { date: v.date, [col]: val };\n\t\t});\n\tlet ndf = new Timeseries(a);\n\treturn ndf;\n}\nTimeseries.prototype.fromTotalizer = fromTotalizer;\nTimeseries.prototype.toTotalizer = toTotalizer;\n\nfunction group(interval, toArray) {\n\tif ([\"hour\", \"day\", \"week\", \"month\", \"year\"].indexOf(interval) === -1)\n\t\tthrow new Error(\"interval type not supported\");\n\tlet dateComparison = row => dayjs(row.date).startOf(interval);\n\tlet groups = this.groupBy(dateComparison);\n\treturn groups;\n}\n\nTimeseries.prototype.group = group;\n\nfunction removeOutliers({ series = \"value\", lower, upper } = {}) {\n\tif (lower > upper) throw new Error(\"thresholds invalid\");\n\tlet outlierCheck = (value, lower, upper) => value < lower || value > upper;\n\n\tlet outliers = this.where(row => outlierCheck(row[series], lower, upper))\n\t\t.generateSeries({\n\t\t\traw: row => row[series],\n\t\t\tflag: ({ flag = [] }) => [\"outlier\", ...flag]\n\t\t})\n\t\t.transformSeries({\n\t\t\t[series]: value => null\n\t\t});\n\n\tlet merged = this.merge(outliers);\n\treturn new Timeseries(merged);\n}\n\nTimeseries.prototype.removeOutliers = removeOutliers;\nTimeseries.prototype.clean = removeOutliers;\n\nfunction downsample([duration, value], fillType = \"sum\") {\n\tif ([\"hour\", \"day\", \"month\", \"year\"].indexOf(duration) === -1)\n\t\tthrow new Error(\"interval type not supported\");\n\tif ([\"sum\", \"avg\", \"median\"].indexOf(fillType) === -1) {\n\t\tthrow new Error(\"aggregation type not suppported, only:\");\n\t}\n\tlet dateComparison = row => row.date.startOf(duration);\n\tlet valueColumns = this.getValueColumns();\n\tif (value) {\n\t\tdateComparison = row => row.date.startOf(duration).add(value, duration);\n\t}\n\tlet df = this.groupBy(dateComparison)\n\t\t.select(group => {\n\t\t\tconst date = group.first().date.startOf(duration);\n\t\t\treturn {\n\t\t\t\tdate,\n\t\t\t\t...fromPairs([\n\t\t\t\t\t...valueColumns.map(col => {\n\t\t\t\t\t\tlet value;\n\t\t\t\t\t\tswitch (fillType) {\n\t\t\t\t\t\t\tcase \"median\":\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.median();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"avg\":\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.average();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t// sum\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.sum();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn [col, value];\n\t\t\t\t\t}),\n\t\t\t\t\t...group\n\t\t\t\t\t\t.getColumnNames()\n\t\t\t\t\t\t.filter(col => col !== \"date\")\n\t\t\t\t\t\t.filter(col => valueColumns.indexOf(col) === -1)\n\t\t\t\t\t\t.map(col => {\n\t\t\t\t\t\t\tlet value = group\n\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t.distinct()\n\t\t\t\t\t\t\t\t.toArray();\n\t\t\t\t\t\t\tif (value.length === 1) value = value[0];\n\t\t\t\t\t\t\treturn [col, value];\n\t\t\t\t\t\t})\n\t\t\t\t])\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => dayjs(row.date).toDate());\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.downsample = downsample;\nfunction downsampleClean([duration, value], threshold = 0.8) {\n\tif ([\"hour\", \"day\", \"month\", \"year\"].indexOf(duration) === -1)\n\t\tthrow new Error(\"interval type not supported\");\n\tlet dateComparison = row => row.date.startOf(duration);\n\tlet valueColumns = this.getValueColumns();\n\tif (value) {\n\t\tdateComparison = row => row.date.startOf(duration).add(value, duration);\n\t}\n\tlet df = this.groupBy(dateComparison)\n\t\t.select(group => {\n\t\t\tconst date = group.first().date.startOf(duration);\n\t\t\tlet quality = new Timeseries(group).dataQuality().setIndex(\"flag\");\n\t\t\tlet clean = quality.at(\"clean\").percent;\n\t\t\treturn {\n\t\t\t\tdate,\n\t\t\t\tvalue:\n\t\t\t\t\tclean >= threshold\n\t\t\t\t\t\t? group\n\t\t\t\t\t\t\t\t.deflate(row => row.value)\n\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t.sum()\n\t\t\t\t\t\t: null\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => dayjs(row.date).toDate());\n\treturn new Timeseries(df);\n}\nTimeseries.prototype.downsampleClean = downsampleClean;\nfunction upsample([duration, value], fillType = \"average\", flag = false) {\n\t// Dont use this b/c it has the raw and flag values\n\tlet df = this;\n\n\t// let blank = Timeseries.blank(df.first().date, df.last().date, [\n\t// \tduration,\n\t// \tvalue\n\t// ]);\n\t// let n = Timeseries.merge([blank, df]).fillNull();\n\n\tlet n = df.fillGaps(\n\t\tgapExists([duration, value]),\n\t\tgapFill(fillType, [duration, value])\n\t);\n\tif (!flag) n = n.dropSeries([\"flag\"]);\n\treturn new Timeseries(n);\n}\n\nTimeseries.prototype.upsample = upsample;\n\nfunction populate(value, type = \"average\") {\n\tlet v;\n\tswitch (type) {\n\t\tcase \"fill\":\n\t\t\tv = value;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tv = value / this.count();\n\t\t\tbreak;\n\t}\n\tlet df = this.generateSeries({ value: row => v });\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.populate = populate;\n\nfunction reduceToValue(columnNames) {\n\tfunction chooseValue(row, columnNames = []) {\n\t\tlet values = columnNames.map(n => row[n]).filter(v => v);\n\t\treturn values[0] || 0;\n\t}\n\tlet df = this.generateSeries({\n\t\tvalue: row => chooseValue(row, columnNames)\n\t}).subset([\"date\", \"value\"]);\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.reduceToValue = reduceToValue;\n\nfunction cumulativeSum(columns) {\n\tif (!columns) columns = this.getValueColumns();\n\tif (columns & !Array.isArray(columns)) columns = [columns];\n\tlet df = this;\n\tconst cumulativeSum = sum => value => (sum += value);\n\tcolumns.forEach(s => {\n\t\tdf = df.withSeries(s, df.getSeries(s).select(cumulativeSum(0)));\n\t});\n\treturn new Timeseries(df);\n}\nTimeseries.prototype.cumulativeSum = cumulativeSum;\n\nfunction totalRows(series = [\"value\"], colname = \"total\") {\n\tlet ndf = this.generateSeries({\n\t\t[colname]: row => series.map(v => row[v] || 0).reduce((a, b) => a + b, 0)\n\t});\n\treturn new Timeseries(ndf);\n}\nTimeseries.prototype.totalRows = totalRows;\nTimeseries.prototype.totalRow = totalRows;\nTimeseries.prototype.totalColumns = totalRows;\n\n// Baseline Functions\nfunction rollingPercentChange(col = \"value\", decimal = true) {\n\tlet df = this;\n\tlet s = df\n\t\t.getSeries(col)\n\t\t.rollingWindow(2)\n\t\t.select(window => {\n\t\t\tlet v = (window.last() - window.first()) / Math.abs(window.first());\n\t\t\treturn [window.getIndex().last(), v];\n\t\t})\n\t\t.withIndex(pair => pair[0])\n\t\t.select(pair => pair[1]);\n\tlet delta = df.withSeries(\"delta\", s);\n\tif (!decimal) delta = delta.transformSeries({ delta: value => value * 100 });\n\treturn new Timeseries(delta);\n}\n\nTimeseries.prototype.rollingPercentChange = rollingPercentChange;\nfunction baselinePercentChange(baselineDF) {\n\t// Only Change in Year\n\tif (!(baselineDF instanceof Timeseries))\n\t\tbaselineDF = new Timeseries(baselineDF);\n\tlet dfwb;\n\tif (baselineDF.count() > 1) {\n\t\tlet interval = this.getInterval();\n\t\tlet baselineInterval = baselineDF.interval;\n\t\tif (!isEqual(interval, baselineInterval)) {\n\t\t\tconsole.error(interval, baselineInterval);\n\t\t\tthrow new Error(\"baseline and data intervals do not match\");\n\t\t}\n\t\tlet indexer;\n\t\tswitch (interval[0]) {\n\t\t\tcase \"day\":\n\t\t\t\tindexer = date => `${date.month()}-${date.date()}`;\n\t\t\t\tbreak;\n\t\t\tcase \"month\":\n\t\t\t\tindexer = date => date.month();\n\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tindexer = date => 0;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tlet indexedBaseline = baselineDF.withIndex(row => indexer(row.date));\n\t\tlet getBaselineValue = index => {\n\t\t\tlet at = indexedBaseline.at(index);\n\t\t\tif (at && has(at, \"value\")) {\n\t\t\t\treturn at.value;\n\t\t\t} else {\n\t\t\t\treturn indexedBaseline.getSeries(\"value\").average();\n\t\t\t}\n\t\t};\n\t\tdfwb = this.generateSeries({\n\t\t\tbaseline: row => getBaselineValue(indexer(row.date))\n\t\t});\n\t} else {\n\t\tdfwb = this.generateSeries({\n\t\t\tbaseline: row => baselineDF.first().value\n\t\t});\n\t}\n\tdfwb = dfwb.generateSeries({\n\t\tdelta: row => calculateChange(row.baseline, row.value)\n\t});\n\treturn new Timeseries(dfwb);\n}\n\nTimeseries.prototype.baselinePercentChange = baselinePercentChange;\nTimeseries.prototype.addBaselineDelta = baselinePercentChange;\n\nfunction annualIntensity(normalizeValue = 1) {\n\tlet interval = this.getInterval();\n\tlet annual = this.groupBy(row => row.date.year())\n\t\t.select(group => {\n\t\t\tlet startDate = group.first().date;\n\t\t\tlet endDate = group\n\t\t\t\t.last()\n\t\t\t\t.date.add(interval[1] || 1, interval[0] || \"month\");\n\t\t\tlet scaler = annualScale(startDate, endDate);\n\t\t\treturn {\n\t\t\t\tstartDate,\n\t\t\t\tendDate,\n\t\t\t\t...fromPairs(\n\t\t\t\t\tthis.getValueColumns().map(col => [\n\t\t\t\t\t\tcol,\n\t\t\t\t\t\t(group\n\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t.where(v => v)\n\t\t\t\t\t\t\t.sum() *\n\t\t\t\t\t\t\tscaler) /\n\t\t\t\t\t\t\tnormalizeValue\n\t\t\t\t\t])\n\t\t\t\t)\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.renameSeries({ startDate: \"date\" })\n\t\t.dropSeries(\"endDate\");\n\treturn new Timeseries(annual);\n}\n\nTimeseries.prototype.annualIntensity = annualIntensity;\n\n// Fill Functions\n\nfunction fillMissing() {\n\tlet df = this;\n\tlet startDate = df.first().date.toDate(),\n\t\tendDate = df.last().date.toDate();\n\tlet interval = df.getInterval();\n\tlet bdf = Timeseries.blank(\n\t\tstartDate,\n\t\tendDate,\n\t\tinterval,\n\t\t\"missing\"\n\t).withIndex(row => row.date.valueOf());\n\tlet m = bdf.merge(df.withIndex(row => row.date.valueOf())).generateSeries({\n\t\tflag: row =>\n\t\t\trow.value === null || row.value === undefined ? row.flag : undefined\n\t});\n\tm = new Timeseries(m);\n\treturn m;\n}\nTimeseries.prototype.fillMissing = fillMissing;\n\nfunction fillNull({ series = \"value\", value, callback }) {\n\tconst seriesCheck = row => row[series] === null || row[series] === undefined;\n\tif (callback) {\n\t\tlet df = this.generateSeries({\n\t\t\tflag: row =>\n\t\t\t\tseriesCheck(row) ? [\"fill\", ...(row.flag || [])] : row.flag,\n\t\t\t[series]: row => (seriesCheck(row) ? callback(row) : row[series])\n\t\t});\n\t\treturn new Timeseries(df);\n\t} else if (value) {\n\t\tlet df = this.generateSeries({\n\t\t\tflag: row => (seriesCheck(row) ? [\"fill\", ...(row.flag || [])] : row.flag)\n\t\t}).transformSeries({\n\t\t\t[series]: currentValue =>\n\t\t\t\tcurrentValue === null || currentValue === undefined\n\t\t\t\t\t? value\n\t\t\t\t\t: currentValue\n\t\t});\n\t\treturn new Timeseries(df);\n\t} else {\n\t\treturn this;\n\t}\n}\nTimeseries.prototype.fillNull = fillNull;\n\nfunction zeroFaultDetection(thresholdInterval) {\n\tif (!Array.isArray(thresholdInterval))\n\t\tthresholdInterval = [thresholdInterval, 1];\n\tthresholdInterval = intervalToMS(thresholdInterval);\n\tlet df = this;\n\tlet zeroFaultDates = df\n\t\t.where(row => row.value === 0)\n\t\t.ensureSeries(\n\t\t\t\"interval\",\n\t\t\tdf\n\t\t\t\t.where(row => row.value === 0)\n\t\t\t\t.getSeries(\"date\")\n\t\t\t\t.amountChange()\n\t\t)\n\t\t.where(v => v.interval <= thresholdInterval)\n\t\t.subset([\"date\"])\n\t\t.generateSeries({ value: row => null, flag: row => [\"zeroFault\"] });\n\n\tlet zeroFaultDF = new Timeseries(this.merge(zeroFaultDates));\n\treturn zeroFaultDF;\n}\n\nTimeseries.prototype.zeroFaultDetection = zeroFaultDetection;\n\nfunction dataQuality() {\n\tlet count = this.count();\n\tlet withFlags = this.where(r => Array.isArray(r.flag) && r.flag.length > 0)\n\t\t.groupBy(r => r.flag.toString())\n\t\t.select(group => ({\n\t\t\tflag: group.first().flag,\n\t\t\tcount: group.count(),\n\t\t\tpercent: group.count() / count\n\t\t}))\n\t\t.inflate();\n\tlet good = this.where(\n\t\tr =>\n\t\t\tr.flag === undefined ||\n\t\t\tr.flag === null ||\n\t\t\t(Array.isArray(r.flag) && r.flag.length === 0)\n\t).count();\n\tlet quality = withFlags\n\t\t.appendPair([\n\t\t\twithFlags.count(),\n\t\t\t{ flag: \"clean\", count: good, percent: good / count }\n\t\t])\n\t\t.orderByDescending(row => row.count);\n\treturn quality;\n}\n\nTimeseries.prototype.dataQuality = dataQuality;\n\nfunction monthlyWithQual() {\n\tlet interval = this.getInterval();\n\tlet ms = intervalToMS(interval);\n\tconst duration = \"month\";\n\tlet dateComparison = row =>\n\t\tdayjs(row.date)\n\t\t\t.startOf()\n\t\t\t.valueOf();\n\tlet ts = this.groupBy(dateComparison)\n\t\t.select(group => {\n\t\t\tconst date = dayjs(group.first().date)\n\t\t\t\t.startOf(duration)\n\t\t\t\t.toDate();\n\t\t\tlet fullCount = Math.floor(\n\t\t\t\tdayjs(date)\n\t\t\t\t\t.endOf(\"month\")\n\t\t\t\t\t.diff(dayjs(date), \"millisecond\") / ms\n\t\t\t);\n\t\t\tlet days = new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\n\t\t\tlet count = group\n\t\t\t\t.getSeries(\"value\")\n\t\t\t\t.where(v => v && v !== 0)\n\t\t\t\t.toArray().length;\n\t\t\tlet value = group\n\t\t\t\t.getSeries(\"value\")\n\t\t\t\t.where(v => !isNaN(v))\n\t\t\t\t.sum();\n\t\t\treturn {\n\t\t\t\tdate,\n\t\t\t\tvalue: isNaN(value) ? 0 : value,\n\t\t\t\tcount,\n\t\t\t\tfullCount,\n\t\t\t\tscore: count / fullCount\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => row.date.toDate());\n\treturn new Timeseries(ts);\n}\nTimeseries.prototype.monthlyWithQual = monthlyWithQual;\n\nfunction threeYearAverage(date, series = \"value\", defaultValue) {\n\tdate = dayjs(date);\n\tif (!defaultValue)\n\t\tdefaultValue = this.getSeries(series)\n\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t.average();\n\n\t// let months = df\n\t// \t.before(date.valueOf())\n\t// \t.where(row => dayjs(row.date).month() === date.month())\n\t// \t.where(row => row.score > 0.9)\n\t// \t.tail(3);\n\tlet months = this.before(date.toDate())\n\t\t.where(row => row.date.month() === date.month())\n\t\t.orderBy(row => dayjs(row.date))\n\t\t.tail(3);\n\t// .where(row => row.score > 0.9);\n\tif (months.count() > 0) {\n\t\tlet val = months\n\t\t\t.getSeries(series)\n\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t.average();\n\t\treturn val;\n\t} else {\n\t\treturn defaultValue;\n\t}\n}\nTimeseries.prototype.threeYearAverage = threeYearAverage;\n\nfunction averageFill() {\n\tlet df = this;\n\tlet avg = df\n\t\t// .where(row => row.score ?row.score >= 0.9)\n\t\t.getSeries(\"value\")\n\t\t.where(v => !isNaN(v) && v !== null)\n\t\t.average();\n\tlet monthlyAvg = df\n\t\t.generateSeries({\n\t\t\trollingAverage: row => df.threeYearAverage(row.date, \"value\", avg)\n\t\t})\n\t\t.generateSeries({\n\t\t\tflag: row => (row.value ? row.flag : [\"filled\", ...(row.flag || [])])\n\t\t})\n\t\t.generateSeries({\n\t\t\tvalue: row => (row.value ? row.value : row.rollingAverage)\n\t\t})\n\t\t.dropSeries([\"rollingAverage\"]);\n\treturn new Timeseries(monthlyAvg);\n}\n\nTimeseries.prototype.averageFill = averageFill;\nfunction toArray() {\n\tconst values = [];\n\tfor (const value of this.getContent().values) {\n\t\tif (value !== undefined) {\n\t\t\tvalues.push(value);\n\t\t}\n\t}\n\treturn values.map(({ date, ...others }) => ({\n\t\tdate: date.toDate(),\n\t\t...others\n\t}));\n}\nTimeseries.prototype.toArray = toArray;\n\nfunction atDate(date) {\n\tif (this.none()) {\n\t\treturn undefined;\n\t}\n\tdate = dayjs(date).valueOf();\n\n\tfor (const pair of this.getContent().pairs) {\n\t\tif (pair[0].valueOf() === date) {\n\t\t\treturn pair[1];\n\t\t}\n\t}\n\treturn undefined;\n}\nTimeseries.prototype.atDate = atDate;\n\n// Static Methods\nfunction blank(startDate, endDate, [duration, value = 1], flag) {\n\tif ([\"minute\", \"hour\", \"day\", \"month\", \"year\"].indexOf(duration) < 0) {\n\t\tconsole.error(interval);\n\t\tthrow new Error(\"interval type not supported\");\n\t}\n\tstartDate = dayjs(startDate);\n\tendDate = dayjs(endDate);\n\tlet dates = [startDate];\n\tlet interval = intervalToMS([duration, value]);\n\twhile (dates[dates.length - 1].valueOf() < endDate.valueOf()) {\n\t\tdates.push(dayjs(dates[dates.length - 1]).add(value, duration));\n\t}\n\tlet df = new Timeseries(dates.map(date => ({ date })));\n\n\tif (flag) {\n\t\tdf = new Timeseries(\n\t\t\tdf.generateSeries({\n\t\t\t\tflag: row => [flag]\n\t\t\t})\n\t\t);\n\t}\n\n\treturn df;\n}\nTimeseries.blank = blank;\nfunction aggregate(dataframes) {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df => new Timeseries(df));\n\tconst valueColumns = new Set(\n\t\tdataframes.map(df => df.getValueColumns()).reduce((a, b) => a.concat(b), [])\n\t);\n\tconst concatenated = dataForge.DataFrame.concat(dataframes)\n\t\t.groupBy(row => row.date)\n\t\t.select(group => {\n\t\t\tconst date = group.first().date;\n\t\t\tlet o = { date };\n\t\t\tvalueColumns.forEach(c => (o[c] = group.deflate(row => row[c]).sum()));\n\t\t\tgroup\n\t\t\t\t.getColumnNames()\n\t\t\t\t.filter(col => col !== \"date\")\n\t\t\t\t.filter(col => valueColumns.has(col) === -1)\n\t\t\t\t.forEach(col => {\n\t\t\t\t\tlet value = group\n\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t.distinct()\n\t\t\t\t\t\t.toArray();\n\t\t\t\t\tif (value.length === 1) value = value[0];\n\t\t\t\t\to[col] = value;\n\t\t\t\t\treturn;\n\t\t\t\t});\n\t\t\treturn o;\n\t\t})\n\t\t.inflate();\n\treturn new Timeseries(concatenated);\n}\n\nTimeseries.aggregate = aggregate;\nTimeseries.concat = dataframes => {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df =>\n\t\tnew Timeseries(df).withIndex(row => row.date.valueOf())\n\t);\n\tlet df = dataForge.DataFrame.concat(dataframes);\n\treturn new Timeseries(df);\n};\nTimeseries.merge = dataframes => {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df =>\n\t\tnew Timeseries(df).withIndex(row => row.date.valueOf())\n\t);\n\tlet df = dataForge.DataFrame.merge(dataframes);\n\treturn new Timeseries(df);\n};\n","import dayjs from \"dayjs\";\nexport const annualScale = (start, end) =>\n\t365 / dayjs(end).diff(dayjs(start), \"day\");\nexport const calculateChange = (baseline, value) =>\n\t(value - baseline) / baseline;\n"],"names":["intervalToMS","unit","value","start","dayjs","add","diff","valueFiller","fillType","startValue","endValue","entryIndex","numEntries","overrideValue","dateFunction","date","flag","indexOf","Error","fromPairs","toPairs","map","key","averageMonthlyMap","df","data","group","select","month","first","getSeries","where","v","average","m","Map","toArray","avg","set","rval","values","deflate","row","x","std","sampleStandardDeviation","mean","_mean","ndf","generateSeries","ares","R","DataFrame","Math","abs","max","lambdaTest","n","i","alpha","p","pValue","t","degreeOfFreedom","Studentt","inv","tValue","lambda","sqrt","pow","modz","mad","median","modifiedZScoreTest","_median","medianAbsoluteDeviation","outliers","sort","a","b","filter","thresholds","upper","min","Infinity","lower","Timeseries","options","dataForge","config","others","valueOf","index","toDate","considerAllRows","call","this","removeOutliers","series","outlierCheck","raw","transformSeries","merge","totalRows","colname","reduce","baselinePercentChange","baselineDF","dfwb","count","indexer","interval","getInterval","baselineInterval","isEqual","console","error","indexedBaseline","withIndex","baseline","at","has","delta","prototype","Object","create","constructor","getValueColumns","detectTypes","Type","distinct","Column","ms","end","getIndex","window","last","detectValues","orderBy","Frequency","Value","ceil","getDateRange","adjustment","startOf","endOf","cvrsme","actual","simulated","subset","resetIndex","dropSeries","ybar","sum","nmbe","asCSV","toISOString","toCSV","calculateStatistics","column","filterZeros","filterNegative","isNaN","q1","quantile","q3","iqr","calculateThresholdOptions","k","noflags","Array","isArray","length","floor","esd","dataset","newdf","dataframe","trip","pair","assign","push","outlierValues","outlier","takeWhile","iterations","rosnerTest","box","lowerInner","upperInner","lowerOuter","upperOuter","getBestThreshold","thresholdGroups","ckmeans","get","betweenDates","between","transformAllSeries","adjustmentFunction","exclude","columns","col","forEach","reset","withSeries","fromTotalizer","acceptInitial","arr","val","toTotalizer","slice","obj","groupBy","clean","downsample","duration","dateComparison","valueColumns","getColumnNames","inflate","downsampleClean","threshold","dataQuality","setIndex","percent","upsample","fillGaps","durationValue","pairA","pairB","startDate","gapExists","endDate","newEntries","e","gapFill","populate","type","reduceToValue","columnNames","chooseValue","cumulativeSum","s","totalRow","totalColumns","rollingPercentChange","decimal","rollingWindow","addBaselineDelta","annualIntensity","normalizeValue","year","scaler","_this","renameSeries","fillMissing","blank","undefined","fillNull","callback","seriesCheck","currentValue","zeroFaultDetection","thresholdInterval","zeroFaultDates","ensureSeries","amountChange","withFlags","r","toString","good","appendPair","orderByDescending","monthlyWithQual","fullCount","Date","getFullYear","getMonth","getDate","score","threeYearAverage","defaultValue","months","before","tail","averageFill","rollingAverage","getContent","atDate","none","pairs","dates","aggregate","dataframes","Set","concat","o","c","years","after","subtract","bake","hour","minute","ts","annualMonthlyMap","monthMap","validOnly","Boolean"],"mappings":"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"}
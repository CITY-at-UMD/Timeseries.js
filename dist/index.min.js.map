{"version":3,"file":"index.min.js","sources":["../src/lib/Timeseries.interval.js","../src/lib/Timeseries.fill.js","../src/lib/Timeseries.statistics.js","../src/lib/misc.js","../src/index.js"],"sourcesContent":["import dayjs from \"dayjs\";\n\nconst msToInterval = ms => {\n\tlet start = dayjs();\n\tlet end = dayjs().add(ms);\n\tif (end.diff(start, \"month\", true) >= 11) {\n\t\treturn [\"year\", Math.ceil(end.diff(start, \"year\", true))];\n\t} else if (end.diff(start, \"day\", true) >= 28) {\n\t\treturn [\"month\", Math.ceil(end.diff(start, \"month\", true))];\n\t} else if (end.diff(start, \"hour\", true) >= 23) {\n\t\treturn [\"day\", Math.ceil(end.diff(start, \"day\", true))];\n\t} else if (end.diff(start, \"minute\", true) >= 55) {\n\t\treturn [\"hour\", Math.ceil(end.diff(start, \"hour\", true))];\n\t} else {\n\t\treturn [\"minute\", end.diff(start, \"minute\")];\n\t}\n};\nconst intervalToMS = ([unit, value]) => {\n\tlet start = dayjs();\n\tlet end = dayjs().add(value, unit);\n\treturn end.diff(start);\n};\nfunction calculateInterval(df, startDate, endDate) {\n\tif (!startDate) startDate = df.first.date;\n\tif (!endDate) endDate = df.last.date;\n\tfunction computeInterval(window) {\n\t\treturn window.last() - window.first();\n\t}\n\tconst intervals = df\n\t\t.between(startDate, endDate)\n\t\t.getIndex()\n\t\t.window(2)\n\t\t.select(computeInterval)\n\t\t.detectValues()\n\t\t.orderBy(row => row.Frequency);\n\n\tlet val = intervals.last().Value;\n\treturn msToInterval(val);\n}\nexport { msToInterval, intervalToMS, calculateInterval };\n","import dayjs from \"dayjs\";\nimport fromPairs from \"lodash/fromPairs\";\nimport toPairs from \"lodash/toPairs\";\nimport { mean } from \"simple-statistics\";\nimport { Timeseries } from \"../index\";\nconst gapExists = ([duration, durationValue = 1]) => (pairA, pairB) => {\n\tconst startDate = pairA[0];\n\tconst endDate = pairB[0];\n\tlet gapSize = Math.floor(\n\t\tdayjs(endDate).diff(startDate, duration, true) / durationValue\n\t);\n\n\tif (gapSize > 0) return true;\n\treturn false;\n};\n\nconst valueFiller = (\n\tfillType,\n\t{ startValue, endValue, entryIndex, numEntries },\n\t{ overrideValue, dateFunction, date, flag }\n) => {\n\tif (\n\t\t[\"pad\", \"interpolate\", \"average\", \"dateFunction\", \"value\"].indexOf(\n\t\t\tfillType\n\t\t) === -1\n\t) {\n\t\tthrow new Error(\"fill Type not supported\");\n\t}\n\tlet value;\n\tif (fillType === \"pad\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\treturn [key, startValue[key]];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", \"pad\"];\n\t} else if (fillType === \"interpolate\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv =\n\t\t\t\t\tstartValue[key] +\n\t\t\t\t\t(entryIndex + 1) *\n\t\t\t\t\t\t((endValue[key] - startValue[key]) / (numEntries + 1));\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"average\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv = (startValue[key] + endValue[key]) / numEntries;\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"dateFunction\" && dateFunction) {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv = dateFunction(date);\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"value\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv;\n\t\t\t\tif (typeof overrideValue === \"number\") {\n\t\t\t\t\tnv = overrideValue;\n\t\t\t\t} else {\n\t\t\t\t\tnv = overrideValue[key];\n\t\t\t\t}\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\treturn [key, null];\n\t\t\t})\n\t\t);\n\t\tflag = [\"fill\"];\n\t}\n\treturn { ...value, flag };\n};\n\nconst gapFill = (\n\tfillType,\n\t[duration, durationValue],\n\t{ overrideValue, dateFunction, flag } = {}\n) => (pairA, pairB) => {\n\t// Fill values forward.\n\n\tconst startDate = dayjs(pairA[0]);\n\tconst endDate = dayjs(pairB[0]);\n\tlet gapSize = Math.floor(\n\t\tdayjs(endDate).diff(startDate, duration) / durationValue\n\t);\n\tconst numEntries = gapSize - 1;\n\tconst startValue = pairA[1];\n\tconst endValue = pairB[1];\n\tconst newEntries = [];\n\tfor (let entryIndex = 0; entryIndex < numEntries; ++entryIndex) {\n\t\tlet adjustment = valueFiller(\n\t\t\t\tfillType,\n\t\t\t\t{ startValue, endValue, entryIndex, numEntries },\n\t\t\t\t{\n\t\t\t\t\toverrideValue,\n\t\t\t\t\tdateFunction,\n\t\t\t\t\tflag\n\t\t\t\t}\n\t\t\t),\n\t\t\tdate = dayjs(startDate)\n\t\t\t\t.add((entryIndex + 1) * durationValue, duration)\n\t\t\t\t.toDate();\n\t\tlet e = [date.valueOf(), Object.assign({}, adjustment, { date })];\n\t\tnewEntries.push(e);\n\t}\n\n\treturn newEntries;\n};\n\n// Basic Fill Functions\nconst averageMonthlyMap = df => {\n\tlet data = df.group(\"month\").select(group => ({\n\t\tmonth: group.first().date.month(),\n\t\tvalue: group\n\t\t\t.getSeries(\"value\")\n\t\t\t.where(v => v)\n\t\t\t.average()\n\t}));\n\tlet m = new Map(data.toArray().map(({ month, value }) => [month, value]));\n\tlet avg = data.getSeries(\"value\").average();\n\tm.set(\"default\", avg);\n\treturn m;\n};\n\nconst annualMonthlyAverageMap = df => {\n\tlet data = df\n\t\t.groupBy(row => row.date.year())\n\t\t.select(group => {\n\t\t\tconst date = group.first().date.startOf(\"year\");\n\t\t\tlet ts = new Timeseries(group).downsample([\"month\", 1], \"avg\");\n\t\t\tlet avg = ts.getSeries(\"value\").average();\n\t\t\tlet map = averageMonthlyMap(ts);\n\t\t\tmap.set(\"avg\", avg);\n\t\t\treturn [date.year(), map];\n\t\t});\n\tlet m = new Map(data.toArray());\n\t// let deafult =\n\treturn m;\n};\n\nconst monthlyRollingAverageMap = (\n\tdf,\n\t{ years = 3, series = \"value\", aggregator = \"average\", validOnly = true } = {}\n) => {\n\tlet months = df\n\t\t.groupBy(row => row.date.startOf(\"month\").toDate())\n\t\t.select(group => {\n\t\t\tlet date = group.first().date.startOf(\"month\");\n\t\t\tlet value = group\n\t\t\t\t.getSeries(series)\n\t\t\t\t.where(v => (validOnly ? Boolean(v) : true))\n\t\t\t\t.average();\n\t\t\treturn { date, value };\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => row.date.toDate())\n\t\t.bake();\n\tlet data = months\n\t\t.groupBy(row => row.date.month())\n\t\t.select(group => {\n\t\t\tlet values = new Map(\n\t\t\t\tgroup.rollingWindow(years).select(window => [\n\t\t\t\t\twindow.last().date.year(),\n\t\t\t\t\twindow\n\t\t\t\t\t\t.getSeries(series)\n\t\t\t\t\t\t.where(v => (validOnly ? Boolean(v) : true))\n\t\t\t\t\t\t.average() ||\n\t\t\t\t\t\tgroup\n\t\t\t\t\t\t\t.getSeries(series)\n\t\t\t\t\t\t\t.where(v => (validOnly ? Boolean(v) : true))\n\t\t\t\t\t\t\t.average()\n\t\t\t\t])\n\t\t\t);\n\t\t\tgroup\n\t\t\t\t.where(row => !values.has(row.date.year()))\n\t\t\t\t.forEach(row => {\n\t\t\t\t\tlet value =\n\t\t\t\t\t\tmonths.before(row.date.toDate()).count() > 0\n\t\t\t\t\t\t\t? months.before(row.date.toDate()).last()[series]\n\t\t\t\t\t\t\t: months.getSeries(series).average();\n\t\t\t\t\tvalues.set(row.date.year(), value);\n\t\t\t\t});\n\n\t\t\tlet month = group.first().date.month();\n\t\t\treturn [month, values];\n\t\t});\n\n\treturn new Map(data.toArray());\n};\n\nconst fillMonthlyByMap = monthMap => row => monthMap.get(row.date.month());\nconst fillMonthlyBAnnualyMap = annualMonthlyMap => row => {\n\tlet month = row.date.month(),\n\t\tyear = row.date.year();\n\tif (annualMonthlyMap.has(month)) {\n\t\tif (annualMonthlyMap.has(month)) {\n\t\t\treturn annualMonthlyMap.get(month).get(year);\n\t\t} else {\n\t\t\treturn mean([...annualMonthlyMap.get(month).values()]);\n\t\t}\n\t} else {\n\t\treturn mean(\n\t\t\t[...annualMonthlyMap.values()].map(m =>\n\t\t\t\t[...m.values()].reduce((a, b) => a.concat(b), [])\n\t\t\t)\n\t\t);\n\t}\n};\n\nconst pad = (df, { validOnly = true, series = \"value\" } = {}) => row => {\n\tlet values = df\n\t\t.before(row.date.toDate())\n\t\t.getSeries(series)\n\t\t.where(v => v);\n\tlet value = values.count() > 0 ? values.last() : 0;\n\treturn value;\n};\nconst annualAverage = (\n\tdf,\n\t{ validOnly = true, series = \"value\", years = 3, defaultValue } = {}\n) => row => {\n\tlet subset = df\n\t\t.subset([\"date\", series])\n\t\t.after(row.date.subtract(years, \"year\").toDate())\n\t\t.before(row.date.toDate())\n\t\t.bake();\n\tlet values = subset\n\t\t.where(r => r.date.month() === row.date.month())\n\t\t.where(r => r.date.date() === row.date.date())\n\t\t.where(r => r.date.hour() === row.date.hour())\n\t\t.where(r => r.date.minute() === row.date.minute())\n\t\t.getSeries(series)\n\t\t.where(v => v);\n\n\tlet value;\n\tif (values.count() < years) {\n\t\tvalue = values\n\t\t\t.appendPair([\n\t\t\t\tnull,\n\t\t\t\tsubset\n\t\t\t\t\t.getSeries(series)\n\t\t\t\t\t.where(v => v)\n\t\t\t\t\t.average()\n\t\t\t])\n\t\t\t.average();\n\t} else {\n\t\tvalue = values.average();\n\t}\n\treturn value;\n};\nexport {\n\tgapExists,\n\tgapFill,\n\taverageMonthlyMap,\n\tfillMonthlyByMap,\n\tpad,\n\tannualAverage,\n\tannualMonthlyAverageMap,\n\tmonthlyRollingAverageMap,\n\tfillMonthlyBAnnualyMap\n};\n","// Source: https://www.itl.nist.gov/div898/handbook/eda/section3/eda35h3.htm\n// https://vsp.pnnl.gov/help/Vsample/Rosners_Outlier_Test.htm\n// https://www.itl.nist.gov/div898/handbook/prc/section1/prc16.htm\n// https://www.math.ucla.edu/~tom/distributions/KolSmir2.html?\nimport { DataFrame } from \"data-forge\";\nimport {\n  sampleStandardDeviation,\n  mean as _mean,\n  max,\n  median as _median,\n  medianAbsoluteDeviation,\n  quantile\n} from \"simple-statistics\";\nimport { Studentt } from \"distributions\";\nimport dayjs from \"dayjs\";\n\nfunction rval(df) {\n  let values = df.deflate(row => row.x).toArray();\n  let std = sampleStandardDeviation(values);\n  let mean = _mean(values);\n  if (std === 0) {\n    let ndf = df.generateSeries({ ares: row => 0 });\n    return { R: 0, std, mean, df: ndf };\n  }\n  let ndf = new DataFrame({\n    values: values.map(x => ({\n      x,\n      ares: Math.abs(x - mean) / std\n    }))\n  });\n  let R = max(ndf.deflate(row => row.ares).toArray());\n  return { R, df: ndf, std, mean };\n}\n\nfunction pValue(n, i, alpha) {\n  let p = 1 - alpha / (2 * (n - i + 1));\n  return p;\n}\nfunction tValue(p, degreeOfFreedom) {\n  let qt = new Studentt(degreeOfFreedom);\n  let t = qt.inv(p);\n  return t;\n}\n//\nfunction lambdaTest(n, i, alpha) {\n  let p = pValue(n, i, alpha);\n  let df = n - i - 1;\n  let t = tValue(p, df);\n  let lambda =\n    (t * (n - i)) /\n    Math.sqrt((n - i - 1 + Math.pow(t, 2)) * (n - i + 1));\n  return { lambda, p, t };\n}\nfunction rosnerTest(dataset = [], k = 10, alpha = 0.05) {\n  let dataframe = new DataFrame({\n    values: dataset.map(x => ({ x }))\n  });\n  let n = dataframe.getSeries(\"x\").count();\n  let newdf;\n  let i = 1;\n  let outliers = [];\n  let trip = false;\n  while (i <= k) {\n    let pair = {};\n    let s = Date.now();\n    if (i === 1) {\n      let { R, df, mean, std } = rval(dataframe);\n      newdf = df.where(row => row.ares !== R);\n      pair = Object.assign({}, pair, {\n        mean,\n        std,\n        Value: df\n          .where(row => row.ares === R)\n          .getSeries(\"x\")\n          .first(),\n        R\n      });\n    } else {\n      let { R, df, mean, std } = rval(newdf);\n      newdf = df.where(row => row.ares !== R);\n      pair = Object.assign({}, pair, {\n        mean,\n        std,\n        Value: df\n          .where(row => row.ares === R)\n          .getSeries(\"x\")\n          .first(),\n        R\n      });\n    }\n    let { lambda, p, t } = lambdaTest(n, i, alpha);\n    pair = Object.assign({}, pair, { lambda });\n    outliers.push(pair);\n    if (trip && pair.R > pair.lambda) trip = false;\n    if (pair.R === 0) break;\n    if (pair.R < pair.lambda) {\n      if (trip) {\n        break;\n      } else {\n        trip = true;\n      }\n    }\n    i++;\n  }\n  outliers = new DataFrame(outliers)\n    .generateSeries({\n      outlier: row => row.R > row.lambda\n    })\n    .takeWhile(row => row.outlier);\n  let outlierValues = outliers\n    .where(row => row.Value > 0)\n    .deflate(row => row.Value);\n  let thresholds = {\n    lower: 0,\n    upper:\n      outlierValues.count() > 0 ? outlierValues.min() : Infinity\n  };\n  return {\n    outliers,\n    thresholds,\n    iterations: i\n  };\n}\nconst modz = (value, mad, median) => {\n  return (0.6745 * (value - median)) / mad;\n};\nfunction modifiedZScoreTest(values) {\n  let median = _median(values);\n  let mad = medianAbsoluteDeviation(values);\n  values = values\n    .sort((a, b) => b - a)\n    .filter(v => v > 0)\n    .map(v => [v, modz(v, mad, median)]);\n  let outliers = values.filter(\n    ([v, modz]) => Math.abs(modz) >= 3.5\n  );\n  let upper = Math.min(\n    ...[Infinity, ...outliers.map(v => v[0])]\n  );\n  // let score,\n  // \tvalue,\n  // \tthreshold = Infinity,\n  // \tindex = 0;\n  // do {\n  // \tvalue = values[index];\n  // \tscore = modz(value, mad, median);\n  // \tif (Math.abs(score) >= 3.5) threshold = value;\n  // } while (score >= 3.5);\n  return { thresholds: { upper, lower: 0 } };\n}\nfunction boxPlotTest(values) {\n  let q1 = quantile(values, 0.25);\n  let q3 = quantile(values, 0.75);\n  let iqr = q3 - q1;\n  return {\n    thresholds: {\n      lowerInner: q1 - 1.5 * iqr,\n      upperInner: q1 - 3 * iqr,\n      lowerOuter: q3 + 1.5 * iqr,\n      upperOuter: q3 + 3 * iqr\n    }\n  };\n}\nfunction calculateOutlierThresholds(\n  df,\n  { k, filterZeros = true } = {}\n) {\n  let values = df\n    .where(\n      row =>\n        row.flag === null ||\n        row.flag === undefined ||\n        Array.isArray(row.flag)\n    )\n    .where(row => !isNaN(row.value) && row.value !== null)\n    .getSeries(\"value\")\n    .bake();\n  if (filterZeros) values = values.where(value => value > 0);\n  if (!k) {\n    k =\n      values.count() < 1000\n        ? Math.floor(values.count() * 0.15)\n        : Math.min(...[1000, Math.floor(values.count() * 0.02)]);\n  }\n  if (values.count < 5) return {};\n  let { outliers, threshold } = rosnerTest(values.toArray(), k);\n  return { outliers, threshold };\n}\n\nfunction zeroCheck(df, threshold = 2) {\n  let zeroGroups = df\n    .variableWindow((a, b) => {\n      return a.value === b.value && a.value === 0;\n    })\n    .where(window => window.getIndex().count() >= threshold);\n  let zeroSummary = zeroGroups\n    .select(window => ({\n      start: window.first().date,\n      end: window.last().date,\n      count: window.count()\n    }))\n    .inflate(); // Series -> dataframe.\n  // .toArray()\n  return { zeroSummary, zeroGroups };\n}\n\nfunction zeroReplacement(df, threshold) {\n  let { zeroGroups } = zeroCheck(df, threshold);\n  zeroGroups.forEach(dff => {\n    dff = dff.transformSeries({\n      value: value => null,\n      flag: value => [\"zero\"]\n    });\n    df = DataFrame.merge([df, dff]);\n  });\n  return df;\n}\nfunction isOutlier(value, { lower, upper }) {\n  if (value < lower || value >= upper) {\n    return true;\n  }\n  return false;\n}\nfunction validMean(df) {\n  let values = df\n    .getSeries(\"value\")\n    .where(value => typeof value === \"number\");\n  return values.average();\n}\nfunction validMonthlyMeanMap(df) {\n  let dateComparison = row =>\n    dayjs(row.date)\n      .startOf(\"month\")\n      .month();\n\n  df = df\n    .where(row => typeof row.value === \"number\")\n    .groupBy(dateComparison)\n    .select(group => ({\n      month: new Date(group.first().date).getMonth(),\n      value: group.deflate(row => row.value).average()\n    }));\n  return new Map(\n    df.toArray().map(({ month, value }) => [month, value])\n  );\n}\n\nfunction quality(df) {\n  let count = df.getIndex().count();\n  let valid = df\n    .getSeries(\"flag\")\n    .where(\n      value =>\n        value === null ||\n        (Array.isArray(value) && value.length === 0)\n    )\n    .count();\n  let missing = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"missing\") !== -1)\n    .count();\n  let dirty = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"clean\") !== -1)\n    .count();\n  let zerod = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"zero\") !== -1)\n    .count();\n  let breakdown = {\n    valid: valid / count,\n    missing: missing / count,\n    invalid: (dirty + zerod) / count\n  };\n  let report = {\n    accuracy: (1 - dirty / count) * 4,\n    completeness: 4 * breakdown.valid,\n    consistency: 4 * ((count - missing - zerod) / count)\n  };\n  return { breakdown, report, count };\n}\n\nexport {\n  rosnerTest,\n  modifiedZScoreTest,\n  boxPlotTest,\n  calculateOutlierThresholds,\n  zeroReplacement,\n  isOutlier,\n  validMean,\n  validMonthlyMeanMap,\n  quality\n};\n","import dayjs from \"dayjs\";\nexport const annualScale = (start, end) =>\n\t365 / dayjs(end).diff(dayjs(start), \"day\");\nexport const calculateChange = (baseline, value) =>\n\t(value - baseline) / baseline;\n","import dayjs from \"dayjs\";\nimport dataForge from \"data-forge\";\nimport { msToInterval, intervalToMS } from \"./lib/Timeseries.interval\";\nimport isEqual from \"lodash/isEqual\";\nimport has from \"lodash/has\";\nimport get from \"lodash/get\";\nimport fromPairs from \"lodash/fromPairs\";\nimport {\n\tgapExists,\n\tgapFill,\n\taverageMonthlyMap,\n\tfillMonthlyByMap,\n\tpad,\n\tannualAverage,\n\tannualMonthlyAverageMap,\n\tmonthlyRollingAverageMap,\n\tfillMonthlyBAnnualyMap\n} from \"./lib/Timeseries.fill\";\nimport {\n\tckmeans,\n\tmax,\n\tmedianAbsoluteDeviation,\n\tquantile\n} from \"simple-statistics\";\n\nimport {\n\trosnerTest,\n\tboxPlotTest,\n\tmodifiedZScoreTest\n} from \"./lib/Timeseries.statistics\";\nimport { annualScale, calculateChange } from \"./lib/misc\";\n\n// export default ;\n// Fill Options\nexport {\n\tTimeseries,\n\tannualAverage,\n\taverageMonthlyMap,\n\tannualMonthlyAverageMap,\n\tmonthlyRollingAverageMap,\n\tfillMonthlyBAnnualyMap,\n\tfillMonthlyByMap,\n\tpad\n};\nfunction Timeseries(data = [], options = {}) {\n\t// const { msIndex } = options;\n\tif (data instanceof Timeseries) {\n\t\treturn data;\n\t}\n\tif (data instanceof dataForge.DataFrame) {\n\t\tdata = data.toArray();\n\t}\n\n\tdata = data\n\t\t.map(({ date, ...others }) => ({ date: dayjs(date), ...others }))\n\t\t.sort((a, b) => a.date.valueOf() - b.date.valueOf());\n\tlet config = {\n\t\t// columns: ['date', 'value', 'raw', 'flag'],\n\t\tvalues: data,\n\t\tindex: data.map(({ date }) => date.toDate()),\n\t\tconsiderAllRows: true\n\t};\n\tdataForge.DataFrame.call(this, config);\n}\n\nTimeseries.prototype = Object.create(dataForge.DataFrame.prototype);\nTimeseries.prototype.constructor = Timeseries;\n\n// Getters\nfunction getValueColumns() {\n\treturn this.detectTypes()\n\t\t.where(row => row.Type === \"number\")\n\t\t.distinct(row => row.Column)\n\t\t.getSeries(\"Column\")\n\t\t.toArray();\n}\nfunction interval() {\n\tconst computeInterval = window => window.last() - window.first();\n\tconst intervals = this.getIndex()\n\t\t.window(2)\n\t\t.select(computeInterval)\n\t\t.detectValues()\n\t\t.orderBy(row => -row.Frequency);\n\t// .orderBy(row => row.Value);\n\n\tlet val = intervals.first().Value;\n\n\treturn msToInterval(val);\n}\n\nfunction dateRange(unit, adjustment) {\n\tlet start = dayjs(this.first().date),\n\t\tend = dayjs(this.last().date);\n\tif (adjustment) {\n\t\tstart = start.startOf(adjustment);\n\t\tend = end.endOf(adjustment);\n\t}\n\treturn end.diff(start, unit);\n}\nTimeseries.prototype.getValueColumns = getValueColumns;\nTimeseries.prototype.getInterval = interval;\nTimeseries.prototype.getDateRange = dateRange;\n\n// Statistics\nfunction cvrsme(actual, simulated) {\n\tlet df = this.subset([actual, simulated])\n\t\t.resetIndex()\n\t\t.generateSeries({\n\t\t\tactual: row => row[actual] || 0,\n\t\t\tsimulated: row => row[simulated] || 0\n\t\t})\n\t\t.dropSeries([actual, simulated])\n\t\t.generateSeries({ diff: row => row.actual - row.simulated });\n\tlet n = df.count();\n\tlet p = 1.0;\n\tlet ybar = df.getSeries(\"actual\").sum() / n;\n\tlet v = Math.sqrt(df.getSeries(\"diff\").sum() / (n - p)) / ybar;\n\treturn v;\n}\nfunction nmbe(actual, simulated) {\n\tlet df = this.subset([actual, simulated])\n\t\t.resetIndex()\n\t\t.generateSeries({\n\t\t\tactual: row => row[actual] || 0,\n\t\t\tsimulated: row => row[simulated] || 0\n\t\t})\n\t\t.dropSeries([actual, simulated])\n\t\t.generateSeries({ diff: row => row.actual - row.simulated });\n\n\tlet n = df.count();\n\tlet p = 1.0;\n\tlet ybar = df.getSeries(\"actual\").sum() / n;\n\tlet b = df.getSeries(\"diff\").sum() / ((n - p) * ybar);\n\treturn b;\n}\nTimeseries.prototype.cvrsme = cvrsme;\nTimeseries.prototype.nmbe = nmbe;\n\n// Methods\nfunction calculateThresholdOptions({\n\tk,\n\tfilterZeros = true,\n\tfilterNegative = true\n} = {}) {\n\tlet noflags = this.where(\n\t\trow =>\n\t\t\trow.flag === null ||\n\t\t\trow.flag === undefined ||\n\t\t\t(Array.isArray(row.flag) && row.flag.length === 0)\n\t)\n\t\t.where(row => !isNaN(row.value) && row.value !== null)\n\t\t.getSeries(\"value\");\n\tif (filterZeros) noflags = noflags.where(value => value !== 0);\n\tif (filterNegative) noflags = noflags.where(value => value > 0);\n\tif (!k) {\n\t\tk =\n\t\t\tnoflags.count() < 1000\n\t\t\t\t? Math.floor(noflags.count() * 0.15)\n\t\t\t\t: Math.min(...[1000, Math.floor(noflags.count() * 0.02)]);\n\t}\n\tif (noflags.count() < 5) return {};\n\tlet { thresholds: esd } = rosnerTest(noflags.toArray(), k);\n\tlet { thresholds: box } = boxPlotTest(noflags.toArray());\n\tlet { thresholds: modz } = modifiedZScoreTest(noflags.toArray());\n\treturn { esd, box, modz };\n}\n\nfunction getBestThreshold() {\n\ttry {\n\t\tlet thresholds = this.calculateThresholdOptions();\n\t\tconst thresholdGroups = ckmeans(\n\t\t\t[\n\t\t\t\tget(thresholds, \"esd.upper\", null),\n\t\t\t\tget(thresholds, \"modz.upper\", null),\n\t\t\t\tget(thresholds, \"box.lowerOuter\", null),\n\t\t\t\tget(thresholds, \"box.upperOuter\", null)\n\t\t\t].filter(v => v),\n\t\t\t2\n\t\t);\n\t\tlet threshold_actual = max(\n\t\t\tthresholdGroups.reduce((a, b) => (a.length > b.length ? a : b))\n\t\t);\n\t\treturn threshold_actual;\n\t} catch (error) {\n\t\tconsole.error(error);\n\t\tthrow new Error(\"Cannot determine threshold\");\n\t}\n}\n\nfunction calculateStatistics(options = {}) {\n\tconst {\n\t\tcolumn = \"value\",\n\t\tfilterZeros = false,\n\t\tfilterNegative = true\n\t} = options;\n\tlet series = this.deflate(row => row[column]).where(value => !isNaN(value));\n\tif (filterNegative) series = series.where(value => value >= 0);\n\tif (filterZeros) series = series.where(value => value !== 0);\n\tlet median = series.median();\n\tlet mean = series.average();\n\tlet count = series.count();\n\tlet std = series.std();\n\tlet min = series.min();\n\tlet max = series.max();\n\tlet mad = medianAbsoluteDeviation(series.toArray());\n\tlet q1 = quantile(series.toArray(), 0.25);\n\tlet q3 = quantile(series.toArray(), 0.75);\n\tlet iqr = q3 - q1;\n\tlet stats = {\n\t\tmedian,\n\t\tmean,\n\t\tcount,\n\t\tstd,\n\t\tmin,\n\t\tmax,\n\t\tmad,\n\t\tq1,\n\t\tq3,\n\t\tiqr\n\t};\n\treturn stats;\n}\n\nTimeseries.prototype.calculateStatistics = calculateStatistics;\nTimeseries.prototype.calculateThresholdOptions = calculateThresholdOptions;\nTimeseries.prototype.getBestThreshold = getBestThreshold;\n\n// Chainable Methods\nfunction betweenDates(start, end) {\n\tstart = dayjs(start).toDate();\n\tend = dayjs(end).toDate();\n\tlet df = this.between(start, end);\n\treturn new Timeseries(df);\n}\nTimeseries.prototype.betweenDates = betweenDates;\n\nfunction transformAllSeries(adjustmentFunction, { exclude }) {\n\tlet df = this;\n\tlet columns = (columns = df\n\t\t.detectTypes()\n\t\t.where(row => row.Type === \"number\")\n\t\t.distinct(row => row.Column)\n\t\t.getSeries(\"Column\")\n\t\t.toArray());\n\tif (exclude && Array.isArray(exclude)) {\n\t\tcolumns = columns.filter(col => exclude.indexOf(col) === -1);\n\t}\n\tcolumns.forEach(col => {\n\t\tdf = df.transformSeries({\n\t\t\t[col]: value => {\n\t\t\t\tif (isNaN(value)) {\n\t\t\t\t\treturn value;\n\t\t\t\t} else {\n\t\t\t\t\treturn adjustmentFunction(value);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\treturn df;\n}\n\nTimeseries.prototype.transformAllSeries = transformAllSeries;\n\nfunction reset() {\n\tlet df = this.withSeries({\n\t\tvalue: row =>\n\t\t\trow.flag && Array.isArray(row.flag) && row.flag.length > 0\n\t\t\t\t? row.raw\n\t\t\t\t: row.value\n\t})\n\t\t.subset([\"date\", \"value\"])\n\t\t.where(row => !isNaN(row.value) && row.value !== null);\n\treturn new Timeseries(df);\n}\nTimeseries.prototype.reset = reset;\n\n// To and From Totalizers\nfunction fromTotalizer(col = \"value\", { acceptInitial = false } = {}) {\n\tlet array = this.subset([\"date\", col])\n\t\t.toArray()\n\t\t.map((v, i, arr) => {\n\t\t\tlet val = acceptInitial ? v[col] : null;\n\t\t\tif (arr[i - 1]) {\n\t\t\t\tval = v[col] - arr[i - 1][col];\n\t\t\t}\n\t\t\treturn { date: v.date, [col]: val };\n\t\t});\n\tlet ndf = new Timeseries(a);\n\treturn ndf;\n}\nfunction toTotalizer(col, { adjustInitial } = {}) {\n\tlet array = this.subset([\"date\", col])\n\t\t.toArray()\n\t\t.map((v, i, arr) => {\n\t\t\tlet val = arr\n\t\t\t\t.slice(0, i)\n\t\t\t\t.map(obj => obj[col])\n\t\t\t\t.reduce((a, b) => a + b, 0);\n\t\t\treturn { date: v.date, [col]: val };\n\t\t});\n\tlet ndf = new Timeseries(a);\n\treturn ndf;\n}\nTimeseries.prototype.fromTotalizer = fromTotalizer;\nTimeseries.prototype.toTotalizer = toTotalizer;\n\nfunction group(interval, toArray) {\n\tif ([\"hour\", \"day\", \"month\", \"year\"].indexOf(interval) === -1)\n\t\tthrow new Error(\"interval type not supported\");\n\tlet dateComparison = row => dayjs(row.date).startOf(interval);\n\tlet groups = this.groupBy(dateComparison);\n\treturn groups;\n}\n\nTimeseries.prototype.group = group;\n\nfunction removeOutliers({ series = \"value\", lower, upper } = {}) {\n\tif (lower > upper) throw new Error(\"thresholds invalid\");\n\tlet outlierCheck = (value, lower, upper) => value < lower || value > upper;\n\n\tlet outliers = this.where(row => outlierCheck(row[series], lower, upper))\n\t\t.generateSeries({\n\t\t\traw: row => row[series],\n\t\t\tflag: ({ flag = [] }) => [\"outlier\", ...flag]\n\t\t})\n\t\t.transformSeries({\n\t\t\t[series]: value => null\n\t\t});\n\n\tlet merged = this.merge(outliers);\n\treturn new Timeseries(merged);\n}\n\nTimeseries.prototype.removeOutliers = removeOutliers;\nTimeseries.prototype.clean = removeOutliers;\n\nfunction downsample([duration, value], fillType = \"sum\") {\n\tif ([\"hour\", \"day\", \"month\", \"year\"].indexOf(duration) === -1)\n\t\tthrow new Error(\"interval type not supported\");\n\tif ([\"sum\", \"avg\", \"median\"].indexOf(fillType) === -1) {\n\t\tthrow new Error(\"aggregation type not suppported, only:\");\n\t}\n\tlet dateComparison = row => row.date.startOf(duration);\n\tlet valueColumns = this.getValueColumns();\n\tif (value) {\n\t\tdateComparison = row => row.date.startOf(duration).add(value, duration);\n\t}\n\tlet df = this.groupBy(dateComparison)\n\t\t.select(group => {\n\t\t\tconst date = group.first().date.startOf(duration);\n\t\t\treturn {\n\t\t\t\tdate,\n\t\t\t\t...fromPairs([\n\t\t\t\t\t...valueColumns.map(col => {\n\t\t\t\t\t\tlet value;\n\t\t\t\t\t\tswitch (fillType) {\n\t\t\t\t\t\t\tcase \"median\":\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.median();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"avg\":\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.average();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t// sum\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.sum();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn [col, value];\n\t\t\t\t\t}),\n\t\t\t\t\t...group\n\t\t\t\t\t\t.getColumnNames()\n\t\t\t\t\t\t.filter(col => col !== \"date\")\n\t\t\t\t\t\t.filter(col => valueColumns.indexOf(col) === -1)\n\t\t\t\t\t\t.map(col => {\n\t\t\t\t\t\t\tlet value = group\n\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t.distinct()\n\t\t\t\t\t\t\t\t.toArray();\n\t\t\t\t\t\t\tif (value.length === 1) value = value[0];\n\t\t\t\t\t\t\treturn [col, value];\n\t\t\t\t\t\t})\n\t\t\t\t])\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => dayjs(row.date).toDate());\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.downsample = downsample;\nfunction downsampleClean([duration, value], threshold = 0.8) {\n\tif ([\"hour\", \"day\", \"month\", \"year\"].indexOf(duration) === -1)\n\t\tthrow new Error(\"interval type not supported\");\n\tlet dateComparison = row => row.date.startOf(duration);\n\tlet valueColumns = this.getValueColumns();\n\tif (value) {\n\t\tdateComparison = row => row.date.startOf(duration).add(value, duration);\n\t}\n\tlet df = this.groupBy(dateComparison)\n\t\t.select(group => {\n\t\t\tconst date = group.first().date.startOf(duration);\n\t\t\tlet quality = new Timeseries(group).dataQuality().setIndex(\"flag\");\n\t\t\tlet clean = quality.at(\"clean\").percent;\n\t\t\treturn {\n\t\t\t\tdate,\n\t\t\t\tvalue:\n\t\t\t\t\tclean >= threshold\n\t\t\t\t\t\t? group\n\t\t\t\t\t\t\t\t.deflate(row => row.value)\n\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t.sum()\n\t\t\t\t\t\t: null\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => dayjs(row.date).toDate());\n\treturn new Timeseries(df);\n}\nTimeseries.prototype.downsampleClean = downsampleClean;\nfunction upsample([duration, value], fillType = \"average\") {\n\t// Dont use this b/c it has the raw and flag values\n\tlet df = this;\n\tlet blank = Timeseries.blank(df.first().date, df.last().date, [\n\t\tduration,\n\t\tvalue\n\t]);\n\tconsole.log(blank.toString());\n\tlet n = Timeseries.merge([blank, df]).fillNull();\n\t// let df = this.fillGaps(\n\t// \tgapExists([duration, value]),\n\t// \tgapFill(fillType, [duration, value])\n\t// );\n\treturn new Timeseries(n);\n}\n\nTimeseries.prototype.upsample = upsample;\n\nfunction populate(value, type = \"average\") {\n\tlet v;\n\tswitch (type) {\n\t\tcase \"fill\":\n\t\t\tv = value;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tv = value / this.count();\n\t\t\tbreak;\n\t}\n\tlet df = this.generateSeries({ value: row => v });\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.populate = populate;\n\nfunction reduceToValue(columnNames) {\n\tfunction chooseValue(row, columnNames = []) {\n\t\tlet values = columnNames.map(n => row[n]).filter(v => v);\n\t\treturn values[0] || 0;\n\t}\n\tlet df = this.generateSeries({\n\t\tvalue: row => chooseValue(row, columnNames)\n\t}).subset([\"date\", \"value\"]);\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.reduceToValue = reduceToValue;\n\nfunction cumulativeSum(columns) {\n\tif (!columns) columns = this.getValueColumns();\n\tif (columns & !Array.isArray(columns)) columns = [columns];\n\tlet df = this;\n\tconst cumulativeSum = sum => value => (sum += value);\n\tcolumns.forEach(s => {\n\t\tdf = df.withSeries(s, df.getSeries(s).select(cumulativeSum(0)));\n\t});\n\treturn new Timeseries(df);\n}\nTimeseries.prototype.cumulativeSum = cumulativeSum;\n\nfunction totalRows(series = [\"value\"], colname = \"total\") {\n\tlet ndf = this.generateSeries({\n\t\t[colname]: row => series.map(v => row[v] || 0).reduce((a, b) => a + b, 0)\n\t});\n\treturn new Timeseries(ndf);\n}\nTimeseries.prototype.totalRows = totalRows;\nTimeseries.prototype.totalRow = totalRows;\nTimeseries.prototype.totalColumns = totalRows;\n\n// Baseline Functions\nfunction rollingPercentChange(col = \"value\", decimal = true) {\n\tlet df = this;\n\tlet delta = df.withSeries(\"delta\", df.getSeries(\"value\").percentChange());\n\tif (decimal) delta = delta.transformSeries({ delta: value => value / 100 });\n\treturn new Timeseries(delta);\n}\n\nTimeseries.prototype.rollingPercentChange = rollingPercentChange;\nfunction baselinePercentChange(baselineDF) {\n\t// Only Change in Year\n\tif (!(baselineDF instanceof Timeseries))\n\t\tbaselineDF = new Timeseries(baselineDF);\n\tlet dfwb;\n\tif (baselineDF.count() > 1) {\n\t\tlet interval = this.getInterval();\n\t\tlet baselineInterval = baselineDF.interval;\n\t\tif (!isEqual(interval, baselineInterval)) {\n\t\t\tconsole.error(interval, baselineInterval);\n\t\t\tthrow new Error(\"baseline and data intervals do not match\");\n\t\t}\n\t\tlet indexer;\n\t\tswitch (interval[0]) {\n\t\t\tcase \"day\":\n\t\t\t\tindexer = date => `${date.month()}-${date.date()}`;\n\t\t\t\tbreak;\n\t\t\tcase \"month\":\n\t\t\t\tindexer = date => date.month();\n\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tindexer = date => 0;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tlet indexedBaseline = baselineDF.withIndex(row => indexer(row.date));\n\t\tlet getBaselineValue = index => {\n\t\t\tlet at = indexedBaseline.at(index);\n\t\t\tif (at && has(at, \"value\")) {\n\t\t\t\treturn at.value;\n\t\t\t} else {\n\t\t\t\treturn indexedBaseline.getSeries(\"value\").average();\n\t\t\t}\n\t\t};\n\t\tdfwb = this.generateSeries({\n\t\t\tbaseline: row => getBaselineValue(indexer(row.date))\n\t\t});\n\t} else {\n\t\tdfwb = this.generateSeries({\n\t\t\tbaseline: row => baselineDF.first().value\n\t\t});\n\t}\n\tdfwb = dfwb.generateSeries({\n\t\tdelta: row => calculateChange(row.baseline, row.value)\n\t});\n\treturn new Timeseries(dfwb);\n}\n\nTimeseries.prototype.baselinePercentChange = baselinePercentChange;\nTimeseries.prototype.addBaselineDelta = baselinePercentChange;\n\nfunction annualIntensity(normalizeValue = 1) {\n\tlet interval = this.getInterval();\n\tlet annual = this.groupBy(row => row.date.year())\n\t\t.select(group => {\n\t\t\tlet startDate = group.first().date;\n\t\t\tlet endDate = group\n\t\t\t\t.last()\n\t\t\t\t.date.add(interval[1] || 1, interval[0] || \"month\");\n\t\t\tlet scaler = annualScale(startDate, endDate);\n\t\t\treturn {\n\t\t\t\tstartDate,\n\t\t\t\tendDate,\n\t\t\t\t...fromPairs(\n\t\t\t\t\tthis.getValueColumns().map(col => [\n\t\t\t\t\t\tcol,\n\t\t\t\t\t\t(group\n\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t.where(v => v)\n\t\t\t\t\t\t\t.sum() *\n\t\t\t\t\t\t\tscaler) /\n\t\t\t\t\t\t\tnormalizeValue\n\t\t\t\t\t])\n\t\t\t\t)\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.renameSeries({ startDate: \"date\" })\n\t\t.dropSeries(\"endDate\");\n\treturn new Timeseries(annual);\n}\n\nTimeseries.prototype.annualIntensity = annualIntensity;\n\n// Fill Functions\n\nfunction fillMissing() {\n\tlet df = this;\n\tlet startDate = df.first().date.toDate(),\n\t\tendDate = df.last().date.toDate();\n\tlet interval = df.getInterval();\n\tlet bdf = Timeseries.blank(\n\t\tstartDate,\n\t\tendDate,\n\t\tinterval,\n\t\t\"missing\"\n\t).withIndex(row => row.date.valueOf());\n\tlet m = bdf.merge(df.withIndex(row => row.date.valueOf())).generateSeries({\n\t\tflag: row =>\n\t\t\trow.value === null || row.value === undefined ? row.flag : undefined\n\t});\n\tm = new Timeseries(m);\n\treturn m;\n}\nTimeseries.prototype.fillMissing = fillMissing;\n\nfunction fillNull({ series = \"value\", value, callback }) {\n\tconst seriesCheck = row => row[series] === null || row[series] === undefined;\n\tif (callback) {\n\t\tlet df = this.generateSeries({\n\t\t\tflag: row =>\n\t\t\t\tseriesCheck(row) ? [\"fill\", ...(row.flag || [])] : row.flag,\n\t\t\t[series]: row => (seriesCheck(row) ? callback(row) : row[series])\n\t\t});\n\t\treturn new Timeseries(df);\n\t} else if (value) {\n\t\tlet df = this.generateSeries({\n\t\t\tflag: row => (seriesCheck(row) ? [\"fill\", ...(row.flag || [])] : row.flag)\n\t\t}).transformSeries({\n\t\t\t[series]: currentValue =>\n\t\t\t\tcurrentValue === null || currentValue === undefined\n\t\t\t\t\t? value\n\t\t\t\t\t: currentValue\n\t\t});\n\t\treturn new Timeseries(df);\n\t} else {\n\t\treturn this;\n\t}\n}\nTimeseries.prototype.fillNull = fillNull;\n\nfunction zeroFaultDetection(thresholdInterval) {\n\tif (!Array.isArray(thresholdInterval))\n\t\tthresholdInterval = [thresholdInterval, 1];\n\tthresholdInterval = intervalToMS(thresholdInterval);\n\tlet df = this;\n\tlet zeroFaultDates = df\n\t\t.where(row => row.value === 0)\n\t\t.ensureSeries(\n\t\t\t\"interval\",\n\t\t\tdf\n\t\t\t\t.where(row => row.value === 0)\n\t\t\t\t.getSeries(\"date\")\n\t\t\t\t.amountChange()\n\t\t)\n\t\t.where(v => v.interval <= thresholdInterval)\n\t\t.subset([\"date\"])\n\t\t.generateSeries({ value: row => null, flag: row => [\"zeroFault\"] });\n\n\tlet zeroFaultDF = new Timeseries(this.merge(zeroFaultDates));\n\treturn zeroFaultDF;\n}\n\nTimeseries.prototype.zeroFaultDetection = zeroFaultDetection;\n\nfunction dataQuality() {\n\tlet count = this.count();\n\tlet withFlags = this.where(r => Array.isArray(r.flag) && r.flag.length > 0)\n\t\t.groupBy(r => r.flag.toString())\n\t\t.select(group => ({\n\t\t\tflag: group.first().flag,\n\t\t\tcount: group.count(),\n\t\t\tpercent: group.count() / count\n\t\t}))\n\t\t.inflate();\n\tlet good = this.where(\n\t\tr =>\n\t\t\tr.flag === undefined ||\n\t\t\tr.flag === null ||\n\t\t\t(Array.isArray(r.flag) && r.flag.length === 0)\n\t).count();\n\tlet quality = withFlags\n\t\t.appendPair([\n\t\t\twithFlags.count(),\n\t\t\t{ flag: \"clean\", count: good, percent: good / count }\n\t\t])\n\t\t.orderByDescending(row => row.count);\n\treturn quality;\n}\n\nTimeseries.prototype.dataQuality = dataQuality;\n\nfunction monthlyWithQual() {\n\tlet interval = this.getInterval();\n\tlet ms = intervalToMS(interval);\n\tconst duration = \"month\";\n\tlet dateComparison = row =>\n\t\tdayjs(row.date)\n\t\t\t.startOf()\n\t\t\t.valueOf();\n\tlet ts = this.groupBy(dateComparison)\n\t\t.select(group => {\n\t\t\tconst date = dayjs(group.first().date)\n\t\t\t\t.startOf(duration)\n\t\t\t\t.toDate();\n\t\t\tlet fullCount = Math.floor(\n\t\t\t\tdayjs(date)\n\t\t\t\t\t.endOf(\"month\")\n\t\t\t\t\t.diff(dayjs(date), \"millisecond\") / ms\n\t\t\t);\n\t\t\tlet days = new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\n\t\t\tlet count = group\n\t\t\t\t.getSeries(\"value\")\n\t\t\t\t.where(v => v && v !== 0)\n\t\t\t\t.toArray().length;\n\t\t\tlet value = group\n\t\t\t\t.getSeries(\"value\")\n\t\t\t\t.where(v => !isNaN(v))\n\t\t\t\t.sum();\n\t\t\treturn {\n\t\t\t\tdate,\n\t\t\t\tvalue: isNaN(value) ? 0 : value,\n\t\t\t\tcount,\n\t\t\t\tfullCount,\n\t\t\t\tscore: count / fullCount\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => row.date.toDate());\n\treturn new Timeseries(ts);\n}\nTimeseries.prototype.monthlyWithQual = monthlyWithQual;\n\nfunction threeYearAverage(date, series = \"value\", defaultValue) {\n\tdate = dayjs(date);\n\tif (!defaultValue)\n\t\tdefaultValue = this.getSeries(series)\n\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t.average();\n\n\t// let months = df\n\t// \t.before(date.valueOf())\n\t// \t.where(row => dayjs(row.date).month() === date.month())\n\t// \t.where(row => row.score > 0.9)\n\t// \t.tail(3);\n\tlet months = this.before(date.toDate())\n\t\t.where(row => row.date.month() === date.month())\n\t\t.orderBy(row => dayjs(row.date))\n\t\t.tail(3);\n\t// .where(row => row.score > 0.9);\n\tif (months.count() > 0) {\n\t\tlet val = months\n\t\t\t.getSeries(series)\n\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t.average();\n\t\treturn val;\n\t} else {\n\t\treturn defaultValue;\n\t}\n}\nTimeseries.prototype.threeYearAverage = threeYearAverage;\n\nfunction averageFill() {\n\tlet df = this;\n\tlet avg = df\n\t\t// .where(row => row.score ?row.score >= 0.9)\n\t\t.getSeries(\"value\")\n\t\t.where(v => !isNaN(v) && v !== null)\n\t\t.average();\n\tlet monthlyAvg = df\n\t\t.generateSeries({\n\t\t\trollingAverage: row => df.threeYearAverage(row.date, \"value\", avg)\n\t\t})\n\t\t.generateSeries({\n\t\t\tflag: row => (row.value ? row.flag : [\"filled\", ...(row.flag || [])])\n\t\t})\n\t\t.generateSeries({\n\t\t\tvalue: row => (row.value ? row.value : row.rollingAverage)\n\t\t})\n\t\t.dropSeries([\"rollingAverage\"]);\n\treturn new Timeseries(monthlyAvg);\n}\n\nTimeseries.prototype.averageFill = averageFill;\nfunction toArray() {\n\tconst values = [];\n\tfor (const value of this.getContent().values) {\n\t\tif (value !== undefined) {\n\t\t\tvalues.push(value);\n\t\t}\n\t}\n\treturn values.map(({ date, ...others }) => ({\n\t\tdate: date.toDate(),\n\t\t...others\n\t}));\n}\nTimeseries.prototype.toArray = toArray;\n\nfunction atDate(date) {\n\tif (this.none()) {\n\t\treturn undefined;\n\t}\n\tdate = dayjs(date).valueOf();\n\n\tfor (const pair of this.getContent().pairs) {\n\t\tif (pair[0].valueOf() === date) {\n\t\t\treturn pair[1];\n\t\t}\n\t}\n\treturn undefined;\n}\nTimeseries.prototype.atDate = atDate;\n\n// Static Methods\nfunction blank(startDate, endDate, [duration, value = 1], flag) {\n\tif ([\"minute\", \"hour\", \"day\", \"month\", \"year\"].indexOf(duration) < 0) {\n\t\tconsole.error(interval);\n\t\tthrow new Error(\"interval type not supported\");\n\t}\n\tstartDate = dayjs(startDate);\n\tendDate = dayjs(endDate);\n\tlet dates = [startDate];\n\tlet interval = intervalToMS([duration, value]);\n\twhile (dates[dates.length - 1].valueOf() < endDate.valueOf()) {\n\t\tdates.push(dayjs(dates[dates.length - 1]).add(value, duration));\n\t}\n\tlet df = new Timeseries(dates.map(date => ({ date })));\n\n\tif (flag) {\n\t\tdf = new Timeseries(\n\t\t\tdf.generateSeries({\n\t\t\t\tflag: row => [flag]\n\t\t\t})\n\t\t);\n\t}\n\n\treturn df;\n}\nTimeseries.blank = blank;\nfunction aggregate(dataframes) {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df => new Timeseries(df));\n\tconst valueColumns = new Set(\n\t\tdataframes.map(df => df.getValueColumns()).reduce((a, b) => a.concat(b), [])\n\t);\n\tconst concatenated = dataForge.DataFrame.concat(dataframes)\n\t\t.groupBy(row => row.date)\n\t\t.select(group => {\n\t\t\tconst date = group.first().date;\n\t\t\tlet o = { date };\n\t\t\tvalueColumns.forEach(c => (o[c] = group.deflate(row => row[c]).sum()));\n\t\t\tgroup\n\t\t\t\t.getColumnNames()\n\t\t\t\t.filter(col => col !== \"date\")\n\t\t\t\t.filter(col => valueColumns.has(col) === -1)\n\t\t\t\t.forEach(col => {\n\t\t\t\t\tlet value = group\n\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t.distinct()\n\t\t\t\t\t\t.toArray();\n\t\t\t\t\tif (value.length === 1) value = value[0];\n\t\t\t\t\to[col] = value;\n\t\t\t\t\treturn;\n\t\t\t\t});\n\t\t\treturn o;\n\t\t})\n\t\t.inflate();\n\treturn new Timeseries(concatenated);\n}\n\nTimeseries.aggregate = aggregate;\nTimeseries.concat = dataframes => {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df =>\n\t\tnew Timeseries(df).withIndex(row => row.date.valueOf())\n\t);\n\tlet df = dataForge.DataFrame.concat(dataframes);\n\treturn new Timeseries(df);\n};\nTimeseries.merge = dataframes => {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df =>\n\t\tnew Timeseries(df).withIndex(row => row.date.valueOf())\n\t);\n\tlet df = dataForge.DataFrame.merge(dataframes);\n\treturn new Timeseries(df);\n};\n"],"names":["intervalToMS","unit","value","start","dayjs","add","diff","averageMonthlyMap","df","data","group","select","month","first","date","getSeries","where","v","average","m","Map","toArray","map","avg","set","rval","values","deflate","row","x","std","sampleStandardDeviation","mean","_mean","ndf","generateSeries","ares","R","DataFrame","Math","abs","max","lambdaTest","n","i","alpha","p","pValue","t","degreeOfFreedom","Studentt","inv","tValue","lambda","sqrt","pow","modz","mad","median","modifiedZScoreTest","_median","medianAbsoluteDeviation","outliers","sort","a","b","filter","thresholds","upper","min","Infinity","lower","calculateChange","baseline","Timeseries","options","dataForge","config","others","valueOf","index","toDate","considerAllRows","call","this","removeOutliers","series","Error","outlierCheck","raw","flag","transformSeries","merge","totalRows","colname","reduce","baselinePercentChange","baselineDF","dfwb","count","indexer","interval","getInterval","baselineInterval","isEqual","console","error","indexedBaseline","withIndex","at","has","delta","prototype","Object","create","constructor","getValueColumns","detectTypes","Type","distinct","Column","ms","end","getIndex","window","last","detectValues","orderBy","Frequency","Value","ceil","getDateRange","adjustment","startOf","endOf","cvrsme","actual","simulated","subset","resetIndex","dropSeries","ybar","sum","nmbe","calculateStatistics","column","filterZeros","filterNegative","isNaN","q1","quantile","q3","iqr","calculateThresholdOptions","k","noflags","Array","isArray","length","floor","esd","dataset","newdf","dataframe","trip","pair","assign","push","outlierValues","outlier","takeWhile","iterations","rosnerTest","box","lowerInner","upperInner","lowerOuter","upperOuter","getBestThreshold","thresholdGroups","ckmeans","get","betweenDates","between","transformAllSeries","adjustmentFunction","exclude","columns","col","indexOf","forEach","reset","withSeries","fromTotalizer","acceptInitial","arr","val","toTotalizer","slice","obj","groupBy","clean","downsample","fillType","duration","dateComparison","valueColumns","fromPairs","getColumnNames","inflate","downsampleClean","threshold","dataQuality","setIndex","percent","upsample","blank","log","toString","fillNull","populate","type","reduceToValue","columnNames","chooseValue","cumulativeSum","s","totalRow","totalColumns","rollingPercentChange","decimal","percentChange","addBaselineDelta","annualIntensity","normalizeValue","year","startDate","endDate","scaler","_this","renameSeries","fillMissing","undefined","callback","seriesCheck","currentValue","zeroFaultDetection","thresholdInterval","zeroFaultDates","ensureSeries","amountChange","withFlags","r","good","appendPair","orderByDescending","monthlyWithQual","fullCount","Date","getFullYear","getMonth","getDate","score","threeYearAverage","defaultValue","months","before","tail","averageFill","rollingAverage","getContent","atDate","none","pairs","dates","aggregate","dataframes","Set","concat","o","c","years","after","subtract","bake","hour","minute","ts","annualMonthlyMap","monthMap","validOnly","Boolean","rollingWindow"],"mappings":"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"}
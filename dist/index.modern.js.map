{"version":3,"file":"index.modern.js","sources":["../src/lib/Timeseries.interval.js","../src/lib/Timeseries.fill.js","../src/lib/Timeseries.statistics.js","../src/index.js"],"sourcesContent":["import dayjs from \"dayjs\";\n\nconst msToInterval = ms => {\n\tlet start = dayjs();\n\tlet end = dayjs().add(ms);\n\tif (end.diff(start, \"month\", true) >= 11) {\n\t\treturn [\"year\", Math.ceil(end.diff(start, \"year\", true))];\n\t} else if (end.diff(start, \"day\", true) >= 28) {\n\t\treturn [\"month\", Math.ceil(end.diff(start, \"month\", true))];\n\t} else if (end.diff(start, \"hour\", true) >= 23) {\n\t\treturn [\"day\", Math.ceil(end.diff(start, \"day\", true))];\n\t} else if (end.diff(start, \"minute\", true) >= 55) {\n\t\treturn [\"hour\", Math.ceil(end.diff(start, \"hour\", true))];\n\t} else {\n\t\treturn [\"minute\", end.diff(start, \"minute\")];\n\t}\n};\nconst intervalToMS = ([unit, value]) => {\n\tlet start = dayjs();\n\tlet end = dayjs().add(value, unit);\n\treturn end.diff(start);\n};\nfunction calculateInterval(df, startDate, endDate) {\n\tif (!startDate) startDate = df.first.date;\n\tif (!endDate) endDate = df.last.date;\n\tfunction computeInterval(window) {\n\t\treturn window.last() - window.first();\n\t}\n\tconst intervals = df\n\t\t.between(startDate, endDate)\n\t\t.getIndex()\n\t\t.window(2)\n\t\t.select(computeInterval)\n\t\t.detectValues()\n\t\t.orderBy(row => row.Frequency);\n\n\tlet val = intervals.last().Value;\n\treturn msToInterval(val);\n}\nexport { msToInterval, intervalToMS, calculateInterval };\n","import dayjs from \"dayjs\";\nimport fromPairs from \"lodash/fromPairs\";\nimport toPairs from \"lodash/toPairs\";\nconst gapExists = ([duration, durationValue = 1]) => (pairA, pairB) => {\n\tconst startDate = pairA[0];\n\tconst endDate = pairB[0];\n\tlet gapSize = Math.floor(\n\t\tdayjs(endDate).diff(startDate, duration, true) / durationValue\n\t);\n\n\tif (gapSize > 0) return true;\n\treturn false;\n};\nconst gapExists_old = (interval, maxGap) => (pairA, pairB) => {\n\tconst startDate = pairA[0];\n\tconst endDate = pairB[0];\n\tlet gapSize;\n\tif (interval === \"quarterHour\") {\n\t\tgapSize = Math.floor(dayjs(endDate).diff(startDate, \"minutes\") / 15);\n\t} else {\n\t\tgapSize = dayjs(endDate).diff(startDate, interval);\n\t}\n\tif (maxGap && maxGap > gapSize) return false;\n\tif (gapSize > 0) return true;\n\treturn false;\n};\n\nconst gapFillNull = ([duration, durationValue], flag) => (pairA, pairB) => {\n\tconst startDate = pairA[0];\n\tconst endDate = pairB[0];\n\tlet gapSize = Math.floor(\n\t\tdayjs(endDate).diff(startDate, duration) / durationValue\n\t);\n\tconst numEntries = gapSize - 1;\n\tconst newEntries = [];\n\n\tfor (let entryIndex = 0; entryIndex < numEntries; ++entryIndex) {\n\t\tlet date = dayjs(startDate).add((entryIndex + 1) * durationValue, duration);\n\t\tnewEntries.push([\n\t\t\tdate.valueOf(),\n\t\t\t{ date, value: undefined, ...(flag && { flag: [flag] }) }\n\t\t]);\n\t}\n\treturn newEntries;\n};\nconst gapFillBlank = gapFillNull;\n\nconst valueFiller = (\n\tfillType,\n\t{ startValue, endValue, entryIndex, numEntries },\n\t{ overrideValue, dateFunction, date, flag }\n) => {\n\tif (\n\t\t[\"pad\", \"interpolate\", \"average\", \"dateFunction\", \"value\"].indexOf(\n\t\t\tfillType\n\t\t) === -1\n\t) {\n\t\tthrow new Error(\"fill Type not supported\");\n\t}\n\tlet value;\n\tif (fillType === \"pad\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\treturn [key, startValue[key]];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", \"pad\"];\n\t} else if (fillType === \"interpolate\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv =\n\t\t\t\t\tstartValue[key] +\n\t\t\t\t\t(entryIndex + 1) *\n\t\t\t\t\t\t((endValue[key] - startValue[key]) / (numEntries + 1));\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"average\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv = (startValue[key] + endValue[key]) / numEntries;\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"dateFunction\" && dateFunction) {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv = dateFunction(date);\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"value\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv;\n\t\t\t\tif (typeof overrideValue === \"number\") {\n\t\t\t\t\tnv = overrideValue;\n\t\t\t\t} else {\n\t\t\t\t\tnv = overrideValue[key];\n\t\t\t\t}\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\treturn [key, null];\n\t\t\t})\n\t\t);\n\t\tflag = [\"fill\"];\n\t}\n\treturn { ...value, flag };\n};\n\nconst gapFill = (\n\tfillType,\n\t[duration, durationValue],\n\t{ overrideValue, dateFunction, flag } = {}\n) => (pairA, pairB) => {\n\t// Fill values forward.\n\n\tconst startDate = dayjs(pairA[0]);\n\tconst endDate = dayjs(pairB[0]);\n\tlet gapSize = Math.floor(\n\t\tdayjs(endDate).diff(startDate, duration) / durationValue\n\t);\n\tconst numEntries = gapSize - 1;\n\tconst startValue = pairA[1];\n\tconst endValue = pairB[1];\n\tconst newEntries = [];\n\tfor (let entryIndex = 0; entryIndex < numEntries; ++entryIndex) {\n\t\tlet adjustment = valueFiller(\n\t\t\t\tfillType,\n\t\t\t\t{ startValue, endValue, entryIndex, numEntries },\n\t\t\t\t{\n\t\t\t\t\toverrideValue,\n\t\t\t\t\tdateFunction,\n\t\t\t\t\tflag\n\t\t\t\t}\n\t\t\t),\n\t\t\tdate = dayjs(startDate)\n\t\t\t\t.add((entryIndex + 1) * durationValue, duration)\n\t\t\t\t.toDate();\n\t\tlet e = [date.valueOf(), Object.assign({}, adjustment, { date })];\n\t\tnewEntries.push(e);\n\t}\n\n\treturn newEntries;\n};\n\nexport { gapExists, gapFill, gapFillBlank, gapFillNull, valueFiller };\n","// Source: https://www.itl.nist.gov/div898/handbook/eda/section3/eda35h3.htm\n// https://vsp.pnnl.gov/help/Vsample/Rosners_Outlier_Test.htm\n// https://www.itl.nist.gov/div898/handbook/prc/section1/prc16.htm\n// https://www.math.ucla.edu/~tom/distributions/KolSmir2.html?\nimport { DataFrame } from \"data-forge\";\nimport {\n  sampleStandardDeviation,\n  mean as _mean,\n  max,\n  median as _median,\n  medianAbsoluteDeviation,\n  quantile\n} from \"simple-statistics\";\nimport { Studentt } from \"distributions\";\nimport dayjs from \"dayjs\";\nfunction rval(df) {\n  let values = df.deflate(row => row.x).toArray();\n  let std = sampleStandardDeviation(values);\n  let mean = _mean(values);\n  if (std === 0) {\n    let ndf = df.generateSeries({ ares: row => 0 });\n    return { R: 0, std, mean, df: ndf };\n  }\n  let ndf = new DataFrame({\n    values: values.map(x => ({\n      x,\n      ares: Math.abs(x - mean) / std\n    }))\n  });\n  let R = max(ndf.deflate(row => row.ares).toArray());\n  return { R, df: ndf, std, mean };\n}\n\nfunction pValue(n, i, alpha) {\n  let p = 1 - alpha / (2 * (n - i + 1));\n  return p;\n}\nfunction tValue(p, degreeOfFreedom) {\n  let qt = new Studentt(degreeOfFreedom);\n  let t = qt.inv(p);\n  return t;\n}\n//\nfunction lambdaTest(n, i, alpha) {\n  let p = pValue(n, i, alpha);\n  let df = n - i - 1;\n  let t = tValue(p, df);\n  let lambda =\n    (t * (n - i)) /\n    Math.sqrt((n - i - 1 + Math.pow(t, 2)) * (n - i + 1));\n  return { lambda, p, t };\n}\nfunction rosnerTest(dataset = [], k = 10, alpha = 0.05) {\n  let dataframe = new DataFrame({\n    values: dataset.map(x => ({ x }))\n  });\n  let n = dataframe.getSeries(\"x\").count();\n  let newdf;\n  let i = 1;\n  let outliers = [];\n  let trip = false;\n  while (i <= k) {\n    let pair = {};\n    let s = Date.now();\n    if (i === 1) {\n      let { R, df, mean, std } = rval(dataframe);\n      newdf = df.where(row => row.ares !== R);\n      pair = Object.assign({}, pair, {\n        mean,\n        std,\n        Value: df\n          .where(row => row.ares === R)\n          .getSeries(\"x\")\n          .first(),\n        R\n      });\n    } else {\n      let { R, df, mean, std } = rval(newdf);\n      newdf = df.where(row => row.ares !== R);\n      pair = Object.assign({}, pair, {\n        mean,\n        std,\n        Value: df\n          .where(row => row.ares === R)\n          .getSeries(\"x\")\n          .first(),\n        R\n      });\n    }\n    let { lambda, p, t } = lambdaTest(n, i, alpha);\n    pair = Object.assign({}, pair, { lambda });\n    outliers.push(pair);\n    if (trip && pair.R > pair.lambda) trip = false;\n    if (pair.R === 0) break;\n    if (pair.R < pair.lambda) {\n      if (trip) {\n        break;\n      } else {\n        trip = true;\n      }\n    }\n    i++;\n  }\n  outliers = new DataFrame(outliers)\n    .generateSeries({\n      outlier: row => row.R > row.lambda\n    })\n    .takeWhile(row => row.outlier);\n  let outlierValues = outliers\n    .where(row => row.Value > 0)\n    .deflate(row => row.Value);\n  let thresholds = {\n    lower: 0,\n    upper:\n      outlierValues.count() > 0 ? outlierValues.min() : Infinity\n  };\n  return {\n    outliers,\n    thresholds,\n    iterations: i\n  };\n}\nconst modz = (value, mad, median) => {\n  return (0.6745 * (value - median)) / mad;\n};\nfunction modifiedZScoreTest(values) {\n  let median = _median(values);\n  let mad = medianAbsoluteDeviation(values);\n  values = values\n    .sort((a, b) => b - a)\n    .filter(v => v > 0)\n    .map(v => [v, modz(v, mad, median)]);\n  let outliers = values.filter(\n    ([v, modz]) => Math.abs(modz) >= 3.5\n  );\n  let upper = Math.min(\n    ...[Infinity, ...outliers.map(v => v[0])]\n  );\n  // let score,\n  // \tvalue,\n  // \tthreshold = Infinity,\n  // \tindex = 0;\n  // do {\n  // \tvalue = values[index];\n  // \tscore = modz(value, mad, median);\n  // \tif (Math.abs(score) >= 3.5) threshold = value;\n  // } while (score >= 3.5);\n  return { thresholds: { upper, lower: 0 } };\n}\nfunction boxPlotTest(values) {\n  let q1 = quantile(values, 0.25);\n  let q3 = quantile(values, 0.75);\n  let iqr = q3 - q1;\n  return {\n    thresholds: {\n      lowerInner: q1 - 1.5 * iqr,\n      upperInner: q1 - 3 * iqr,\n      lowerOuter: q3 + 1.5 * iqr,\n      upperOuter: q3 + 3 * iqr\n    }\n  };\n}\nfunction calculateOutlierThresholds(\n  df,\n  { k, filterZeros = true } = {}\n) {\n  let values = df\n    .where(\n      row =>\n        row.flag === null ||\n        row.flag === undefined ||\n        Array.isArray(row.flag)\n    )\n    .where(row => !isNaN(row.value) && row.value !== null)\n    .getSeries(\"value\")\n    .bake();\n  if (filterZeros) values = values.where(value => value > 0);\n  if (!k) {\n    k =\n      values.count() < 1000\n        ? Math.floor(values.count() * 0.15)\n        : Math.min(...[1000, Math.floor(values.count() * 0.02)]);\n  }\n  if (values.count < 5) return {};\n  let { outliers, threshold } = rosnerTest(values.toArray(), k);\n  return { outliers, threshold };\n}\n\nfunction zeroCheck(df, threshold = 2) {\n  let zeroGroups = df\n    .variableWindow((a, b) => {\n      return a.value === b.value && a.value === 0;\n    })\n    .where(window => window.getIndex().count() >= threshold);\n  let zeroSummary = zeroGroups\n    .select(window => ({\n      start: window.first().date,\n      end: window.last().date,\n      count: window.count()\n    }))\n    .inflate(); // Series -> dataframe.\n  // .toArray()\n  return { zeroSummary, zeroGroups };\n}\n\nfunction zeroReplacement(df, threshold) {\n  let { zeroGroups } = zeroCheck(df, threshold);\n  zeroGroups.forEach(dff => {\n    dff = dff.transformSeries({\n      value: value => null,\n      flag: value => [\"zero\"]\n    });\n    df = DataFrame.merge([df, dff]);\n  });\n  return df;\n}\nfunction isOutlier(value, { lower, upper }) {\n  if (value < lower || value >= upper) {\n    return true;\n  }\n  return false;\n}\nfunction validMean(df) {\n  let values = df\n    .getSeries(\"value\")\n    .where(value => typeof value === \"number\");\n  return values.average();\n}\nfunction validMonthlyMeanMap(df) {\n  let dateComparison = row =>\n    dayjs(row.date)\n      .startOf(\"month\")\n      .month();\n\n  df = df\n    .where(row => typeof row.value === \"number\")\n    .groupBy(dateComparison)\n    .select(group => ({\n      month: new Date(group.first().date).getMonth(),\n      value: group.deflate(row => row.value).average()\n    }));\n  return new Map(\n    df.toArray().map(({ month, value }) => [month, value])\n  );\n}\n\nfunction quality(df) {\n  let count = df.getIndex().count();\n  let valid = df\n    .getSeries(\"flag\")\n    .where(\n      value =>\n        value === null ||\n        (Array.isArray(value) && value.length === 0)\n    )\n    .count();\n  let missing = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"missing\") !== -1)\n    .count();\n  let dirty = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"clean\") !== -1)\n    .count();\n  let zerod = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"zero\") !== -1)\n    .count();\n  let breakdown = {\n    valid: valid / count,\n    missing: missing / count,\n    invalid: (dirty + zerod) / count\n  };\n  let report = {\n    accuracy: (1 - dirty / count) * 4,\n    completeness: 4 * breakdown.valid,\n    consistency: 4 * ((count - missing - zerod) / count)\n  };\n  return { breakdown, report, count };\n}\n\nexport {\n  rosnerTest,\n  modifiedZScoreTest,\n  boxPlotTest,\n  calculateOutlierThresholds,\n  zeroReplacement,\n  isOutlier,\n  validMean,\n  validMonthlyMeanMap,\n  quality\n};\n","import { DataFrame } from \"data-forge\";\nimport dayjs from \"dayjs\";\n// const isBetween = require('dayjs/plugin/isBetween')\nimport { msToInterval, intervalToMS } from \"./lib/Timeseries.interval\";\nimport isEqual from \"lodash/isEqual\";\nimport has from \"lodash/has\";\nimport fromPairs from \"lodash/fromPairs\";\nimport { gapExists, gapFill, gapFillBlank } from \"./lib/Timeseries.fill\";\nimport { medianAbsoluteDeviation, quantile } from \"simple-statistics\";\nimport {\n\trosnerTest,\n\tboxPlotTest,\n\tmodifiedZScoreTest\n} from \"./lib/Timeseries.statistics\";\nconst annualScale = (start, end) => 365 / dayjs(end).diff(dayjs(start), \"day\");\nconst calculateChange = (baseline, value) => (value - baseline) / baseline;\n\nclass Timeseries extends DataFrame {\n\tconstructor(data = []) {\n\t\tif (data instanceof Timeseries) return data;\n\t\tif (data instanceof DataFrame) {\n\t\t\tdata = data.toArray();\n\t\t}\n\t\t// sort\n\t\tdata = data\n\t\t\t.map(({ date, ...others }) => ({ date: dayjs(date), ...others }))\n\t\t\t.sort((a, b) => a.date.valueOf() - b.date.valueOf());\n\t\tlet config = {\n\t\t\tvalues: data,\n\t\t\tindex: data.map(({ date }) => date.toDate()),\n\t\t\tconsiderAllRows: true\n\t\t};\n\t\tsuper(config);\n\t}\n\tget interval() {\n\t\tfunction computeInterval(window) {\n\t\t\treturn window.last() - window.first();\n\t\t}\n\t\tconst intervals = this.getIndex()\n\t\t\t.window(2)\n\t\t\t.select(computeInterval)\n\t\t\t.detectValues()\n\t\t\t.orderBy(row => -row.Frequency)\n\t\t\t.orderBy(row => row.Value);\n\t\t// console.log(intervals.toString());\n\t\tlet val = intervals.first().Value;\n\t\treturn msToInterval(val);\n\t}\n\tget valueColumns() {\n\t\treturn this.detectTypes()\n\t\t\t.where(row => row.Type === \"number\")\n\t\t\t.distinct(row => row.Column)\n\t\t\t.getSeries(\"Column\")\n\t\t\t.toArray();\n\t}\n\tdateRange(unit, adjustment) {\n\t\tlet start = dayjs(this.first().date),\n\t\t\tend = dayjs(this.last().date);\n\t\tif (adjustment) {\n\t\t\tstart = start.startOf(adjustment);\n\t\t\tend = end.endOf(adjustment);\n\t\t}\n\t\treturn end.diff(start, unit);\n\t}\n\tat(date) {\n\t\treturn super.at(dayjs(date));\n\t}\n\tcalculateThresholds({ k, filterZeros = true, filterNegative = true } = {}) {\n\t\tlet noflags = this.where(\n\t\t\trow =>\n\t\t\t\trow.flag === null ||\n\t\t\t\trow.flag === undefined ||\n\t\t\t\t(Array.isArray(row.flag) && row.flag.length === 0)\n\t\t)\n\t\t\t.where(row => !isNaN(row.value) && row.value !== null)\n\t\t\t.getSeries(\"value\");\n\t\tif (filterZeros) noflags = noflags.where(value => value !== 0);\n\t\tif (filterNegative) noflags = noflags.where(value => value > 0);\n\t\tif (!k) {\n\t\t\tk =\n\t\t\t\tnoflags.count() < 1000\n\t\t\t\t\t? Math.floor(noflags.count() * 0.15)\n\t\t\t\t\t: Math.min(...[1000, Math.floor(noflags.count() * 0.02)]);\n\t\t}\n\t\tif (noflags.count() < 5) return {};\n\t\tlet { thresholds: esd } = rosnerTest(noflags.toArray(), k);\n\t\tlet { thresholds: box } = boxPlotTest(noflags.toArray());\n\t\tlet { thresholds: modz } = modifiedZScoreTest(noflags.toArray());\n\t\treturn { esd, box, modz };\n\t}\n\tcalculateStatistics({\n\t\tcolumn = \"value\",\n\t\tfilterZeros = false,\n\t\tfilterNegative = true\n\t} = {}) {\n\t\tlet series = this.deflate(row => row[column]).where(value => !isNaN(value));\n\t\tif (filterNegative) series = series.where(value => value >= 0);\n\t\tif (filterZeros) series = series.where(value => value !== 0);\n\t\tlet median = series.median();\n\t\tlet mean = series.average();\n\t\tlet count = series.count();\n\t\tlet std = series.std();\n\t\tlet min = series.min();\n\t\tlet max = series.max();\n\t\tlet mad = medianAbsoluteDeviation(series.toArray());\n\t\tlet q1 = quantile(series.toArray(), 0.25);\n\t\tlet q3 = quantile(series.toArray(), 0.75);\n\t\tlet iqr = q3 - q1;\n\t\tlet stats = {\n\t\t\tmedian,\n\t\t\tmean,\n\t\t\tcount,\n\t\t\tstd,\n\t\t\tmin,\n\t\t\tmax,\n\t\t\tmad,\n\t\t\tq1,\n\t\t\tq3,\n\t\t\tiqr\n\t\t};\n\t\treturn stats;\n\t}\n\tdataQuality() {\n\t\tlet count = this.count();\n\t\tlet valid = this.getSeries(\"flag\")\n\t\t\t.where(\n\t\t\t\tvalue =>\n\t\t\t\t\tvalue === null ||\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(Array.isArray(value) && value.length === 0)\n\t\t\t)\n\t\t\t.count();\n\t\tlet missing = this.getSeries(\"flag\")\n\t\t\t.where(value => Array.isArray(value))\n\t\t\t.where(value => value.indexOf(\"missing\") !== -1)\n\t\t\t.count();\n\t\tlet invalid = this.getSeries(\"flag\")\n\t\t\t.where(value => Array.isArray(value))\n\t\t\t.where(value => value.indexOf(\"outlier\") !== -1)\n\t\t\t.count();\n\t\tlet zeroFill = this.getSeries(\"flag\")\n\t\t\t.where(value => Array.isArray(value))\n\t\t\t.where(value => value.indexOf(\"zeroFill\") !== -1)\n\t\t\t.count();\n\t\tlet breakdown = {\n\t\t\tvalid: valid / count,\n\t\t\tmissing: missing / count,\n\t\t\tinvalid: invalid / count\n\t\t};\n\t\tlet report = {\n\t\t\taccuracy: 0,\n\t\t\tcompleteness: 0,\n\t\t\tconsistency: 0\n\t\t};\n\t\treturn {};\n\t}\n\t// Chainable Methods\n\ttransformAll(adjustmentFunction = v => v, columns) {\n\t\tlet df = this;\n\t\tif (!columns) {\n\t\t\tcolumns = df\n\t\t\t\t.detectTypes()\n\t\t\t\t.where(row => row.Type === \"number\")\n\t\t\t\t.distinct(row => row.Column)\n\t\t\t\t.getSeries(\"Column\")\n\t\t\t\t.toArray();\n\t\t}\n\t\tcolumns.forEach(col => {\n\t\t\tdf = df.transformSeries({\n\t\t\t\t[col]: value => {\n\t\t\t\t\tif (isNaN(value)) {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn adjustmentFunction(value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\treturn new Timeseries(df);\n\t}\n\tremoveOutliers({ lowerThreshold, upperThreshold } = {}) {\n\t\tif (lowerThreshold > upperThreshold) throw new Error(\"thresholds invalid\");\n\t\tlet outlierCheck = (value, lowerThreshold, upperThreshold) =>\n\t\t\tvalue < lowerThreshold || value > upperThreshold;\n\t\tlet df = this.generateSeries({\n\t\t\traw: row =>\n\t\t\t\toutlierCheck(row.value, lowerThreshold, upperThreshold)\n\t\t\t\t\t? row.value\n\t\t\t\t\t: null,\n\t\t\tflag: row =>\n\t\t\t\toutlierCheck(row.value, lowerThreshold, upperThreshold)\n\t\t\t\t\t? [\"outlier\"]\n\t\t\t\t\t: null\n\t\t}).transformSeries({\n\t\t\tvalue: value =>\n\t\t\t\toutlierCheck(value, lowerThreshold, upperThreshold) ? null : value\n\t\t});\n\t\treturn new Timeseries(df);\n\t}\n\treset() {\n\t\treturn this.withSeries({\n\t\t\tvalue: row => (row.raw && !isNaN(row.raw) ? row.raw : row.value)\n\t\t}).dropSeries([\"flag\", \"raw\"]);\n\t}\n\tgroup(interval, toArray) {\n\t\tif ([\"hour\", \"day\", \"month\", \"year\"].indexOf(interval) === -1)\n\t\t\tthrow new Error(\"interval type not supported\");\n\t\tlet dateComparison = row => dayjs(row.date).startOf(interval);\n\t\tlet groups = this.groupBy(dateComparison);\n\t\treturn groups;\n\t}\n\t// Not Working Yet, downsample and upsample independently work\n\tresample([duration, value = 1], fillType) {\n\t\tif ([\"hour\", \"day\", \"month\", \"year\"].indexOf(duration) === -1)\n\t\t\tthrow new Error(\"interval type not supported\");\n\t\tlet interval = this.interval;\n\t\tif (isEqual(interval, [duration, value])) {\n\t\t\treturn this;\n\t\t}\n\t\tlet d0 = dayjs(0);\n\t\tlet currentSampleDiff = dayjs(0)\n\t\t\t.add(interval[1], interval[0])\n\t\t\t.diff(d0);\n\t\tlet newSampleDiff = dayjs(0)\n\t\t\t.add(value, duration)\n\t\t\t.diff(d0);\n\t\tif (currentSampleDiff < newSampleDiff) {\n\t\t\treturn this.downsample([duration, value], fillType);\n\t\t} else {\n\t\t\treturn this.upsample([duration, value], fillType);\n\t\t}\n\t}\n\tupsample([duration, value], fillType = \"avg\") {\n\t\t// Dont use this b/c it has the raw and flag values\n\t\tlet df = this.fillGaps(\n\t\t\tgapExists([duration, value]),\n\t\t\tgapFill(fillType, [duration, value])\n\t\t);\n\t\treturn new Timeseries(df);\n\t}\n\tdownsample([duration, value], fillType = \"sum\") {\n\t\tif ([\"hour\", \"day\", \"month\", \"year\"].indexOf(duration) === -1)\n\t\t\tthrow new Error(\"interval type not supported\");\n\t\tif ([\"sum\", \"avg\", \"median\"].indexOf(fillType) === -1) {\n\t\t\tthrow new Error(\"aggregation type not suppported, only:\");\n\t\t}\n\t\tlet dateComparison = row => row.date.startOf(duration);\n\t\tlet valueColumns = this.valueColumns;\n\t\tif (value) {\n\t\t\tdateComparison = row => row.date.startOf(duration).add(value, duration);\n\t\t}\n\n\t\tlet df = this.groupBy(dateComparison)\n\t\t\t.select(group => {\n\t\t\t\tconst date = group.first().date.startOf(duration);\n\t\t\t\treturn {\n\t\t\t\t\tdate,\n\t\t\t\t\t...fromPairs([\n\t\t\t\t\t\t...valueColumns.map(col => {\n\t\t\t\t\t\t\tlet value;\n\t\t\t\t\t\t\tswitch (fillType) {\n\t\t\t\t\t\t\t\tcase \"median\":\n\t\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t\t.where(v => v)\n\t\t\t\t\t\t\t\t\t\t.median();\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase \"avg\":\n\t\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t\t.where(v => v)\n\t\t\t\t\t\t\t\t\t\t.average();\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t// sum\n\t\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t\t.where(v => v)\n\t\t\t\t\t\t\t\t\t\t.sum();\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn [col, value];\n\t\t\t\t\t\t}),\n\t\t\t\t\t\t...group\n\t\t\t\t\t\t\t.getColumnNames()\n\t\t\t\t\t\t\t.filter(col => col !== \"date\")\n\t\t\t\t\t\t\t.filter(col => valueColumns.indexOf(col) === -1)\n\t\t\t\t\t\t\t.map(col => {\n\t\t\t\t\t\t\t\tlet value = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.distinct()\n\t\t\t\t\t\t\t\t\t.toArray();\n\t\t\t\t\t\t\t\tif (value.length === 1) value = value[0];\n\t\t\t\t\t\t\t\treturn [col, value];\n\t\t\t\t\t\t\t})\n\t\t\t\t\t])\n\t\t\t\t};\n\t\t\t})\n\t\t\t.inflate()\n\t\t\t.withIndex(row => dayjs(row.date).toDate());\n\t\treturn new Timeseries(df);\n\t}\n\n\tpopulate(value, type = \"avg\") {\n\t\tlet v;\n\t\tswitch (type) {\n\t\t\tcase \"fill\":\n\t\t\t\tv = value;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tv = value / this.getIndex().count();\n\t\t\t\tbreak;\n\t\t}\n\t\tlet df = this.generateSeries({ value: row => v });\n\t\treturn new Timeseries(df);\n\t}\n\t// fill(interval, fillType) {\n\t// \t// let interval = this.interval;\n\t// \tif (!interval || !Array.isArray(interval)) interval = this.interval;\n\t// \tlet ndf = this.fillGaps(gapExists(interval), gapFill(fillType, interval));\n\t// \treturn new Timeseries(ndf);\n\t// }\n\tfill() {\n\t\tlet startDate = this.first().date.toDate(),\n\t\t\tendDate = this.last().date.toDate();\n\t\tlet interval = this.interval;\n\t\tconsole.time(\"blank\");\n\t\tlet bdf = Timeseries.blank(startDate, endDate, interval, \"missing\");\n\t\tconsole.timeEnd(\"blank\");\n\t\tconsole.time(\"join\");\n\t\tlet df = this.joinOuterRight(\n\t\t\tbdf,\n\t\t\torigional => origional.date.valueOf(),\n\t\t\tblank => blank.date.valueOf(),\n\t\t\t(data, fill) => {\n\t\t\t\tif (data) {\n\t\t\t\t\treturn data;\n\t\t\t\t} else {\n\t\t\t\t\treturn fill;\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t\t// let df = this.zip(bdf, (data, fill) => {\n\t\t// \tif (data) {\n\t\t// \t\treturn data;\n\t\t// \t} else {\n\t\t// \t\treturn fill;\n\t\t// \t}\n\t\t// });\n\t\tconsole.timeEnd(\"join\");\n\t\tconsole.time(\"new timeseries\");\n\t\t// df = new Timeseries(df);\n\t\tconsole.timeEnd(\"new timeseries\");\n\t\treturn df;\n\t}\n\treduceToValue(columnNames) {\n\t\tfunction chooseValue(row, columnNames = []) {\n\t\t\tlet values = columnNames.map(n => row[n]).filter(v => v);\n\t\t\treturn values[0] || 0;\n\t\t}\n\t\tlet df = this.generateSeries({\n\t\t\tvalue: row => chooseValue(row, columnNames)\n\t\t}).subset([\"date\", \"value\"]);\n\t\treturn new Timeseries(df);\n\t}\n\tclean(columnName = \"value\", { lowerThreshold, upperThreshold }) {\n\t\tlet arr = this.toArray().map(row => {\n\t\t\tif (row.value > upperThreshold || row.value < lowerThreshold) {\n\t\t\t\tlet { value, flag = [], ...others } = row;\n\t\t\t\tif (!flag) flag = [];\n\t\t\t\tif (!Array.isArray(flag)) flag = [flag];\n\t\t\t\treturn {\n\t\t\t\t\tvalue: undefined,\n\t\t\t\t\traw: value,\n\t\t\t\t\tflag: [\"outlier\", ...flag],\n\t\t\t\t\t...others\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\treturn row;\n\t\t\t}\n\t\t});\n\t\treturn new Timeseries(arr);\n\t}\n\t// Static Methods\n\tstatic blank(startDate, endDate, [duration, value = 1], flag) {\n\t\tif ([\"minute\", \"hour\", \"day\", \"month\", \"year\"].indexOf(duration) < 0) {\n\t\t\tconsole.error(interval);\n\t\t\tthrow new Error(\"interval type not supported\");\n\t\t}\n\t\tstartDate = dayjs(startDate);\n\t\tendDate = dayjs(endDate);\n\t\tlet dates = [startDate];\n\t\tlet interval = intervalToMS([duration, value]);\n\t\twhile (dates[dates.length - 1].valueOf() < endDate.valueOf()) {\n\t\t\tdates.push(dayjs(dates[dates.length - 1]).add(value, duration));\n\t\t}\n\t\tlet df = new Timeseries(dates.map(date => ({ date })));\n\t\t// let df = new Timeseries([\n\t\t// \t{ date: dayjs(startDate) },\n\t\t// \t{ date: dayjs(endDate) }\n\t\t// ])\n\t\t// \t.fillGaps(gapExists([duration, value]), gapFillBlank([duration, value]))\n\t\t// \t.between(startDate, endDate);\n\t\tconsole.log(df.count());\n\t\tif (flag)\n\t\t\tdf = df.generateSeries({\n\t\t\t\tflag: row => [flag]\n\t\t\t});\n\t\treturn new Timeseries(df);\n\t}\n\tstatic aggregate(dataframes) {\n\t\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\t\tdataframes = dataframes.map(df => new Timeseries(df));\n\t\tconst concatenated = DataFrame.concat(dataframes)\n\t\t\t.groupBy(row => row.date)\n\t\t\t.select(group => {\n\t\t\t\tconst date = group.first().date;\n\t\t\t\tlet o = { date };\n\t\t\t\tgroup\n\t\t\t\t\t.getColumnNames()\n\t\t\t\t\t.filter(c => c !== \"date\")\n\t\t\t\t\t.forEach(c => (o[c] = group.deflate(row => row[c]).sum()));\n\t\t\t\treturn o;\n\t\t\t})\n\t\t\t.inflate()\n\t\t\t.toArray();\n\t\treturn new Timeseries(concatenated);\n\t}\n\t// Models\n\tannualMonthlyAverage({ startDate, endDate }) {\n\t\tlet months = this.downsample([\"month\", 1], \"sum\").between(\n\t\t\tstartDate,\n\t\t\tendDate\n\t\t);\n\t\tlet avg = months.getSeries(\"value\").average();\n\t}\n\t// Building Functions\n\tannualIntensity(normalizeValue = 1) {\n\t\tlet interval = this.interval;\n\t\tlet annual = this.groupBy(row => row.date.year())\n\t\t\t.select(group => {\n\t\t\t\tlet startDate = group.first().date;\n\t\t\t\tlet endDate = group\n\t\t\t\t\t.last()\n\t\t\t\t\t.date.add(interval[1] || 1, interval[0] || \"month\");\n\t\t\t\tlet scaler = annualScale(startDate, endDate);\n\t\t\t\treturn {\n\t\t\t\t\tstartDate,\n\t\t\t\t\tendDate,\n\t\t\t\t\t...fromPairs(\n\t\t\t\t\t\tthis.valueColumns.map(col => [\n\t\t\t\t\t\t\tcol,\n\t\t\t\t\t\t\t(group\n\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t.where(v => v)\n\t\t\t\t\t\t\t\t.sum() *\n\t\t\t\t\t\t\t\tscaler) /\n\t\t\t\t\t\t\t\tnormalizeValue\n\t\t\t\t\t\t])\n\t\t\t\t\t)\n\t\t\t\t};\n\t\t\t})\n\t\t\t.inflate()\n\t\t\t.renameSeries({ startDate: \"date\" })\n\t\t\t.dropSeries(\"endDate\");\n\t\treturn new Timeseries(annual);\n\t}\n\taddBaselineDelta(baselineDF) {\n\t\t// Only Change in Year\n\t\tif (!(baselineDF instanceof Timeseries))\n\t\t\tbaselineDF = new Timeseries(baselineDF);\n\t\tlet dfwb;\n\t\tif (baselineDF.count() > 1) {\n\t\t\tlet interval = this.interval;\n\t\t\tlet baselineInterval = baselineDF.interval;\n\t\t\tif (!isEqual(interval, baselineInterval)) {\n\t\t\t\tconsole.error(interval, baselineInterval);\n\t\t\t\tthrow new Error(\"baseline and data intervals do not match\");\n\t\t\t}\n\t\t\tlet indexer;\n\t\t\tswitch (interval[0]) {\n\t\t\t\tcase \"day\":\n\t\t\t\t\tindexer = date => `${date.month()}-${date.date()}`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"month\":\n\t\t\t\t\tindexer = date => date.month();\n\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tindexer = date => 0;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tlet indexedBaseline = baselineDF.withIndex(row => indexer(row.date));\n\t\t\tlet getBaselineValue = index => {\n\t\t\t\tlet at = indexedBaseline.at(index);\n\t\t\t\tif (at && has(at, \"value\")) {\n\t\t\t\t\treturn at.value;\n\t\t\t\t} else {\n\t\t\t\t\treturn indexedBaseline.getSeries(\"value\").average();\n\t\t\t\t}\n\t\t\t};\n\t\t\tdfwb = this.generateSeries({\n\t\t\t\tbaseline: row => getBaselineValue(indexer(row.date))\n\t\t\t});\n\t\t} else {\n\t\t\tdfwb = this.generateSeries({\n\t\t\t\tbaseline: row => baselineDF.first().value\n\t\t\t});\n\t\t}\n\t\tdfwb = dfwb.generateSeries({\n\t\t\tdelta: row => calculateChange(row.baseline, row.value)\n\t\t});\n\t\treturn new Timeseries(dfwb);\n\t}\n}\nexport default Timeseries;\n"],"names":["msToInterval","ms","start","dayjs","end","add","diff","Math","ceil","intervalToMS","unit","value","gapExists","duration","durationValue","pairA","pairB","startDate","floor","valueFiller","fillType","startValue","endValue","entryIndex","numEntries","overrideValue","dateFunction","date","flag","indexOf","Error","fromPairs","toPairs","map","key","val","gapFill","endDate","newEntries","adjustment","toDate","e","valueOf","Object","assign","push","rval","df","values","deflate","row","x","toArray","std","sampleStandardDeviation","mean","_mean","ndf","generateSeries","ares","R","DataFrame","abs","max","lambdaTest","n","i","alpha","p","pValue","t","degreeOfFreedom","Studentt","inv","tValue","lambda","sqrt","pow","modz","mad","median","modifiedZScoreTest","_median","medianAbsoluteDeviation","outliers","sort","a","b","filter","v","thresholds","upper","min","Infinity","lower","annualScale","calculateChange","baseline","Timeseries","constructor","data","super","others","index","considerAllRows","interval","this","getIndex","window","select","last","first","detectValues","orderBy","Frequency","Value","valueColumns","detectTypes","where","Type","distinct","Column","getSeries","dateRange","startOf","endOf","at","calculateThresholds","k","filterZeros","filterNegative","noflags","Array","isArray","length","isNaN","count","q1","q3","iqr","esd","dataset","newdf","dataframe","trip","pair","outlierValues","outlier","takeWhile","iterations","rosnerTest","box","lowerInner","quantile","upperInner","lowerOuter","upperOuter","calculateStatistics","column","series","average","dataQuality","transformAll","adjustmentFunction","columns","forEach","col","transformSeries","[object Object]","removeOutliers","lowerThreshold","upperThreshold","outlierCheck","raw","reset","withSeries","dropSeries","group","groupBy","resample","isEqual","d0","downsample","upsample","fillGaps","dateComparison","sum","getColumnNames","inflate","withIndex","populate","type","fill","console","time","bdf","blank","timeEnd","joinOuterRight","origional","reduceToValue","columnNames","chooseValue","subset","clean","columnName","arr","undefined","error","dates","log","dataframes","concatenated","concat","o","c","annualMonthlyAverage","between","annualIntensity","normalizeValue","annual","year","scaler","renameSeries","addBaselineDelta","baselineDF","dfwb","indexer","baselineInterval","month","indexedBaseline","has","getBaselineValue","delta"],"mappings":"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"}
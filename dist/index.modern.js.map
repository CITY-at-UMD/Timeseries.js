{"version":3,"file":"index.modern.js","sources":["../src/lib/Timeseries.interval.js","../src/lib/Timeseries.fill.js","../src/lib/Timeseries.statistics.js","../src/lib/misc.js","../src/index.js"],"sourcesContent":["import dayjs from \"dayjs\";\n\nconst msToInterval = ms => {\n\tlet start = dayjs();\n\tlet end = dayjs().add(ms);\n\tif (end.diff(start, \"month\", true) >= 11) {\n\t\treturn [\"year\", Math.ceil(end.diff(start, \"year\", true))];\n\t} else if (end.diff(start, \"day\", true) >= 28) {\n\t\treturn [\"month\", Math.ceil(end.diff(start, \"month\", true))];\n\t} else if (end.diff(start, \"hour\", true) >= 23) {\n\t\treturn [\"day\", Math.ceil(end.diff(start, \"day\", true))];\n\t} else if (end.diff(start, \"minute\", true) >= 55) {\n\t\treturn [\"hour\", Math.ceil(end.diff(start, \"hour\", true))];\n\t} else {\n\t\treturn [\"minute\", end.diff(start, \"minute\")];\n\t}\n};\nconst intervalToMS = ([unit, value]) => {\n\tlet start = dayjs();\n\tlet end = dayjs().add(value, unit);\n\treturn end.diff(start);\n};\nfunction calculateInterval(df, startDate, endDate) {\n\tif (!startDate) startDate = df.first.date;\n\tif (!endDate) endDate = df.last.date;\n\tfunction computeInterval(window) {\n\t\treturn window.last() - window.first();\n\t}\n\tconst intervals = df\n\t\t.between(startDate, endDate)\n\t\t.getIndex()\n\t\t.window(2)\n\t\t.select(computeInterval)\n\t\t.detectValues()\n\t\t.orderBy(row => row.Frequency);\n\n\tlet val = intervals.last().Value;\n\treturn msToInterval(val);\n}\nexport { msToInterval, intervalToMS, calculateInterval };\n","import dayjs from \"dayjs\";\nimport fromPairs from \"lodash/fromPairs\";\nimport toPairs from \"lodash/toPairs\";\nimport { mean } from \"simple-statistics\";\nconst gapExists = ([duration, durationValue = 1]) => (pairA, pairB) => {\n\tconst startDate = pairA[0];\n\tconst endDate = pairB[0];\n\tlet gapSize = Math.floor(\n\t\tdayjs(endDate).diff(startDate, duration, true) / durationValue\n\t);\n\n\tif (gapSize > 0) return true;\n\treturn false;\n};\n\nconst valueFiller = (\n\tfillType,\n\t{ startValue, endValue, entryIndex, numEntries },\n\t{ overrideValue, dateFunction, date, flag }\n) => {\n\tif (\n\t\t[\"pad\", \"interpolate\", \"average\", \"dateFunction\", \"value\"].indexOf(\n\t\t\tfillType\n\t\t) === -1\n\t) {\n\t\tthrow new Error(\"fill Type not supported\");\n\t}\n\tlet value;\n\tif (fillType === \"pad\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\treturn [key, startValue[key]];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", \"pad\"];\n\t} else if (fillType === \"interpolate\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv =\n\t\t\t\t\tstartValue[key] +\n\t\t\t\t\t(entryIndex + 1) *\n\t\t\t\t\t\t((endValue[key] - startValue[key]) / (numEntries + 1));\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"average\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv = (startValue[key] + endValue[key]) / numEntries;\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"dateFunction\" && dateFunction) {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv = dateFunction(date);\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"value\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv;\n\t\t\t\tif (typeof overrideValue === \"number\") {\n\t\t\t\t\tnv = overrideValue;\n\t\t\t\t} else {\n\t\t\t\t\tnv = overrideValue[key];\n\t\t\t\t}\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\treturn [key, null];\n\t\t\t})\n\t\t);\n\t\tflag = [\"fill\"];\n\t}\n\treturn { ...value, flag };\n};\n\nconst gapFill = (\n\tfillType,\n\t[duration, durationValue],\n\t{ overrideValue, dateFunction, flag } = {}\n) => (pairA, pairB) => {\n\t// Fill values forward.\n\n\tconst startDate = dayjs(pairA[0]);\n\tconst endDate = dayjs(pairB[0]);\n\tlet gapSize = Math.floor(\n\t\tdayjs(endDate).diff(startDate, duration) / durationValue\n\t);\n\tconst numEntries = gapSize - 1;\n\tconst startValue = pairA[1];\n\tconst endValue = pairB[1];\n\tconst newEntries = [];\n\tfor (let entryIndex = 0; entryIndex < numEntries; ++entryIndex) {\n\t\tlet adjustment = valueFiller(\n\t\t\t\tfillType,\n\t\t\t\t{ startValue, endValue, entryIndex, numEntries },\n\t\t\t\t{\n\t\t\t\t\toverrideValue,\n\t\t\t\t\tdateFunction,\n\t\t\t\t\tflag\n\t\t\t\t}\n\t\t\t),\n\t\t\tdate = dayjs(startDate)\n\t\t\t\t.add((entryIndex + 1) * durationValue, duration)\n\t\t\t\t.toDate();\n\t\tlet e = [date.valueOf(), Object.assign({}, adjustment, { date })];\n\t\tnewEntries.push(e);\n\t}\n\n\treturn newEntries;\n};\n\n// Basic Fill Functions\nconst averageMonthlyMap = df =>\n\tnew Map(\n\t\tdf\n\t\t\t.group(\"month\")\n\t\t\t.select(group => ({\n\t\t\t\tmonth: group.first().date.month(),\n\t\t\t\tvalue: group\n\t\t\t\t\t.getSeries(\"value\")\n\t\t\t\t\t.where(v => v)\n\t\t\t\t\t.average()\n\t\t\t}))\n\t\t\t.toArray()\n\t\t\t.map(({ month, value }) => [month, value])\n\t);\nconst annualMonthlyAverageMap = df =>\n\tnew Map(\n\t\tdf\n\t\t\t.groupBy(row => row.date.year())\n\t\t\t.select(group => {\n\t\t\t\tconst date = group.first().date.startOf(\"year\");\n\t\t\t\tlet ts = new Timeseries(group).downsample([\"month\", 1], \"avg\");\n\t\t\t\tlet avg = ts.getSeries(\"value\").average();\n\t\t\t\tlet map = averageMonthlyMap(ts);\n\t\t\t\tmap.set(\"avg\", avg);\n\t\t\t\treturn [date.year(), map];\n\t\t\t})\n\t\t\t.toArray()\n\t);\nconst monthlyRollingAverageMap = (\n\tdf,\n\t{ years = 3, series = \"value\", aggregator = \"average\" } = {}\n) => {\n\tlet months = df\n\t\t.groupBy(row => row.date.startOf(\"month\").toDate())\n\t\t.select(group => {\n\t\t\tlet date = group.first().date.startOf(\"month\");\n\t\t\tlet value = group\n\t\t\t\t.getSeries(series)\n\t\t\t\t.where(v => v)\n\t\t\t\t.average();\n\t\t\treturn { date, value };\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => row.date.toDate())\n\t\t.bake();\n\tlet data = months\n\t\t.groupBy(row => row.date.month())\n\t\t.select(group => {\n\t\t\tlet values = new Map(\n\t\t\t\tgroup\n\t\t\t\t\t.rollingWindow(years)\n\t\t\t\t\t.select(window => [\n\t\t\t\t\t\twindow.last().date.year(),\n\t\t\t\t\t\twindow.getSeries(series).average()\n\t\t\t\t\t])\n\t\t\t);\n\t\t\tgroup\n\t\t\t\t.where(row => !values.has(row.date.year()))\n\t\t\t\t.forEach(row => {\n\t\t\t\t\tlet value =\n\t\t\t\t\t\tmonths.before(row.date.toDate()).count() > 0\n\t\t\t\t\t\t\t? months.before(row.date.toDate()).last()[series]\n\t\t\t\t\t\t\t: months.getSeries(series).average();\n\t\t\t\t\tvalues.set(row.date.year(), value);\n\t\t\t\t});\n\n\t\t\tlet month = group.first().date.month();\n\t\t\treturn [month, values];\n\t\t})\n\t\t.toArray();\n\treturn new Map(data);\n};\n\nconst fillMonthlyByMap = monthMap => row => monthMap.get(row.date.month());\nconst fillMonthlyBAnnualyMap = annualMonthlyMap => row => {\n\tlet month = row.date.month(),\n\t\tyear = row.date.year();\n\tif (annualMonthlyMap.has(month)) {\n\t\tif (annualMonthlyMap.has(month)) {\n\t\t\treturn  annualMonthlyMap.get(month).get(year);\n\t\t} else {\n\t\t\treturn mean([...annualMonthlyMap.get(month).values()]);\n\t\t}\n\t} else {\n\t\treturn mean(\n\t\t\t[...annualMonthlyMap.values()].map(m =>\n\t\t\t\t[...m.values()].reduce((a, b) => a.concat(b), [])\n\t\t\t)\n\t\t);\n\t}\n};\n\nconst pad = (df, { validOnly = true, series = \"value\" } = {}) => row => {\n\tlet values = df\n\t\t.before(row.date.toDate())\n\t\t.getSeries(series)\n\t\t.where(v => v);\n\tlet value = values.count() > 0 ? values.last() : 0;\n\t// console.log(row.date.toDate(), value);\n\treturn value;\n};\nconst annualAverage = (\n\tdf,\n\t{ validOnly = true, series = \"value\", years = 3, defaultValue } = {}\n) => row => {\n\tlet subset = df\n\t\t.subset([\"date\", series])\n\t\t.after(row.date.subtract(years, \"year\").toDate())\n\t\t.before(row.date.toDate())\n\t\t.bake();\n\tlet values = subset\n\t\t.where(r => r.date.month() === row.date.month())\n\t\t.where(r => r.date.date() === row.date.date())\n\t\t.where(r => r.date.hour() === row.date.hour())\n\t\t.where(r => r.date.minute() === row.date.minute())\n\t\t.getSeries(series)\n\t\t.where(v => v);\n\n\tlet value;\n\tif (values.count() < years) {\n\t\tvalue = values\n\t\t\t.appendPair([\n\t\t\t\tnull,\n\t\t\t\tsubset\n\t\t\t\t\t.getSeries(series)\n\t\t\t\t\t.where(v => v)\n\t\t\t\t\t.average()\n\t\t\t])\n\t\t\t.average();\n\t} else {\n\t\tvalue = values.average();\n\t}\n\t// console.log(row.date.toDate(), values.toArray(), value);\n\treturn value;\n};\nexport {\n\tgapExists,\n\tgapFill,\n\taverageMonthlyMap,\n\tfillMonthlyByMap,\n\tpad,\n\tannualAverage,\n\tannualMonthlyAverageMap,\n\tmonthlyRollingAverageMap,\n\tfillMonthlyBAnnualyMap\n};\n","// Source: https://www.itl.nist.gov/div898/handbook/eda/section3/eda35h3.htm\n// https://vsp.pnnl.gov/help/Vsample/Rosners_Outlier_Test.htm\n// https://www.itl.nist.gov/div898/handbook/prc/section1/prc16.htm\n// https://www.math.ucla.edu/~tom/distributions/KolSmir2.html?\nimport { DataFrame } from \"data-forge\";\nimport {\n  sampleStandardDeviation,\n  mean as _mean,\n  max,\n  median as _median,\n  medianAbsoluteDeviation,\n  quantile\n} from \"simple-statistics\";\nimport { Studentt } from \"distributions\";\nimport dayjs from \"dayjs\";\n\nfunction rval(df) {\n  let values = df.deflate(row => row.x).toArray();\n  let std = sampleStandardDeviation(values);\n  let mean = _mean(values);\n  if (std === 0) {\n    let ndf = df.generateSeries({ ares: row => 0 });\n    return { R: 0, std, mean, df: ndf };\n  }\n  let ndf = new DataFrame({\n    values: values.map(x => ({\n      x,\n      ares: Math.abs(x - mean) / std\n    }))\n  });\n  let R = max(ndf.deflate(row => row.ares).toArray());\n  return { R, df: ndf, std, mean };\n}\n\nfunction pValue(n, i, alpha) {\n  let p = 1 - alpha / (2 * (n - i + 1));\n  return p;\n}\nfunction tValue(p, degreeOfFreedom) {\n  let qt = new Studentt(degreeOfFreedom);\n  let t = qt.inv(p);\n  return t;\n}\n//\nfunction lambdaTest(n, i, alpha) {\n  let p = pValue(n, i, alpha);\n  let df = n - i - 1;\n  let t = tValue(p, df);\n  let lambda =\n    (t * (n - i)) /\n    Math.sqrt((n - i - 1 + Math.pow(t, 2)) * (n - i + 1));\n  return { lambda, p, t };\n}\nfunction rosnerTest(dataset = [], k = 10, alpha = 0.05) {\n  let dataframe = new DataFrame({\n    values: dataset.map(x => ({ x }))\n  });\n  let n = dataframe.getSeries(\"x\").count();\n  let newdf;\n  let i = 1;\n  let outliers = [];\n  let trip = false;\n  while (i <= k) {\n    let pair = {};\n    let s = Date.now();\n    if (i === 1) {\n      let { R, df, mean, std } = rval(dataframe);\n      newdf = df.where(row => row.ares !== R);\n      pair = Object.assign({}, pair, {\n        mean,\n        std,\n        Value: df\n          .where(row => row.ares === R)\n          .getSeries(\"x\")\n          .first(),\n        R\n      });\n    } else {\n      let { R, df, mean, std } = rval(newdf);\n      newdf = df.where(row => row.ares !== R);\n      pair = Object.assign({}, pair, {\n        mean,\n        std,\n        Value: df\n          .where(row => row.ares === R)\n          .getSeries(\"x\")\n          .first(),\n        R\n      });\n    }\n    let { lambda, p, t } = lambdaTest(n, i, alpha);\n    pair = Object.assign({}, pair, { lambda });\n    outliers.push(pair);\n    if (trip && pair.R > pair.lambda) trip = false;\n    if (pair.R === 0) break;\n    if (pair.R < pair.lambda) {\n      if (trip) {\n        break;\n      } else {\n        trip = true;\n      }\n    }\n    i++;\n  }\n  outliers = new DataFrame(outliers)\n    .generateSeries({\n      outlier: row => row.R > row.lambda\n    })\n    .takeWhile(row => row.outlier);\n  let outlierValues = outliers\n    .where(row => row.Value > 0)\n    .deflate(row => row.Value);\n  let thresholds = {\n    lower: 0,\n    upper:\n      outlierValues.count() > 0 ? outlierValues.min() : Infinity\n  };\n  return {\n    outliers,\n    thresholds,\n    iterations: i\n  };\n}\nconst modz = (value, mad, median) => {\n  return (0.6745 * (value - median)) / mad;\n};\nfunction modifiedZScoreTest(values) {\n  let median = _median(values);\n  let mad = medianAbsoluteDeviation(values);\n  values = values\n    .sort((a, b) => b - a)\n    .filter(v => v > 0)\n    .map(v => [v, modz(v, mad, median)]);\n  let outliers = values.filter(\n    ([v, modz]) => Math.abs(modz) >= 3.5\n  );\n  let upper = Math.min(\n    ...[Infinity, ...outliers.map(v => v[0])]\n  );\n  // let score,\n  // \tvalue,\n  // \tthreshold = Infinity,\n  // \tindex = 0;\n  // do {\n  // \tvalue = values[index];\n  // \tscore = modz(value, mad, median);\n  // \tif (Math.abs(score) >= 3.5) threshold = value;\n  // } while (score >= 3.5);\n  return { thresholds: { upper, lower: 0 } };\n}\nfunction boxPlotTest(values) {\n  let q1 = quantile(values, 0.25);\n  let q3 = quantile(values, 0.75);\n  let iqr = q3 - q1;\n  return {\n    thresholds: {\n      lowerInner: q1 - 1.5 * iqr,\n      upperInner: q1 - 3 * iqr,\n      lowerOuter: q3 + 1.5 * iqr,\n      upperOuter: q3 + 3 * iqr\n    }\n  };\n}\nfunction calculateOutlierThresholds(\n  df,\n  { k, filterZeros = true } = {}\n) {\n  let values = df\n    .where(\n      row =>\n        row.flag === null ||\n        row.flag === undefined ||\n        Array.isArray(row.flag)\n    )\n    .where(row => !isNaN(row.value) && row.value !== null)\n    .getSeries(\"value\")\n    .bake();\n  if (filterZeros) values = values.where(value => value > 0);\n  if (!k) {\n    k =\n      values.count() < 1000\n        ? Math.floor(values.count() * 0.15)\n        : Math.min(...[1000, Math.floor(values.count() * 0.02)]);\n  }\n  if (values.count < 5) return {};\n  let { outliers, threshold } = rosnerTest(values.toArray(), k);\n  return { outliers, threshold };\n}\n\nfunction zeroCheck(df, threshold = 2) {\n  let zeroGroups = df\n    .variableWindow((a, b) => {\n      return a.value === b.value && a.value === 0;\n    })\n    .where(window => window.getIndex().count() >= threshold);\n  let zeroSummary = zeroGroups\n    .select(window => ({\n      start: window.first().date,\n      end: window.last().date,\n      count: window.count()\n    }))\n    .inflate(); // Series -> dataframe.\n  // .toArray()\n  return { zeroSummary, zeroGroups };\n}\n\nfunction zeroReplacement(df, threshold) {\n  let { zeroGroups } = zeroCheck(df, threshold);\n  zeroGroups.forEach(dff => {\n    dff = dff.transformSeries({\n      value: value => null,\n      flag: value => [\"zero\"]\n    });\n    df = DataFrame.merge([df, dff]);\n  });\n  return df;\n}\nfunction isOutlier(value, { lower, upper }) {\n  if (value < lower || value >= upper) {\n    return true;\n  }\n  return false;\n}\nfunction validMean(df) {\n  let values = df\n    .getSeries(\"value\")\n    .where(value => typeof value === \"number\");\n  return values.average();\n}\nfunction validMonthlyMeanMap(df) {\n  let dateComparison = row =>\n    dayjs(row.date)\n      .startOf(\"month\")\n      .month();\n\n  df = df\n    .where(row => typeof row.value === \"number\")\n    .groupBy(dateComparison)\n    .select(group => ({\n      month: new Date(group.first().date).getMonth(),\n      value: group.deflate(row => row.value).average()\n    }));\n  return new Map(\n    df.toArray().map(({ month, value }) => [month, value])\n  );\n}\n\nfunction quality(df) {\n  let count = df.getIndex().count();\n  let valid = df\n    .getSeries(\"flag\")\n    .where(\n      value =>\n        value === null ||\n        (Array.isArray(value) && value.length === 0)\n    )\n    .count();\n  let missing = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"missing\") !== -1)\n    .count();\n  let dirty = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"clean\") !== -1)\n    .count();\n  let zerod = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"zero\") !== -1)\n    .count();\n  let breakdown = {\n    valid: valid / count,\n    missing: missing / count,\n    invalid: (dirty + zerod) / count\n  };\n  let report = {\n    accuracy: (1 - dirty / count) * 4,\n    completeness: 4 * breakdown.valid,\n    consistency: 4 * ((count - missing - zerod) / count)\n  };\n  return { breakdown, report, count };\n}\n\nexport {\n  rosnerTest,\n  modifiedZScoreTest,\n  boxPlotTest,\n  calculateOutlierThresholds,\n  zeroReplacement,\n  isOutlier,\n  validMean,\n  validMonthlyMeanMap,\n  quality\n};\n","import dayjs from \"dayjs\";\nexport const annualScale = (start, end) =>\n\t365 / dayjs(end).diff(dayjs(start), \"day\");\nexport const calculateChange = (baseline, value) =>\n\t(value - baseline) / baseline;\n","import dayjs from \"dayjs\";\nimport dataForge from \"data-forge\";\nimport { msToInterval, intervalToMS } from \"./lib/Timeseries.interval\";\nimport isEqual from \"lodash/isEqual\";\nimport has from \"lodash/has\";\nimport get from \"lodash/get\";\nimport fromPairs from \"lodash/fromPairs\";\nimport {\n\tgapExists,\n\tgapFill,\n\taverageMonthlyMap,\n\tfillMonthlyByMap,\n\tpad,\n\tannualAverage,\n\tannualMonthlyAverageMap,\n\tmonthlyRollingAverageMap,\n\tfillMonthlyBAnnualyMap\n} from \"./lib/Timeseries.fill\";\nimport {\n\tckmeans,\n\tmax,\n\tmedianAbsoluteDeviation,\n\tquantile\n} from \"simple-statistics\";\n\nimport {\n\trosnerTest,\n\tboxPlotTest,\n\tmodifiedZScoreTest\n} from \"./lib/Timeseries.statistics\";\nimport { annualScale, calculateChange } from \"./lib/misc\";\n\n// export default ;\n// Fill Options\nexport {\n\tTimeseries,\n\tannualAverage,\n\taverageMonthlyMap,\n\tannualMonthlyAverageMap,\n\tmonthlyRollingAverageMap,\n\tfillMonthlyBAnnualyMap,\n\tfillMonthlyByMap,\n\tpad\n};\nfunction Timeseries(data, options = {}) {\n\t// const { msIndex } = options;\n\tif (data instanceof Timeseries) {\n\t\treturn data;\n\t}\n\tif (data instanceof dataForge.DataFrame) {\n\t\tdata = data.toArray();\n\t}\n\n\tdata = data\n\t\t.map(({ date, ...others }) => ({ date: dayjs(date), ...others }))\n\t\t.sort((a, b) => a.date.valueOf() - b.date.valueOf());\n\tlet config = {\n\t\t// columns: ['date', 'value', 'raw', 'flag'],\n\t\tvalues: data,\n\t\tindex: data.map(({ date }) => date.toDate()),\n\t\tconsiderAllRows: true\n\t};\n\tdataForge.DataFrame.call(this, config);\n}\n\nTimeseries.prototype = Object.create(dataForge.DataFrame.prototype);\nTimeseries.prototype.constructor = Timeseries;\n\n// Getters\nfunction getValueColumns() {\n\treturn this.detectTypes()\n\t\t.where(row => row.Type === \"number\")\n\t\t.distinct(row => row.Column)\n\t\t.getSeries(\"Column\")\n\t\t.toArray();\n}\nfunction interval() {\n\tconst computeInterval = window => window.last() - window.first();\n\tconst intervals = this.getIndex()\n\t\t.window(2)\n\t\t.select(computeInterval)\n\t\t.detectValues()\n\t\t.orderBy(row => -row.Frequency);\n\t// .orderBy(row => row.Value);\n\n\tlet val = intervals.first().Value;\n\n\treturn msToInterval(val);\n}\n\nfunction dateRange(unit, adjustment) {\n\tlet start = dayjs(this.first().date),\n\t\tend = dayjs(this.last().date);\n\tif (adjustment) {\n\t\tstart = start.startOf(adjustment);\n\t\tend = end.endOf(adjustment);\n\t}\n\treturn end.diff(start, unit);\n}\nTimeseries.prototype.getValueColumns = getValueColumns;\nTimeseries.prototype.getInterval = interval;\nTimeseries.prototype.getDateRange = dateRange;\n\n// Statistics\nfunction cvrsme(actual, simulated) {\n\tlet df = this.subset([actual, simulated])\n\t\t.resetIndex()\n\t\t.generateSeries({\n\t\t\tactual: row => row[actual] || 0,\n\t\t\tsimulated: row => row[simulated] || 0\n\t\t})\n\t\t.dropSeries([actual, simulated])\n\t\t.generateSeries({ diff: row => row.actual - row.simulated });\n\tconsole.log(df.head(10).toString());\n\tlet n = df.count();\n\tlet p = 1.0;\n\tlet ybar = df.getSeries(actual).sum() / n;\n\tlet v = Math.sqrt(df.getSeries(\"diff\").sum() / (n - p)) / ybar;\n\treturn v;\n}\nfunction nmbe(actual, simulated) {\n\tlet df = this.subset([actual, simulated])\n\t\t.resetIndex()\n\t\t.generateSeries({\n\t\t\tactual: row => row[actual] || 0,\n\t\t\tsimulated: row => row[simulated] || 0\n\t\t})\n\t\t.dropSeries([actual, simulated])\n\t\t.generateSeries({ diff: row => row.actual - row.simulated });\n\tconsole.log(df.head(10).toString());\n\tlet n = df.count();\n\tlet p = 1.0;\n\tlet ybar = df.getSeries(\"actual\").sum() / n;\n\tconsole.log(n, p, ybar, df.getSeries(\"diff\").sum());\n\tlet b = df.getSeries(\"diff\").sum() / ((n - p) * ybar);\n\treturn b;\n}\nTimeseries.prototype.cvrsme = cvrsme;\nTimeseries.prototype.nmbe = nmbe;\n\n// Methods\nfunction calculateThresholdOptions({\n\tk,\n\tfilterZeros = true,\n\tfilterNegative = true\n} = {}) {\n\tlet noflags = this.where(\n\t\trow =>\n\t\t\trow.flag === null ||\n\t\t\trow.flag === undefined ||\n\t\t\t(Array.isArray(row.flag) && row.flag.length === 0)\n\t)\n\t\t.where(row => !isNaN(row.value) && row.value !== null)\n\t\t.getSeries(\"value\");\n\tif (filterZeros) noflags = noflags.where(value => value !== 0);\n\tif (filterNegative) noflags = noflags.where(value => value > 0);\n\tif (!k) {\n\t\tk =\n\t\t\tnoflags.count() < 1000\n\t\t\t\t? Math.floor(noflags.count() * 0.15)\n\t\t\t\t: Math.min(...[1000, Math.floor(noflags.count() * 0.02)]);\n\t}\n\tif (noflags.count() < 5) return {};\n\tlet { thresholds: esd } = rosnerTest(noflags.toArray(), k);\n\tlet { thresholds: box } = boxPlotTest(noflags.toArray());\n\tlet { thresholds: modz } = modifiedZScoreTest(noflags.toArray());\n\treturn { esd, box, modz };\n}\n\nfunction getBestThreshold() {\n\ttry {\n\t\tlet thresholds = this.calculateThresholdOptions();\n\t\tconst thresholdGroups = ckmeans(\n\t\t\t[\n\t\t\t\tget(thresholds, \"esd.upper\", null),\n\t\t\t\tget(thresholds, \"modz.upper\", null),\n\t\t\t\tget(thresholds, \"box.lowerOuter\", null),\n\t\t\t\tget(thresholds, \"box.upperOuter\", null)\n\t\t\t].filter(v => v),\n\t\t\t2\n\t\t);\n\t\tlet threshold_actual = max(\n\t\t\tthresholdGroups.reduce((a, b) => (a.length > b.length ? a : b))\n\t\t);\n\t\treturn threshold_actual;\n\t} catch (error) {\n\t\tconsole.error(error);\n\t\tthrow new Error(\"Cannot determine threshold\");\n\t}\n}\n\nfunction calculateStatistics(options = {}) {\n\tconst {\n\t\tcolumn = \"value\",\n\t\tfilterZeros = false,\n\t\tfilterNegative = true\n\t} = options;\n\tlet series = this.deflate(row => row[column]).where(value => !isNaN(value));\n\tif (filterNegative) series = series.where(value => value >= 0);\n\tif (filterZeros) series = series.where(value => value !== 0);\n\tlet median = series.median();\n\tlet mean = series.average();\n\tlet count = series.count();\n\tlet std = series.std();\n\tlet min = series.min();\n\tlet max = series.max();\n\tlet mad = medianAbsoluteDeviation(series.toArray());\n\tlet q1 = quantile(series.toArray(), 0.25);\n\tlet q3 = quantile(series.toArray(), 0.75);\n\tlet iqr = q3 - q1;\n\tlet stats = {\n\t\tmedian,\n\t\tmean,\n\t\tcount,\n\t\tstd,\n\t\tmin,\n\t\tmax,\n\t\tmad,\n\t\tq1,\n\t\tq3,\n\t\tiqr\n\t};\n\treturn stats;\n}\n\nTimeseries.prototype.calculateStatistics = calculateStatistics;\nTimeseries.prototype.calculateThresholdOptions = calculateThresholdOptions;\nTimeseries.prototype.getBestThreshold = getBestThreshold;\n\n// Chainable Methods\nfunction betweenDates(start, end) {\n\tlet df = this.between(start, end);\n\treturn new Timeseries(df);\n}\nTimeseries.prototype.betweenDates = betweenDates;\n\nfunction transformAllSeries(adjustmentFunction, { exclude }) {\n\tlet df = this;\n\tlet columns = (columns = df\n\t\t.detectTypes()\n\t\t.where(row => row.Type === \"number\")\n\t\t.distinct(row => row.Column)\n\t\t.getSeries(\"Column\")\n\t\t.toArray());\n\tif (exclude && Array.isArray(exclude)) {\n\t\tcolumns = columns.filter(col => exclude.indexOf(col) === -1);\n\t}\n\tcolumns.forEach(col => {\n\t\tdf = df.transformSeries({\n\t\t\t[col]: value => {\n\t\t\t\tif (isNaN(value)) {\n\t\t\t\t\treturn value;\n\t\t\t\t} else {\n\t\t\t\t\treturn adjustmentFunction(value);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\treturn df;\n}\n\nTimeseries.prototype.transformAllSeries = transformAllSeries;\n\nfunction reset() {\n\tlet df = this.withSeries({\n\t\tvalue: row =>\n\t\t\trow.flag && Array.isArray(row.flag) && row.flag.length > 0\n\t\t\t\t? row.raw\n\t\t\t\t: row.value\n\t})\n\t\t.subset([\"date\", \"value\"])\n\t\t.where(row => !isNaN(row.value) && row.value !== null);\n\treturn new Timeseries(df);\n}\nTimeseries.prototype.reset = reset;\n\nfunction group(interval, toArray) {\n\tif ([\"hour\", \"day\", \"month\", \"year\"].indexOf(interval) === -1)\n\t\tthrow new Error(\"interval type not supported\");\n\tlet dateComparison = row => dayjs(row.date).startOf(interval);\n\tlet groups = this.groupBy(dateComparison);\n\treturn groups;\n}\n\nTimeseries.prototype.group = group;\n\nfunction removeOutliers({ series = \"value\", lower, upper } = {}) {\n\tif (lower > upper) throw new Error(\"thresholds invalid\");\n\tlet outlierCheck = (value, lower, upper) => value < lower || value > upper;\n\n\tlet outliers = this.where(row => outlierCheck(row[series], lower, upper))\n\t\t.generateSeries({\n\t\t\traw: row => row[series],\n\t\t\tflag: ({ flag = [] }) => [\"outlier\", ...flag]\n\t\t})\n\t\t.transformSeries({\n\t\t\t[series]: value => null\n\t\t});\n\n\tlet merged = this.merge(outliers);\n\treturn new Timeseries(merged);\n}\n\nTimeseries.prototype.removeOutliers = removeOutliers;\nTimeseries.prototype.clean = removeOutliers;\n\nfunction downsample([duration, value], fillType = \"sum\") {\n\tif ([\"hour\", \"day\", \"month\", \"year\"].indexOf(duration) === -1)\n\t\tthrow new Error(\"interval type not supported\");\n\tif ([\"sum\", \"avg\", \"median\"].indexOf(fillType) === -1) {\n\t\tthrow new Error(\"aggregation type not suppported, only:\");\n\t}\n\tlet dateComparison = row => row.date.startOf(duration);\n\tlet valueColumns = this.getValueColumns();\n\tif (value) {\n\t\tdateComparison = row => row.date.startOf(duration).add(value, duration);\n\t}\n\tlet df = this.groupBy(dateComparison)\n\t\t.select(group => {\n\t\t\tconst date = group.first().date.startOf(duration);\n\t\t\treturn {\n\t\t\t\tdate,\n\t\t\t\t...fromPairs([\n\t\t\t\t\t...valueColumns.map(col => {\n\t\t\t\t\t\tlet value;\n\t\t\t\t\t\tswitch (fillType) {\n\t\t\t\t\t\t\tcase \"median\":\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.median();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"avg\":\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.average();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t// sum\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.sum();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn [col, value];\n\t\t\t\t\t}),\n\t\t\t\t\t...group\n\t\t\t\t\t\t.getColumnNames()\n\t\t\t\t\t\t.filter(col => col !== \"date\")\n\t\t\t\t\t\t.filter(col => valueColumns.indexOf(col) === -1)\n\t\t\t\t\t\t.map(col => {\n\t\t\t\t\t\t\tlet value = group\n\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t.distinct()\n\t\t\t\t\t\t\t\t.toArray();\n\t\t\t\t\t\t\tif (value.length === 1) value = value[0];\n\t\t\t\t\t\t\treturn [col, value];\n\t\t\t\t\t\t})\n\t\t\t\t])\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => dayjs(row.date).toDate());\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.downsample = downsample;\n\nfunction upsample([duration, value], fillType = \"avg\") {\n\t// Dont use this b/c it has the raw and flag values\n\tlet df = this.fillGaps(\n\t\tgapExists([duration, value]),\n\t\tgapFill(fillType, [duration, value])\n\t);\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.upsample = upsample;\n\nfunction populate(value, type = \"avg\") {\n\tlet v;\n\tswitch (type) {\n\t\tcase \"fill\":\n\t\t\tv = value;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tv = value / this.count();\n\t\t\tbreak;\n\t}\n\tlet df = this.generateSeries({ value: row => v });\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.populate = populate;\n\nfunction reduceToValue(columnNames) {\n\tfunction chooseValue(row, columnNames = []) {\n\t\tlet values = columnNames.map(n => row[n]).filter(v => v);\n\t\treturn values[0] || 0;\n\t}\n\tlet df = this.generateSeries({\n\t\tvalue: row => chooseValue(row, columnNames)\n\t}).subset([\"date\", \"value\"]);\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.reduceToValue = reduceToValue;\n\nfunction cumulativeSum(columns) {\n\tif (!columns) columns = this.getValueColumns();\n\tif (columns & !Array.isArray(columns)) columns = [columns];\n\tlet df = this;\n\tconsole.log(df.getColumnNames());\n\tconst cumulativeSum = sum => value => (sum += value);\n\tcolumns.forEach(s => {\n\t\tdf = df.withSeries(s, df.getSeries(s).select(cumulativeSum(0)));\n\t});\n\t// console.log(df.toString());\n\treturn new Timeseries(df);\n}\nTimeseries.prototype.cumulativeSum = cumulativeSum;\n\nfunction totalRows(series = [\"value\"], colname = \"total\") {\n\tlet ndf = this.generateSeries({\n\t\t[colname]: row => series.map(v => row[v] || 0).reduce((a, b) => a + b, 0)\n\t});\n\treturn new Timeseries(ndf);\n}\nTimeseries.prototype.totalRows = totalRows;\nTimeseries.prototype.totalRow = totalRows;\nTimeseries.prototype.totalColumns = totalRows;\n\n// Baseline Functions\nfunction rollingPercentChange(col = \"value\", decimal = true) {\n\tlet df = this;\n\tlet delta = df.withSeries(\"delta\", df.getSeries(\"value\").percentChange());\n\tif (decimal) delta = data.transformSeries({ delta: value => value / 100 });\n\treturn new Timeseries(delta);\n}\n\nTimeseries.prototype.rollingPercentChange = rollingPercentChange;\nfunction baselinePercentChange(baselineDF) {\n\t// Only Change in Year\n\tif (!(baselineDF instanceof Timeseries))\n\t\tbaselineDF = new Timeseries(baselineDF);\n\tlet dfwb;\n\tif (baselineDF.count() > 1) {\n\t\tlet interval = this.getInterval();\n\t\tlet baselineInterval = baselineDF.interval;\n\t\tif (!isEqual(interval, baselineInterval)) {\n\t\t\tconsole.error(interval, baselineInterval);\n\t\t\tthrow new Error(\"baseline and data intervals do not match\");\n\t\t}\n\t\tlet indexer;\n\t\tswitch (interval[0]) {\n\t\t\tcase \"day\":\n\t\t\t\tindexer = date => `${date.month()}-${date.date()}`;\n\t\t\t\tbreak;\n\t\t\tcase \"month\":\n\t\t\t\tindexer = date => date.month();\n\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tindexer = date => 0;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tlet indexedBaseline = baselineDF.withIndex(row => indexer(row.date));\n\t\tlet getBaselineValue = index => {\n\t\t\tlet at = indexedBaseline.at(index);\n\t\t\tif (at && has(at, \"value\")) {\n\t\t\t\treturn at.value;\n\t\t\t} else {\n\t\t\t\treturn indexedBaseline.getSeries(\"value\").average();\n\t\t\t}\n\t\t};\n\t\tdfwb = this.generateSeries({\n\t\t\tbaseline: row => getBaselineValue(indexer(row.date))\n\t\t});\n\t} else {\n\t\tdfwb = this.generateSeries({\n\t\t\tbaseline: row => baselineDF.first().value\n\t\t});\n\t}\n\tdfwb = dfwb.generateSeries({\n\t\tdelta: row => calculateChange(row.baseline, row.value)\n\t});\n\treturn new Timeseries(dfwb);\n}\n\nTimeseries.prototype.baselinePercentChange = baselinePercentChange;\nTimeseries.prototype.addBaselineDelta = baselinePercentChange;\n\nfunction annualIntensity(normalizeValue = 1) {\n\tlet interval = this.getInterval();\n\tlet annual = this.groupBy(row => row.date.year())\n\t\t.select(group => {\n\t\t\tlet startDate = group.first().date;\n\t\t\tlet endDate = group\n\t\t\t\t.last()\n\t\t\t\t.date.add(interval[1] || 1, interval[0] || \"month\");\n\t\t\tlet scaler = annualScale(startDate, endDate);\n\t\t\treturn {\n\t\t\t\tstartDate,\n\t\t\t\tendDate,\n\t\t\t\t...fromPairs(\n\t\t\t\t\tthis.getValueColumns().map(col => [\n\t\t\t\t\t\tcol,\n\t\t\t\t\t\t(group\n\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t.where(v => v)\n\t\t\t\t\t\t\t.sum() *\n\t\t\t\t\t\t\tscaler) /\n\t\t\t\t\t\t\tnormalizeValue\n\t\t\t\t\t])\n\t\t\t\t)\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.renameSeries({ startDate: \"date\" })\n\t\t.dropSeries(\"endDate\");\n\treturn new Timeseries(annual);\n}\n\nTimeseries.prototype.annualIntensity = annualIntensity;\n\n// Fill Functions\n\nfunction fillMissing() {\n\tlet df = this;\n\tlet startDate = df.first().date.toDate(),\n\t\tendDate = df.last().date.toDate();\n\tlet interval = df.getInterval();\n\tlet bdf = Timeseries.blank(\n\t\tstartDate,\n\t\tendDate,\n\t\tinterval,\n\t\t\"missing\"\n\t).withIndex(row => row.date.valueOf());\n\tlet m = bdf.merge(df.withIndex(row => row.date.valueOf())).generateSeries({\n\t\tflag: row =>\n\t\t\trow.value === null || row.value === undefined ? row.flag : undefined\n\t});\n\tm = new Timeseries(m);\n\treturn m;\n}\nTimeseries.prototype.fillMissing = fillMissing;\n\nfunction fillNull({ series = \"value\", value, callback }) {\n\tconst seriesCheck = row => row[series] === null || row[series] === undefined;\n\tif (callback) {\n\t\tlet df = this.generateSeries({\n\t\t\tflag: row =>\n\t\t\t\tseriesCheck(row) ? [\"fill\", ...(row.flag || [])] : row.flag,\n\t\t\t[series]: row => (seriesCheck(row) ? callback(row) : row[series])\n\t\t});\n\t\treturn new Timeseries(df);\n\t} else if (value) {\n\t\tlet df = this.generateSeries({\n\t\t\tflag: row => (seriesCheck(row) ? [\"fill\", ...(row.flag || [])] : row.flag)\n\t\t}).transformSeries({\n\t\t\t[series]: currentValue =>\n\t\t\t\tcurrentValue === null || currentValue === undefined\n\t\t\t\t\t? value\n\t\t\t\t\t: currentValue\n\t\t});\n\t\treturn new Timeseries(df);\n\t} else {\n\t\treturn this;\n\t}\n}\nTimeseries.prototype.fillNull = fillNull;\n\nfunction zeroFaultDetection(thresholdInterval) {\n\tif (!Array.isArray(thresholdInterval))\n\t\tthresholdInterval = [thresholdInterval, 1];\n\tthresholdInterval = intervalToMS(thresholdInterval);\n\tlet df = this;\n\tlet zeroFaultDates = df\n\t\t.where(row => row.value === 0)\n\t\t.ensureSeries(\n\t\t\t\"interval\",\n\t\t\tdf\n\t\t\t\t.where(row => row.value === 0)\n\t\t\t\t.getSeries(\"date\")\n\t\t\t\t.amountChange()\n\t\t)\n\t\t.where(v => v.interval <= thresholdInterval)\n\t\t.subset([\"date\"])\n\t\t.generateSeries({ value: row => null, flag: row => [\"zeroFault\"] });\n\n\tlet zeroFaultDF = new Timeseries(this.merge(zeroFaultDates));\n\treturn zeroFaultDF;\n}\n\nTimeseries.prototype.zeroFaultDetection = zeroFaultDetection;\n\nfunction dataQuality() {\n\tlet count = this.count();\n\tlet withFlags = this.where(r => Array.isArray(r.flag) && r.flag.length > 0)\n\t\t.groupBy(r => r.flag.toString())\n\t\t.select(group => ({\n\t\t\tflag: group.first().flag,\n\t\t\tcount: group.count(),\n\t\t\tpercent: group.count() / count\n\t\t}))\n\t\t.inflate();\n\tlet good = this.where(\n\t\tr =>\n\t\t\tr.flag === undefined ||\n\t\t\tr.flag === null ||\n\t\t\t(Array.isArray(r.flag) && r.flag.length === 0)\n\t).count();\n\tlet quality = withFlags\n\t\t.appendPair([\n\t\t\twithFlags.count(),\n\t\t\t{ flag: \"clean\", count: good, percent: good / count }\n\t\t])\n\t\t.orderByDescending(row => row.count);\n\treturn quality;\n}\n\nTimeseries.prototype.dataQuality = dataQuality;\n\nfunction monthlyWithQual() {\n\tlet interval = this.getInterval();\n\tlet ms = intervalToMS(interval);\n\tconst duration = \"month\";\n\tlet dateComparison = row =>\n\t\tdayjs(row.date)\n\t\t\t.startOf()\n\t\t\t.valueOf();\n\tlet ts = this.groupBy(dateComparison)\n\t\t.select(group => {\n\t\t\tconst date = dayjs(group.first().date)\n\t\t\t\t.startOf(duration)\n\t\t\t\t.toDate();\n\t\t\tlet fullCount = Math.floor(\n\t\t\t\tdayjs(date)\n\t\t\t\t\t.endOf(\"month\")\n\t\t\t\t\t.diff(dayjs(date), \"millisecond\") / ms\n\t\t\t);\n\t\t\tlet days = new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\n\t\t\tlet count = group\n\t\t\t\t.getSeries(\"value\")\n\t\t\t\t.where(v => v && v !== 0)\n\t\t\t\t.toArray().length;\n\t\t\tlet value = group\n\t\t\t\t.getSeries(\"value\")\n\t\t\t\t.where(v => !isNaN(v))\n\t\t\t\t.sum();\n\t\t\treturn {\n\t\t\t\tdate,\n\t\t\t\tvalue: isNaN(value) ? 0 : value,\n\t\t\t\tcount,\n\t\t\t\tfullCount,\n\t\t\t\tscore: count / fullCount\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => row.date.toDate());\n\treturn new Timeseries(ts);\n}\nTimeseries.prototype.monthlyWithQual = monthlyWithQual;\n\nfunction threeYearAverage(date, series = \"value\", defaultValue) {\n\tdate = dayjs(date);\n\tif (!defaultValue)\n\t\tdefaultValue = this.getSeries(series)\n\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t.average();\n\n\t// let months = df\n\t// \t.before(date.valueOf())\n\t// \t.where(row => dayjs(row.date).month() === date.month())\n\t// \t.where(row => row.score > 0.9)\n\t// \t.tail(3);\n\tlet months = this.before(date.toDate())\n\t\t.where(row => row.date.month() === date.month())\n\t\t.orderBy(row => dayjs(row.date))\n\t\t.tail(3);\n\t// .where(row => row.score > 0.9);\n\tif (months.count() > 0) {\n\t\tlet val = months\n\t\t\t.getSeries(series)\n\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t.average();\n\t\treturn val;\n\t} else {\n\t\treturn defaultValue;\n\t}\n}\nTimeseries.prototype.threeYearAverage = threeYearAverage;\n\nfunction averageFill() {\n\tlet df = this;\n\tlet avg = df\n\t\t// .where(row => row.score ?row.score >= 0.9)\n\t\t.getSeries(\"value\")\n\t\t.where(v => !isNaN(v) && v !== null)\n\t\t.average();\n\tlet monthlyAvg = df\n\t\t.generateSeries({\n\t\t\trollingAverage: row => df.threeYearAverage(row.date, \"value\", avg)\n\t\t})\n\t\t.generateSeries({\n\t\t\tflag: row => (row.value ? row.flag : [\"filled\", ...(row.flag || [])])\n\t\t})\n\t\t.generateSeries({\n\t\t\tvalue: row => (row.value ? row.value : row.rollingAverage)\n\t\t})\n\t\t.dropSeries([\"rollingAverage\"]);\n\treturn new Timeseries(monthlyAvg);\n}\n\nTimeseries.prototype.averageFill = averageFill;\n\n// Static Methods\nfunction blank(startDate, endDate, [duration, value = 1], flag) {\n\tif ([\"minute\", \"hour\", \"day\", \"month\", \"year\"].indexOf(duration) < 0) {\n\t\tconsole.error(interval);\n\t\tthrow new Error(\"interval type not supported\");\n\t}\n\tstartDate = dayjs(startDate);\n\tendDate = dayjs(endDate);\n\tlet dates = [startDate];\n\tlet interval = intervalToMS([duration, value]);\n\twhile (dates[dates.length - 1].valueOf() < endDate.valueOf()) {\n\t\tdates.push(dayjs(dates[dates.length - 1]).add(value, duration));\n\t}\n\tlet df = new Timeseries(dates.map(date => ({ date })));\n\n\tif (flag) {\n\t\tdf = new Timeseries(\n\t\t\tdf.generateSeries({\n\t\t\t\tflag: row => [flag]\n\t\t\t})\n\t\t);\n\t}\n\n\treturn df;\n}\nTimeseries.blank = blank;\nfunction aggregate(dataframes) {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df => new Timeseries(df));\n\tconst valueColumns = new Set(\n\t\tdataframes.map(df => df.getValueColumns()).reduce((a, b) => a.concat(b), [])\n\t);\n\tconst concatenated = dataForge.DataFrame.concat(dataframes)\n\t\t.groupBy(row => row.date)\n\t\t.select(group => {\n\t\t\tconst date = group.first().date;\n\t\t\tlet o = { date };\n\t\t\tvalueColumns.forEach(c => (o[c] = group.deflate(row => row[c]).sum()));\n\t\t\tgroup\n\t\t\t\t.getColumnNames()\n\t\t\t\t.filter(col => col !== \"date\")\n\t\t\t\t.filter(col => valueColumns.has(col) === -1)\n\t\t\t\t.forEach(col => {\n\t\t\t\t\tlet value = group\n\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t.distinct()\n\t\t\t\t\t\t.toArray();\n\t\t\t\t\tif (value.length === 1) value = value[0];\n\t\t\t\t\to[col] = value;\n\t\t\t\t\treturn;\n\t\t\t\t});\n\t\t\treturn o;\n\t\t})\n\t\t.inflate();\n\treturn new Timeseries(concatenated);\n}\n\nTimeseries.aggregate = aggregate;\nTimeseries.concat = dataframes => {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df =>\n\t\tnew Timeseries(df).withIndex(row => row.date.valueOf())\n\t);\n\tlet df = dataForge.DataFrame.concat(dataframes);\n\treturn new Timeseries(df);\n};\nTimeseries.merge = dataframes => {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df =>\n\t\tnew Timeseries(df).withIndex(row => row.date.valueOf())\n\t);\n\tlet df = dataForge.DataFrame.merge(dataframes);\n\treturn new Timeseries(df);\n};\n"],"names":["intervalToMS","unit","value","start","dayjs","add","diff","valueFiller","fillType","startValue","endValue","entryIndex","numEntries","overrideValue","dateFunction","date","flag","indexOf","Error","fromPairs","toPairs","map","key","val","averageMonthlyMap","df","Map","group","select","month","first","getSeries","where","v","average","toArray","annualMonthlyAverageMap","groupBy","row","year","startOf","ts","Timeseries","downsample","avg","set","monthlyRollingAverageMap","years","series","aggregator","months","toDate","inflate","withIndex","bake","data","values","rollingWindow","window","last","has","forEach","before","count","fillMonthlyByMap","monthMap","get","fillMonthlyBAnnualyMap","annualMonthlyMap","mean","m","reduce","a","b","concat","pad","validOnly","annualAverage","subset","after","subtract","r","hour","minute","appendPair","rval","deflate","x","std","sampleStandardDeviation","_mean","ndf","generateSeries","ares","R","DataFrame","Math","abs","max","lambdaTest","n","i","alpha","p","pValue","t","degreeOfFreedom","Studentt","inv","tValue","lambda","sqrt","pow","modz","mad","median","modifiedZScoreTest","_median","medianAbsoluteDeviation","outliers","sort","filter","thresholds","upper","min","Infinity","lower","calculateChange","baseline","options","dataForge","config","others","valueOf","index","considerAllRows","call","this","removeOutliers","outlierCheck","raw","transformSeries","[object Object]","merge","totalRows","colname","baselinePercentChange","baselineDF","dfwb","indexer","interval","getInterval","baselineInterval","isEqual","console","error","indexedBaseline","at","getBaselineValue","delta","prototype","Object","create","constructor","getValueColumns","detectTypes","Type","distinct","Column","ms","end","getIndex","detectValues","orderBy","Frequency","Value","ceil","getDateRange","adjustment","endOf","cvrsme","actual","simulated","resetIndex","dropSeries","log","head","toString","ybar","sum","nmbe","calculateStatistics","column","filterZeros","filterNegative","isNaN","q1","quantile","q3","iqr","calculateThresholdOptions","k","noflags","Array","isArray","length","floor","esd","dataset","newdf","dataframe","trip","pair","assign","push","outlierValues","outlier","takeWhile","iterations","rosnerTest","box","lowerInner","upperInner","lowerOuter","upperOuter","getBestThreshold","thresholdGroups","ckmeans","betweenDates","between","transformAllSeries","adjustmentFunction","exclude","columns","col","reset","withSeries","clean","duration","dateComparison","valueColumns","getColumnNames","upsample","fillGaps","durationValue","pairA","pairB","startDate","gapExists","endDate","newEntries","e","gapFill","populate","type","reduceToValue","columnNames","chooseValue","cumulativeSum","s","totalRow","totalColumns","rollingPercentChange","decimal","percentChange","addBaselineDelta","annualIntensity","normalizeValue","scaler","annualScale","renameSeries","fillMissing","blank","undefined","fillNull","callback","seriesCheck","currentValue","zeroFaultDetection","thresholdInterval","zeroFaultDates","ensureSeries","amountChange","dataQuality","withFlags","percent","good","orderByDescending","monthlyWithQual","fullCount","Date","getFullYear","getMonth","getDate","score","threeYearAverage","defaultValue","tail","averageFill","rollingAverage","dates","aggregate","dataframes","Set","o","c"],"mappings":"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"}
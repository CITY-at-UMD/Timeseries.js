{"version":3,"file":"index.modern.js","sources":["../src/lib/Timeseries.interval.js","../src/lib/Timeseries.fill.js","../src/lib/Timeseries.statistics.js","../src/lib/misc.js","../src/index.js","../src/lib/Timeseries.zero.js"],"sourcesContent":["import dayjs from \"dayjs\";\n\nconst msToInterval = ms => {\n\tlet start = dayjs();\n\tlet end = dayjs().add(ms);\n\tif (end.diff(start, \"month\", true) >= 11) {\n\t\treturn [\"year\", Math.ceil(end.diff(start, \"year\", true))];\n\t} else if (end.diff(start, \"day\", true) >= 28) {\n\t\treturn [\"month\", Math.ceil(end.diff(start, \"month\", true))];\n\t} else if (end.diff(start, \"hour\", true) >= 23) {\n\t\treturn [\"day\", Math.ceil(end.diff(start, \"day\", true))];\n\t} else if (end.diff(start, \"minute\", true) >= 55) {\n\t\treturn [\"hour\", Math.ceil(end.diff(start, \"hour\", true))];\n\t} else {\n\t\treturn [\"minute\", end.diff(start, \"minute\")];\n\t}\n};\nconst intervalToMS = ([unit, value]) => {\n\tlet start = dayjs();\n\tlet end = dayjs().add(value, unit);\n\treturn end.diff(start);\n};\nfunction calculateInterval(df, startDate, endDate) {\n\tif (!startDate) startDate = df.first.date;\n\tif (!endDate) endDate = df.last.date;\n\tfunction computeInterval(window) {\n\t\treturn window.last() - window.first();\n\t}\n\tconst intervals = df\n\t\t.between(startDate, endDate)\n\t\t.getIndex()\n\t\t.window(2)\n\t\t.select(computeInterval)\n\t\t.detectValues()\n\t\t.orderBy(row => row.Frequency);\n\n\tlet val = intervals.last().Value;\n\treturn msToInterval(val);\n}\nexport { msToInterval, intervalToMS, calculateInterval };\n","import dayjs from \"dayjs\";\nimport fromPairs from \"lodash/fromPairs\";\nimport toPairs from \"lodash/toPairs\";\nconst gapExists = ([duration, durationValue = 1]) => (pairA, pairB) => {\n\tconst startDate = pairA[0];\n\tconst endDate = pairB[0];\n\tlet gapSize = Math.floor(\n\t\tdayjs(endDate).diff(startDate, duration, true) / durationValue\n\t);\n\n\tif (gapSize > 0) return true;\n\treturn false;\n};\nconst gapExists_old = (interval, maxGap) => (pairA, pairB) => {\n\tconst startDate = pairA[0];\n\tconst endDate = pairB[0];\n\tlet gapSize;\n\tif (interval === \"quarterHour\") {\n\t\tgapSize = Math.floor(dayjs(endDate).diff(startDate, \"minutes\") / 15);\n\t} else {\n\t\tgapSize = dayjs(endDate).diff(startDate, interval);\n\t}\n\tif (maxGap && maxGap > gapSize) return false;\n\tif (gapSize > 0) return true;\n\treturn false;\n};\n\nconst gapFillNull = ([duration, durationValue], flag) => (pairA, pairB) => {\n\tconst startDate = pairA[0];\n\tconst endDate = pairB[0];\n\tlet gapSize = Math.floor(\n\t\tdayjs(endDate).diff(startDate, duration) / durationValue\n\t);\n\tconst numEntries = gapSize - 1;\n\tconst newEntries = [];\n\n\tfor (let entryIndex = 0; entryIndex < numEntries; ++entryIndex) {\n\t\tlet date = dayjs(startDate).add((entryIndex + 1) * durationValue, duration);\n\t\tnewEntries.push([\n\t\t\tdate.valueOf(),\n\t\t\t{ date, value: undefined, ...(flag && { flag: [flag] }) }\n\t\t]);\n\t}\n\treturn newEntries;\n};\nconst gapFillBlank = gapFillNull;\n\nconst valueFiller = (\n\tfillType,\n\t{ startValue, endValue, entryIndex, numEntries },\n\t{ overrideValue, dateFunction, date, flag }\n) => {\n\tif (\n\t\t[\"pad\", \"interpolate\", \"average\", \"dateFunction\", \"value\"].indexOf(\n\t\t\tfillType\n\t\t) === -1\n\t) {\n\t\tthrow new Error(\"fill Type not supported\");\n\t}\n\tlet value;\n\tif (fillType === \"pad\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\treturn [key, startValue[key]];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", \"pad\"];\n\t} else if (fillType === \"interpolate\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv =\n\t\t\t\t\tstartValue[key] +\n\t\t\t\t\t(entryIndex + 1) *\n\t\t\t\t\t\t((endValue[key] - startValue[key]) / (numEntries + 1));\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"average\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv = (startValue[key] + endValue[key]) / numEntries;\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"dateFunction\" && dateFunction) {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv = dateFunction(date);\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"value\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv;\n\t\t\t\tif (typeof overrideValue === \"number\") {\n\t\t\t\t\tnv = overrideValue;\n\t\t\t\t} else {\n\t\t\t\t\tnv = overrideValue[key];\n\t\t\t\t}\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\treturn [key, null];\n\t\t\t})\n\t\t);\n\t\tflag = [\"fill\"];\n\t}\n\treturn { ...value, flag };\n};\n\nconst gapFill = (\n\tfillType,\n\t[duration, durationValue],\n\t{ overrideValue, dateFunction, flag } = {}\n) => (pairA, pairB) => {\n\t// Fill values forward.\n\n\tconst startDate = dayjs(pairA[0]);\n\tconst endDate = dayjs(pairB[0]);\n\tlet gapSize = Math.floor(\n\t\tdayjs(endDate).diff(startDate, duration) / durationValue\n\t);\n\tconst numEntries = gapSize - 1;\n\tconst startValue = pairA[1];\n\tconst endValue = pairB[1];\n\tconst newEntries = [];\n\tfor (let entryIndex = 0; entryIndex < numEntries; ++entryIndex) {\n\t\tlet adjustment = valueFiller(\n\t\t\t\tfillType,\n\t\t\t\t{ startValue, endValue, entryIndex, numEntries },\n\t\t\t\t{\n\t\t\t\t\toverrideValue,\n\t\t\t\t\tdateFunction,\n\t\t\t\t\tflag\n\t\t\t\t}\n\t\t\t),\n\t\t\tdate = dayjs(startDate)\n\t\t\t\t.add((entryIndex + 1) * durationValue, duration)\n\t\t\t\t.toDate();\n\t\tlet e = [date.valueOf(), Object.assign({}, adjustment, { date })];\n\t\tnewEntries.push(e);\n\t}\n\n\treturn newEntries;\n};\n\nexport { gapExists, gapFill, gapFillBlank, gapFillNull, valueFiller };\n","// Source: https://www.itl.nist.gov/div898/handbook/eda/section3/eda35h3.htm\n// https://vsp.pnnl.gov/help/Vsample/Rosners_Outlier_Test.htm\n// https://www.itl.nist.gov/div898/handbook/prc/section1/prc16.htm\n// https://www.math.ucla.edu/~tom/distributions/KolSmir2.html?\nimport { DataFrame } from \"data-forge\";\nimport {\n  sampleStandardDeviation,\n  mean as _mean,\n  max,\n  median as _median,\n  medianAbsoluteDeviation,\n  quantile\n} from \"simple-statistics\";\nimport { Studentt } from \"distributions\";\nimport dayjs from \"dayjs\";\n\nfunction rval(df) {\n  let values = df.deflate(row => row.x).toArray();\n  let std = sampleStandardDeviation(values);\n  let mean = _mean(values);\n  if (std === 0) {\n    let ndf = df.generateSeries({ ares: row => 0 });\n    return { R: 0, std, mean, df: ndf };\n  }\n  let ndf = new DataFrame({\n    values: values.map(x => ({\n      x,\n      ares: Math.abs(x - mean) / std\n    }))\n  });\n  let R = max(ndf.deflate(row => row.ares).toArray());\n  return { R, df: ndf, std, mean };\n}\n\nfunction pValue(n, i, alpha) {\n  let p = 1 - alpha / (2 * (n - i + 1));\n  return p;\n}\nfunction tValue(p, degreeOfFreedom) {\n  let qt = new Studentt(degreeOfFreedom);\n  let t = qt.inv(p);\n  return t;\n}\n//\nfunction lambdaTest(n, i, alpha) {\n  let p = pValue(n, i, alpha);\n  let df = n - i - 1;\n  let t = tValue(p, df);\n  let lambda =\n    (t * (n - i)) /\n    Math.sqrt((n - i - 1 + Math.pow(t, 2)) * (n - i + 1));\n  return { lambda, p, t };\n}\nfunction rosnerTest(dataset = [], k = 10, alpha = 0.05) {\n  let dataframe = new DataFrame({\n    values: dataset.map(x => ({ x }))\n  });\n  let n = dataframe.getSeries(\"x\").count();\n  let newdf;\n  let i = 1;\n  let outliers = [];\n  let trip = false;\n  while (i <= k) {\n    let pair = {};\n    let s = Date.now();\n    if (i === 1) {\n      let { R, df, mean, std } = rval(dataframe);\n      newdf = df.where(row => row.ares !== R);\n      pair = Object.assign({}, pair, {\n        mean,\n        std,\n        Value: df\n          .where(row => row.ares === R)\n          .getSeries(\"x\")\n          .first(),\n        R\n      });\n    } else {\n      let { R, df, mean, std } = rval(newdf);\n      newdf = df.where(row => row.ares !== R);\n      pair = Object.assign({}, pair, {\n        mean,\n        std,\n        Value: df\n          .where(row => row.ares === R)\n          .getSeries(\"x\")\n          .first(),\n        R\n      });\n    }\n    let { lambda, p, t } = lambdaTest(n, i, alpha);\n    pair = Object.assign({}, pair, { lambda });\n    outliers.push(pair);\n    if (trip && pair.R > pair.lambda) trip = false;\n    if (pair.R === 0) break;\n    if (pair.R < pair.lambda) {\n      if (trip) {\n        break;\n      } else {\n        trip = true;\n      }\n    }\n    i++;\n  }\n  outliers = new DataFrame(outliers)\n    .generateSeries({\n      outlier: row => row.R > row.lambda\n    })\n    .takeWhile(row => row.outlier);\n  let outlierValues = outliers\n    .where(row => row.Value > 0)\n    .deflate(row => row.Value);\n  let thresholds = {\n    lower: 0,\n    upper:\n      outlierValues.count() > 0 ? outlierValues.min() : Infinity\n  };\n  return {\n    outliers,\n    thresholds,\n    iterations: i\n  };\n}\nconst modz = (value, mad, median) => {\n  return (0.6745 * (value - median)) / mad;\n};\nfunction modifiedZScoreTest(values) {\n  let median = _median(values);\n  let mad = medianAbsoluteDeviation(values);\n  values = values\n    .sort((a, b) => b - a)\n    .filter(v => v > 0)\n    .map(v => [v, modz(v, mad, median)]);\n  let outliers = values.filter(\n    ([v, modz]) => Math.abs(modz) >= 3.5\n  );\n  let upper = Math.min(\n    ...[Infinity, ...outliers.map(v => v[0])]\n  );\n  // let score,\n  // \tvalue,\n  // \tthreshold = Infinity,\n  // \tindex = 0;\n  // do {\n  // \tvalue = values[index];\n  // \tscore = modz(value, mad, median);\n  // \tif (Math.abs(score) >= 3.5) threshold = value;\n  // } while (score >= 3.5);\n  return { thresholds: { upper, lower: 0 } };\n}\nfunction boxPlotTest(values) {\n  let q1 = quantile(values, 0.25);\n  let q3 = quantile(values, 0.75);\n  let iqr = q3 - q1;\n  return {\n    thresholds: {\n      lowerInner: q1 - 1.5 * iqr,\n      upperInner: q1 - 3 * iqr,\n      lowerOuter: q3 + 1.5 * iqr,\n      upperOuter: q3 + 3 * iqr\n    }\n  };\n}\nfunction calculateOutlierThresholds(\n  df,\n  { k, filterZeros = true } = {}\n) {\n  let values = df\n    .where(\n      row =>\n        row.flag === null ||\n        row.flag === undefined ||\n        Array.isArray(row.flag)\n    )\n    .where(row => !isNaN(row.value) && row.value !== null)\n    .getSeries(\"value\")\n    .bake();\n  if (filterZeros) values = values.where(value => value > 0);\n  if (!k) {\n    k =\n      values.count() < 1000\n        ? Math.floor(values.count() * 0.15)\n        : Math.min(...[1000, Math.floor(values.count() * 0.02)]);\n  }\n  if (values.count < 5) return {};\n  let { outliers, threshold } = rosnerTest(values.toArray(), k);\n  return { outliers, threshold };\n}\n\nfunction zeroCheck(df, threshold = 2) {\n  let zeroGroups = df\n    .variableWindow((a, b) => {\n      return a.value === b.value && a.value === 0;\n    })\n    .where(window => window.getIndex().count() >= threshold);\n  let zeroSummary = zeroGroups\n    .select(window => ({\n      start: window.first().date,\n      end: window.last().date,\n      count: window.count()\n    }))\n    .inflate(); // Series -> dataframe.\n  // .toArray()\n  return { zeroSummary, zeroGroups };\n}\n\nfunction zeroReplacement(df, threshold) {\n  let { zeroGroups } = zeroCheck(df, threshold);\n  zeroGroups.forEach(dff => {\n    dff = dff.transformSeries({\n      value: value => null,\n      flag: value => [\"zero\"]\n    });\n    df = DataFrame.merge([df, dff]);\n  });\n  return df;\n}\nfunction isOutlier(value, { lower, upper }) {\n  if (value < lower || value >= upper) {\n    return true;\n  }\n  return false;\n}\nfunction validMean(df) {\n  let values = df\n    .getSeries(\"value\")\n    .where(value => typeof value === \"number\");\n  return values.average();\n}\nfunction validMonthlyMeanMap(df) {\n  let dateComparison = row =>\n    dayjs(row.date)\n      .startOf(\"month\")\n      .month();\n\n  df = df\n    .where(row => typeof row.value === \"number\")\n    .groupBy(dateComparison)\n    .select(group => ({\n      month: new Date(group.first().date).getMonth(),\n      value: group.deflate(row => row.value).average()\n    }));\n  return new Map(\n    df.toArray().map(({ month, value }) => [month, value])\n  );\n}\n\nfunction quality(df) {\n  let count = df.getIndex().count();\n  let valid = df\n    .getSeries(\"flag\")\n    .where(\n      value =>\n        value === null ||\n        (Array.isArray(value) && value.length === 0)\n    )\n    .count();\n  let missing = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"missing\") !== -1)\n    .count();\n  let dirty = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"clean\") !== -1)\n    .count();\n  let zerod = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"zero\") !== -1)\n    .count();\n  let breakdown = {\n    valid: valid / count,\n    missing: missing / count,\n    invalid: (dirty + zerod) / count\n  };\n  let report = {\n    accuracy: (1 - dirty / count) * 4,\n    completeness: 4 * breakdown.valid,\n    consistency: 4 * ((count - missing - zerod) / count)\n  };\n  return { breakdown, report, count };\n}\n\nexport {\n  rosnerTest,\n  modifiedZScoreTest,\n  boxPlotTest,\n  calculateOutlierThresholds,\n  zeroReplacement,\n  isOutlier,\n  validMean,\n  validMonthlyMeanMap,\n  quality\n};\n","import dayjs from \"dayjs\";\nexport const annualScale = (start, end) =>\n\t365 / dayjs(end).diff(dayjs(start), \"day\");\nexport const calculateChange = (baseline, value) =>\n\t(value - baseline) / baseline;\n","import dayjs from \"dayjs\";\nimport dataForge from \"data-forge\";\nimport { msToInterval, intervalToMS } from \"./lib/Timeseries.interval\";\nimport isEqual from \"lodash/isEqual\";\nimport has from \"lodash/has\";\nimport fromPairs from \"lodash/fromPairs\";\nimport { gapExists, gapFill, gapFillBlank } from \"./lib/Timeseries.fill\";\nimport { medianAbsoluteDeviation, quantile } from \"simple-statistics\";\nimport {\n\trosnerTest,\n\tboxPlotTest,\n\tmodifiedZScoreTest\n} from \"./lib/Timeseries.statistics\";\nimport { annualScale, calculateChange } from \"./lib/misc\";\nimport { zeroCheck } from \"./lib/Timeseries.zero\";\nimport { timingSafeEqual } from \"crypto\";\n\nexport default Timeseries;\n\nfunction Timeseries(data, options = {}) {\n\tconst { msIndex } = options;\n\tif (data instanceof Timeseries) {\n\t\treturn data;\n\t}\n\tif (data instanceof dataForge.DataFrame) {\n\t\tdata = data.toArray();\n\t}\n\n\tdata = data\n\t\t.map(({ date, ...others }) => ({ date: dayjs(date), ...others }))\n\t\t.sort((a, b) => a.date.valueOf() - b.date.valueOf());\n\tlet config = {\n\t\t// columns: ['date', 'value', 'raw', 'flag'],\n\t\tvalues: data,\n\t\tindex: data.map(({ date }) => date.toDate()),\n\t\tconsiderAllRows: true\n\t};\n\tdataForge.DataFrame.call(this, config);\n}\n\nTimeseries.prototype = Object.create(dataForge.DataFrame.prototype);\nTimeseries.prototype.constructor = Timeseries;\n\n// Getters\nfunction getValueColumns() {\n\treturn this.detectTypes()\n\t\t.where(row => row.Type === \"number\")\n\t\t.distinct(row => row.Column)\n\t\t.getSeries(\"Column\")\n\t\t.toArray();\n}\nfunction interval() {\n\tconst computeInterval = window => window.last() - window.first();\n\tconst intervals = this.getIndex()\n\t\t.window(2)\n\t\t.select(computeInterval)\n\t\t.detectValues()\n\t\t.orderBy(row => -row.Frequency);\n\t// .orderBy(row => row.Value);\n\n\tlet val = intervals.first().Value;\n\n\treturn msToInterval(val);\n}\n\nfunction dateRange(unit, adjustment) {\n\tlet start = dayjs(this.first().date),\n\t\tend = dayjs(this.last().date);\n\tif (adjustment) {\n\t\tstart = start.startOf(adjustment);\n\t\tend = end.endOf(adjustment);\n\t}\n\treturn end.diff(start, unit);\n}\nTimeseries.prototype.getValueColumns = getValueColumns;\nTimeseries.prototype.getInterval = interval;\nTimeseries.prototype.getDateRange = dateRange;\n\n// Methods\nfunction calculateThresholdOptions({\n\tk,\n\tfilterZeros = true,\n\tfilterNegative = true\n} = {}) {\n\tlet noflags = this.where(\n\t\trow =>\n\t\t\trow.flag === null ||\n\t\t\trow.flag === undefined ||\n\t\t\t(Array.isArray(row.flag) && row.flag.length === 0)\n\t)\n\t\t.where(row => !isNaN(row.value) && row.value !== null)\n\t\t.getSeries(\"value\");\n\tif (filterZeros) noflags = noflags.where(value => value !== 0);\n\tif (filterNegative) noflags = noflags.where(value => value > 0);\n\tif (!k) {\n\t\tk =\n\t\t\tnoflags.count() < 1000\n\t\t\t\t? Math.floor(noflags.count() * 0.15)\n\t\t\t\t: Math.min(...[1000, Math.floor(noflags.count() * 0.02)]);\n\t}\n\tif (noflags.count() < 5) return {};\n\tlet { thresholds: esd } = rosnerTest(noflags.toArray(), k);\n\tlet { thresholds: box } = boxPlotTest(noflags.toArray());\n\tlet { thresholds: modz } = modifiedZScoreTest(noflags.toArray());\n\treturn { esd, box, modz };\n}\nfunction calculateStatistics(options = {}) {\n\tconst {\n\t\tcolumn = \"value\",\n\t\tfilterZeros = false,\n\t\tfilterNegative = true\n\t} = options;\n\tlet series = this.deflate(row => row[column]).where(value => !isNaN(value));\n\tif (filterNegative) series = series.where(value => value >= 0);\n\tif (filterZeros) series = series.where(value => value !== 0);\n\tlet median = series.median();\n\tlet mean = series.average();\n\tlet count = series.count();\n\tlet std = series.std();\n\tlet min = series.min();\n\tlet max = series.max();\n\tlet mad = medianAbsoluteDeviation(series.toArray());\n\tlet q1 = quantile(series.toArray(), 0.25);\n\tlet q3 = quantile(series.toArray(), 0.75);\n\tlet iqr = q3 - q1;\n\tlet stats = {\n\t\tmedian,\n\t\tmean,\n\t\tcount,\n\t\tstd,\n\t\tmin,\n\t\tmax,\n\t\tmad,\n\t\tq1,\n\t\tq3,\n\t\tiqr\n\t};\n\treturn stats;\n}\n\nTimeseries.prototype.calculateStatistics = calculateStatistics;\nTimeseries.prototype.calculateThresholdOptions = calculateThresholdOptions;\n\n// Chainable Methods\nfunction transformAllSeries(adjustmentFunction, { exclude }) {\n\tlet df = this;\n\tlet columns = (columns = df\n\t\t.detectTypes()\n\t\t.where(row => row.Type === \"number\")\n\t\t.distinct(row => row.Column)\n\t\t.getSeries(\"Column\")\n\t\t.toArray());\n\tif (exclude && Array.isArray(exclude)) {\n\t\tcolumns = columns.filter(col => exclude.indexOf(col) === -1);\n\t}\n\tcolumns.forEach(col => {\n\t\tdf = df.transformSeries({\n\t\t\t[col]: value => {\n\t\t\t\tif (isNaN(value)) {\n\t\t\t\t\treturn value;\n\t\t\t\t} else {\n\t\t\t\t\treturn adjustmentFunction(value);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\treturn df;\n}\n\nTimeseries.prototype.transformAllSeries = transformAllSeries;\n\nfunction reset() {\n\tlet df = this.withSeries({\n\t\tvalue: row =>\n\t\t\trow.flag && Array.isArray(row.flag) && row.flag.length > 0\n\t\t\t\t? row.raw\n\t\t\t\t: row.value\n\t})\n\t\t.subset([\"date\", \"value\"])\n\t\t.where(row => !isNaN(row.value) && row.value !== null);\n\treturn new Timeseries(df);\n}\nTimeseries.prototype.reset = reset;\n\nfunction group(interval, toArray) {\n\tif ([\"hour\", \"day\", \"month\", \"year\"].indexOf(interval) === -1)\n\t\tthrow new Error(\"interval type not supported\");\n\tlet dateComparison = row => dayjs(row.date).startOf(interval);\n\tlet groups = this.groupBy(dateComparison);\n\treturn groups;\n}\n\nTimeseries.prototype.group = group;\n\nfunction removeOutliers({\n\tcolumn = \"value\",\n\tlowerThreshold,\n\tupperThreshold\n} = {}) {\n\tif (lowerThreshold > upperThreshold) throw new Error(\"thresholds invalid\");\n\tlet outlierCheck = (value, lowerThreshold, upperThreshold) =>\n\t\tvalue < lowerThreshold || value > upperThreshold;\n\n\tlet outliers = this.where(row =>\n\t\toutlierCheck(row[column], lowerThreshold, upperThreshold)\n\t)\n\t\t.generateSeries({\n\t\t\traw: row => row[column],\n\t\t\tflag: ({ flag = [] }) => [\"outlier\", ...flag]\n\t\t})\n\t\t.transformSeries({\n\t\t\t[column]: row => null\n\t\t});\n\t// let df = this.withSeries(\"raw\", outliers.getSeries(\"raw\")).withSeries(\n\t// \t\"flag\",\n\t// \toutliers.getSeries(\"flag\")\n\t// );\n\n\tlet merged = this.merge(outliers);\n\treturn new Timeseries(merged.toArray());\n}\n\nTimeseries.prototype.removeOutliers = removeOutliers;\nTimeseries.prototype.clean = removeOutliers;\n\nfunction downsample([duration, value], fillType = \"sum\") {\n\tif ([\"hour\", \"day\", \"month\", \"year\"].indexOf(duration) === -1)\n\t\tthrow new Error(\"interval type not supported\");\n\tif ([\"sum\", \"avg\", \"median\"].indexOf(fillType) === -1) {\n\t\tthrow new Error(\"aggregation type not suppported, only:\");\n\t}\n\tlet dateComparison = row => row.date.startOf(duration);\n\tlet valueColumns = this.getValueColumns();\n\tif (value) {\n\t\tdateComparison = row => row.date.startOf(duration).add(value, duration);\n\t}\n\tlet df = this.groupBy(dateComparison)\n\t\t.select(group => {\n\t\t\tconst date = group.first().date.startOf(duration);\n\t\t\treturn {\n\t\t\t\tdate,\n\t\t\t\t...fromPairs([\n\t\t\t\t\t...valueColumns.map(col => {\n\t\t\t\t\t\tlet value;\n\t\t\t\t\t\tswitch (fillType) {\n\t\t\t\t\t\t\tcase \"median\":\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.median();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"avg\":\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.average();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t// sum\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.sum();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn [col, value];\n\t\t\t\t\t}),\n\t\t\t\t\t...group\n\t\t\t\t\t\t.getColumnNames()\n\t\t\t\t\t\t.filter(col => col !== \"date\")\n\t\t\t\t\t\t.filter(col => valueColumns.indexOf(col) === -1)\n\t\t\t\t\t\t.map(col => {\n\t\t\t\t\t\t\tlet value = group\n\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t.distinct()\n\t\t\t\t\t\t\t\t.toArray();\n\t\t\t\t\t\t\tif (value.length === 1) value = value[0];\n\t\t\t\t\t\t\treturn [col, value];\n\t\t\t\t\t\t})\n\t\t\t\t])\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => dayjs(row.date).toDate());\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.downsample = downsample;\n\nfunction upsample([duration, value], fillType = \"avg\") {\n\t// Dont use this b/c it has the raw and flag values\n\tlet df = this.fillGaps(\n\t\tgapExists([duration, value]),\n\t\tgapFill(fillType, [duration, value])\n\t);\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.upsample = upsample;\n\nfunction populate(value, type = \"avg\") {\n\tlet v;\n\tswitch (type) {\n\t\tcase \"fill\":\n\t\t\tv = value;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tv = value / this.count();\n\t\t\tbreak;\n\t}\n\tlet df = this.generateSeries({ value: row => v });\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.populate = populate;\n\nfunction reduceToValue(columnNames) {\n\tfunction chooseValue(row, columnNames = []) {\n\t\tlet values = columnNames.map(n => row[n]).filter(v => v);\n\t\treturn values[0] || 0;\n\t}\n\tlet df = this.generateSeries({\n\t\tvalue: row => chooseValue(row, columnNames)\n\t}).subset([\"date\", \"value\"]);\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.reduceToValue = reduceToValue;\n\n// Baseline Functions\n\nfunction rollingPercentChange(col = \"value\") {\n\tlet df = this;\n\tlet delta = new Timeseries(\n\t\tdf\n\t\t\t.subset([\"date\", col])\n\t\t\t.rollingWindow(2)\n\t\t\t.select(window => {\n\t\t\t\tconst amountChange = window.last()[col] - window.first()[col]; // Compute amount of change.\n\t\t\t\tconst pctChange = amountChange / window.first()[col]; // Compute % change.\n\t\t\t\treturn { date: window.last().date, delta: pctChange };\n\t\t\t})\n\t\t\t.inflate()\n\t);\n\tlet withDelta = Timeseries.merge([df, delta]);\n\treturn new Timeseries(withDelta);\n}\n\nTimeseries.prototype.rollingPercentChange = rollingPercentChange;\nfunction baselinePercentChange(baselineDF) {\n\t// Only Change in Year\n\tif (!(baselineDF instanceof Timeseries))\n\t\tbaselineDF = new Timeseries(baselineDF);\n\tlet dfwb;\n\tif (baselineDF.count() > 1) {\n\t\tlet interval = this.getInterval();\n\t\tlet baselineInterval = baselineDF.interval;\n\t\tif (!isEqual(interval, baselineInterval)) {\n\t\t\tconsole.error(interval, baselineInterval);\n\t\t\tthrow new Error(\"baseline and data intervals do not match\");\n\t\t}\n\t\tlet indexer;\n\t\tswitch (interval[0]) {\n\t\t\tcase \"day\":\n\t\t\t\tindexer = date => `${date.month()}-${date.date()}`;\n\t\t\t\tbreak;\n\t\t\tcase \"month\":\n\t\t\t\tindexer = date => date.month();\n\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tindexer = date => 0;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tlet indexedBaseline = baselineDF.withIndex(row => indexer(row.date));\n\t\tlet getBaselineValue = index => {\n\t\t\tlet at = indexedBaseline.at(index);\n\t\t\tif (at && has(at, \"value\")) {\n\t\t\t\treturn at.value;\n\t\t\t} else {\n\t\t\t\treturn indexedBaseline.getSeries(\"value\").average();\n\t\t\t}\n\t\t};\n\t\tdfwb = this.generateSeries({\n\t\t\tbaseline: row => getBaselineValue(indexer(row.date))\n\t\t});\n\t} else {\n\t\tdfwb = this.generateSeries({\n\t\t\tbaseline: row => baselineDF.first().value\n\t\t});\n\t}\n\tdfwb = dfwb.generateSeries({\n\t\tdelta: row => calculateChange(row.baseline, row.value)\n\t});\n\treturn new Timeseries(dfwb);\n}\n\nTimeseries.prototype.baselinePercentChange = baselinePercentChange;\nTimeseries.prototype.addBaselineDelta = baselinePercentChange;\n\nfunction annualIntensity(normalizeValue = 1) {\n\tlet interval = this.getInterval();\n\tlet annual = this.groupBy(row => row.date.year())\n\t\t.select(group => {\n\t\t\tlet startDate = group.first().date;\n\t\t\tlet endDate = group\n\t\t\t\t.last()\n\t\t\t\t.date.add(interval[1] || 1, interval[0] || \"month\");\n\t\t\tlet scaler = annualScale(startDate, endDate);\n\t\t\treturn {\n\t\t\t\tstartDate,\n\t\t\t\tendDate,\n\t\t\t\t...fromPairs(\n\t\t\t\t\tthis.getValueColumns().map(col => [\n\t\t\t\t\t\tcol,\n\t\t\t\t\t\t(group\n\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t.where(v => v)\n\t\t\t\t\t\t\t.sum() *\n\t\t\t\t\t\t\tscaler) /\n\t\t\t\t\t\t\tnormalizeValue\n\t\t\t\t\t])\n\t\t\t\t)\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.renameSeries({ startDate: \"date\" })\n\t\t.dropSeries(\"endDate\");\n\treturn new Timeseries(annual);\n}\n\nTimeseries.prototype.annualIntensity = annualIntensity;\n\n// Fill Functions\n\nfunction fillMissing() {\n\tlet startDate = this.first().date.toDate(),\n\t\tendDate = this.last().date.toDate();\n\tlet interval = this.getInterval();\n\tlet bdf = Timeseries.blank(startDate, endDate, interval, \"missing\").withIndex(\n\t\trow => row.date.valueOf()\n\t);\n\tlet m = this.withIndex(row => row.date.valueOf()).merge(bdf);\n\tm = m.transformSeries({\n\t\tflag: row => (row.value ? undefined : row.flag)\n\t});\n\tm = new Timeseries(m);\n\treturn m;\n}\nTimeseries.prototype.fillMissing = fillMissing;\nfunction fillNull(v) {\n\tlet df = this.transformSeries({\n\t\tvalue: value => (value === null || value === undefined ? v : value)\n\t});\n\treturn new Timeseries(df);\n}\nTimeseries.prototype.fillNull = fillNull;\n\nfunction zeroReplacement(threshold) {\n\tlet df = this;\n\tlet { zeroGroups } = zeroCheck(df, threshold);\n\tlet dfs = zeroGroups.toArray().map((zdf, i) => {\n\t\tzdf = zdf\n\t\t\t.transformSeries({\n\t\t\t\tvalue: () => null,\n\t\t\t\traw: () => 0,\n\t\t\t\tflag: value => [\"zero\", ...(value || [])]\n\t\t\t})\n\t\t\t.withIndex(row => new Date(row.date).valueOf());\n\t\treturn zdf;\n\t});\n\tlet merged = df.withIndex(row => row.date.valueOf()).merge(...dfs);\n\treturn new Timeseries(merged);\n}\nTimeseries.prototype.zeroReplacement = zeroReplacement;\n\nfunction monthlyWithQual() {\n\tlet interval = this.getInterval();\n\tlet ms = intervalToMS(interval);\n\tconst duration = \"month\";\n\tlet dateComparison = row =>\n\t\tdayjs(row.date)\n\t\t\t.startOf()\n\t\t\t.valueOf();\n\tlet ts = this.groupBy(dateComparison)\n\t\t.select(group => {\n\t\t\tconst date = dayjs(group.first().date)\n\t\t\t\t.startOf(duration)\n\t\t\t\t.toDate();\n\t\t\tlet fullCount = Math.floor(\n\t\t\t\tdayjs(date)\n\t\t\t\t\t.endOf(\"month\")\n\t\t\t\t\t.diff(dayjs(date), \"millisecond\") / ms\n\t\t\t);\n\t\t\tlet days = new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\n\t\t\tlet count = group\n\t\t\t\t.getSeries(\"value\")\n\t\t\t\t.where(v => v && v !== 0)\n\t\t\t\t.toArray().length;\n\t\t\tlet value = group\n\t\t\t\t.getSeries(\"value\")\n\t\t\t\t.where(v => !isNaN(v))\n\t\t\t\t.sum();\n\t\t\treturn {\n\t\t\t\tdate,\n\t\t\t\tvalue: isNaN(value) ? 0 : value,\n\t\t\t\tcount,\n\t\t\t\tfullCount,\n\t\t\t\tscore: count / fullCount\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => row.date.toDate());\n\treturn new Timeseries(ts);\n}\nTimeseries.prototype.monthlyWithQual = monthlyWithQual;\n\nfunction threeYearAverage(date, column = \"value\", defaultValue) {\n\tdate = dayjs(date);\n\tif (!defaultValue)\n\t\tdefaultValue = this.getSeries(\"value\")\n\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t.average();\n\n\t// let months = df\n\t// \t.before(date.valueOf())\n\t// \t.where(row => dayjs(row.date).month() === date.month())\n\t// \t.where(row => row.score > 0.9)\n\t// \t.tail(3);\n\tlet months = this.before(date.toDate())\n\t\t.where(row => row.date.month() === date.month())\n\t\t.orderBy(row => dayjs(row.date))\n\t\t.tail(3);\n\t// .where(row => row.score > 0.9);\n\tif (months.count() > 0) {\n\t\tlet val = months\n\t\t\t.getSeries(column)\n\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t.average();\n\t\treturn val;\n\t} else {\n\t\treturn defaultValue;\n\t}\n}\nTimeseries.prototype.threeYearAverage = threeYearAverage;\n\nfunction averageFill() {\n\tlet df = this;\n\tlet avg = df\n\t\t// .where(row => row.score ?row.score >= 0.9)\n\t\t.getSeries(\"value\")\n\t\t.where(v => !isNaN(v) && v !== null)\n\t\t.average();\n\tlet monthlyAvg = df\n\t\t.generateSeries({\n\t\t\trollingAverage: row => df.threeYearAverage(row.date, \"value\", avg)\n\t\t})\n\t\t.generateSeries({\n\t\t\tflag: row => (row.value ? row.flag : [\"filled\", ...(row.flag || [])])\n\t\t})\n\t\t.generateSeries({\n\t\t\tvalue: row => (row.value ? row.value : row.rollingAverage)\n\t\t})\n\t\t.dropSeries([\"rollingAverage\"]);\n\treturn new Timeseries(monthlyAvg);\n}\n\nTimeseries.prototype.averageFill = averageFill;\n\n// Static Methods\nfunction blank(startDate, endDate, [duration, value = 1], flag) {\n\tif ([\"minute\", \"hour\", \"day\", \"month\", \"year\"].indexOf(duration) < 0) {\n\t\tconsole.error(interval);\n\t\tthrow new Error(\"interval type not supported\");\n\t}\n\tstartDate = dayjs(startDate);\n\tendDate = dayjs(endDate);\n\tlet dates = [startDate];\n\tlet interval = intervalToMS([duration, value]);\n\twhile (dates[dates.length - 1].valueOf() < endDate.valueOf()) {\n\t\tdates.push(dayjs(dates[dates.length - 1]).add(value, duration));\n\t}\n\tlet df = new Timeseries(dates.map(date => ({ date, ...(flag && { flag }) })));\n\t// if (flag) {\n\t// \tdf = df.generateSeries({\n\t// \t\tflag: row => [flag]\n\t// \t});\n\t// \tdf = new Timeseries(df);\n\t// }\n\treturn df;\n}\nTimeseries.blank = blank;\nfunction aggregate(dataframes) {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df => new Timeseries(df));\n\tconst valueColumns = new Set(\n\t\tdataframes.map(df => df.getValueColumns()).reduce((a, b) => a.concat(b), [])\n\t);\n\tconst concatenated = dataForge.DataFrame.concat(dataframes)\n\t\t.groupBy(row => row.date)\n\t\t.select(group => {\n\t\t\tconst date = group.first().date;\n\t\t\tlet o = { date };\n\t\t\tvalueColumns.forEach(c => (o[c] = group.deflate(row => row[c]).sum()));\n\t\t\tgroup\n\t\t\t\t.getColumnNames()\n\t\t\t\t.filter(col => col !== \"date\")\n\t\t\t\t.filter(col => valueColumns.has(col) === -1)\n\t\t\t\t.forEach(col => {\n\t\t\t\t\tlet value = group\n\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t.distinct()\n\t\t\t\t\t\t.toArray();\n\t\t\t\t\tif (value.length === 1) value = value[0];\n\t\t\t\t\to[col] = value;\n\t\t\t\t\treturn;\n\t\t\t\t});\n\t\t\treturn o;\n\t\t})\n\t\t.inflate();\n\t// .toArray();\n\n\treturn new Timeseries(concatenated);\n}\nTimeseries.aggregate = aggregate;\nTimeseries.concat = dataframes => {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df =>\n\t\tnew Timeseries(df).withIndex(row => row.date.valueOf())\n\t);\n\tlet df = dataForge.DataFrame.concat(dataframes);\n\treturn new Timeseries(df);\n};\nTimeseries.merge = dataframes => {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df =>\n\t\tnew Timeseries(df).withIndex(row => row.date.valueOf())\n\t);\n\tlet df = dataForge.DataFrame.merge(dataframes);\n\treturn new Timeseries(df);\n};\n","import { DataFrame } from \"data-forge\";\n\nconst zerogrouping = dataframe => {\n  // group sequential\n  let df = dataframe.variableWindow(\n    (a, b) => a.value === b.value\n  );\n};\n\nfunction zeroCheck(df, threshold = 2) {\n  let zeroGroups = df\n    .variableWindow((a, b) => {\n      return a.value === b.value && a.value === 0;\n    })\n    .where(window => window.getIndex().count() >= threshold);\n  let zeroSummary = zeroGroups\n    .select(window => ({\n      start: window.first().date,\n      end: window.last().date,\n      count: window.count()\n    }))\n    .inflate(); // Series -> dataframe.\n  // .toArray()\n  return { zeroSummary, zeroGroups };\n}\n\nfunction zeroReplacement(df, threshold) {\n  let { zeroGroups } = zeroCheck(df, threshold);\n  let dfs = zeroGroups.toArray().map(zdf => {\n    zdf = zdf\n      .transformSeries({\n        value: () => null,\n        raw: 0,\n        flag: value => [\"zero\", ...(value || [])]\n      })\n      .withIndex(row => new Date(row.date).valueOf());\n    return zdf;\n  });\n  let merged = DataFrame.merge([df, ...dfs]);\n\n  return merged;\n}\nexport { zerogrouping, zeroReplacement, zeroCheck };\n"],"names":["intervalToMS","unit","value","start","dayjs","add","diff","valueFiller","fillType","startValue","endValue","entryIndex","numEntries","overrideValue","dateFunction","date","flag","indexOf","Error","fromPairs","toPairs","map","key","val","rval","df","values","deflate","row","x","toArray","std","sampleStandardDeviation","mean","_mean","ndf","generateSeries","ares","R","DataFrame","Math","abs","max","lambdaTest","n","i","alpha","p","pValue","t","degreeOfFreedom","Studentt","inv","tValue","lambda","sqrt","pow","modz","mad","median","modifiedZScoreTest","_median","medianAbsoluteDeviation","outliers","sort","a","b","filter","v","thresholds","upper","min","Infinity","lower","calculateChange","baseline","Timeseries","data","options","dataForge","config","others","valueOf","index","toDate","considerAllRows","call","this","removeOutliers","column","lowerThreshold","upperThreshold","where","outlierCheck","raw","transformSeries","[object Object]","merge","baselinePercentChange","baselineDF","dfwb","count","indexer","interval","getInterval","baselineInterval","isEqual","console","error","month","indexedBaseline","withIndex","at","has","getSeries","average","getBaselineValue","first","delta","prototype","Object","create","constructor","getValueColumns","detectTypes","Type","distinct","Column","ms","end","getIndex","window","select","last","detectValues","orderBy","Frequency","Value","ceil","getDateRange","adjustment","startOf","endOf","calculateStatistics","filterZeros","filterNegative","series","isNaN","q1","quantile","q3","iqr","calculateThresholdOptions","k","noflags","Array","isArray","length","floor","esd","dataset","newdf","dataframe","trip","pair","assign","push","outlierValues","outlier","takeWhile","iterations","rosnerTest","box","lowerInner","upperInner","lowerOuter","upperOuter","transformAllSeries","adjustmentFunction","exclude","columns","col","forEach","reset","withSeries","subset","group","groupBy","clean","downsample","duration","dateComparison","valueColumns","sum","getColumnNames","inflate","upsample","fillGaps","durationValue","pairA","pairB","startDate","gapExists","endDate","newEntries","e","gapFill","populate","type","reduceToValue","columnNames","chooseValue","rollingPercentChange","rollingWindow","pctChange","withDelta","addBaselineDelta","annualIntensity","normalizeValue","year","scaler","annualScale","renameSeries","dropSeries","fillMissing","bdf","blank","m","undefined","fillNull","zeroReplacement","threshold","zeroGroups","variableWindow","zeroSummary","zeroCheck","dfs","zdf","Date","monthlyWithQual","fullCount","getFullYear","getMonth","getDate","score","threeYearAverage","defaultValue","months","before","tail","averageFill","avg","rollingAverage","dates","aggregate","dataframes","Set","reduce","concat","o","c"],"mappings":"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"}
{"version":3,"file":"index.modern.js","sources":["../src/lib/Timeseries.interval.js","../src/lib/Timeseries.fill.js","../src/lib/Timeseries.statistics.js","../src/index.js","../src/lib/misc.js","../src/lib/Timeseries.zero.js"],"sourcesContent":["import dayjs from \"dayjs\";\n\nconst msToInterval = ms => {\n\tlet start = dayjs();\n\tlet end = dayjs().add(ms);\n\tif (end.diff(start, \"month\", true) >= 11) {\n\t\treturn [\"year\", Math.ceil(end.diff(start, \"year\", true))];\n\t} else if (end.diff(start, \"day\", true) >= 28) {\n\t\treturn [\"month\", Math.ceil(end.diff(start, \"month\", true))];\n\t} else if (end.diff(start, \"hour\", true) >= 23) {\n\t\treturn [\"day\", Math.ceil(end.diff(start, \"day\", true))];\n\t} else if (end.diff(start, \"minute\", true) >= 55) {\n\t\treturn [\"hour\", Math.ceil(end.diff(start, \"hour\", true))];\n\t} else {\n\t\treturn [\"minute\", end.diff(start, \"minute\")];\n\t}\n};\nconst intervalToMS = ([unit, value]) => {\n\tlet start = dayjs();\n\tlet end = dayjs().add(value, unit);\n\treturn end.diff(start);\n};\nfunction calculateInterval(df, startDate, endDate) {\n\tif (!startDate) startDate = df.first.date;\n\tif (!endDate) endDate = df.last.date;\n\tfunction computeInterval(window) {\n\t\treturn window.last() - window.first();\n\t}\n\tconst intervals = df\n\t\t.between(startDate, endDate)\n\t\t.getIndex()\n\t\t.window(2)\n\t\t.select(computeInterval)\n\t\t.detectValues()\n\t\t.orderBy(row => row.Frequency);\n\n\tlet val = intervals.last().Value;\n\treturn msToInterval(val);\n}\nexport { msToInterval, intervalToMS, calculateInterval };\n","import dayjs from \"dayjs\";\nimport fromPairs from \"lodash/fromPairs\";\nimport toPairs from \"lodash/toPairs\";\nconst gapExists = ([duration, durationValue = 1]) => (pairA, pairB) => {\n\tconst startDate = pairA[0];\n\tconst endDate = pairB[0];\n\tlet gapSize = Math.floor(\n\t\tdayjs(endDate).diff(startDate, duration, true) / durationValue\n\t);\n\n\tif (gapSize > 0) return true;\n\treturn false;\n};\nconst gapExists_old = (interval, maxGap) => (pairA, pairB) => {\n\tconst startDate = pairA[0];\n\tconst endDate = pairB[0];\n\tlet gapSize;\n\tif (interval === \"quarterHour\") {\n\t\tgapSize = Math.floor(dayjs(endDate).diff(startDate, \"minutes\") / 15);\n\t} else {\n\t\tgapSize = dayjs(endDate).diff(startDate, interval);\n\t}\n\tif (maxGap && maxGap > gapSize) return false;\n\tif (gapSize > 0) return true;\n\treturn false;\n};\n\nconst gapFillNull = ([duration, durationValue], flag) => (pairA, pairB) => {\n\tconst startDate = pairA[0];\n\tconst endDate = pairB[0];\n\tlet gapSize = Math.floor(\n\t\tdayjs(endDate).diff(startDate, duration) / durationValue\n\t);\n\tconst numEntries = gapSize - 1;\n\tconst newEntries = [];\n\n\tfor (let entryIndex = 0; entryIndex < numEntries; ++entryIndex) {\n\t\tlet date = dayjs(startDate).add((entryIndex + 1) * durationValue, duration);\n\t\tnewEntries.push([\n\t\t\tdate.valueOf(),\n\t\t\t{ date, value: undefined, ...(flag && { flag: [flag] }) }\n\t\t]);\n\t}\n\treturn newEntries;\n};\nconst gapFillBlank = gapFillNull;\n\nconst valueFiller = (\n\tfillType,\n\t{ startValue, endValue, entryIndex, numEntries },\n\t{ overrideValue, dateFunction, date, flag }\n) => {\n\tif (\n\t\t[\"pad\", \"interpolate\", \"average\", \"dateFunction\", \"value\"].indexOf(\n\t\t\tfillType\n\t\t) === -1\n\t) {\n\t\tthrow new Error(\"fill Type not supported\");\n\t}\n\tlet value;\n\tif (fillType === \"pad\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\treturn [key, startValue[key]];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", \"pad\"];\n\t} else if (fillType === \"interpolate\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv =\n\t\t\t\t\tstartValue[key] +\n\t\t\t\t\t(entryIndex + 1) *\n\t\t\t\t\t\t((endValue[key] - startValue[key]) / (numEntries + 1));\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"average\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv = (startValue[key] + endValue[key]) / numEntries;\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"dateFunction\" && dateFunction) {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv = dateFunction(date);\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"value\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv;\n\t\t\t\tif (typeof overrideValue === \"number\") {\n\t\t\t\t\tnv = overrideValue;\n\t\t\t\t} else {\n\t\t\t\t\tnv = overrideValue[key];\n\t\t\t\t}\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\treturn [key, null];\n\t\t\t})\n\t\t);\n\t\tflag = [\"fill\"];\n\t}\n\treturn { ...value, flag };\n};\n\nconst gapFill = (\n\tfillType,\n\t[duration, durationValue],\n\t{ overrideValue, dateFunction, flag } = {}\n) => (pairA, pairB) => {\n\t// Fill values forward.\n\n\tconst startDate = dayjs(pairA[0]);\n\tconst endDate = dayjs(pairB[0]);\n\tlet gapSize = Math.floor(\n\t\tdayjs(endDate).diff(startDate, duration) / durationValue\n\t);\n\tconst numEntries = gapSize - 1;\n\tconst startValue = pairA[1];\n\tconst endValue = pairB[1];\n\tconst newEntries = [];\n\tfor (let entryIndex = 0; entryIndex < numEntries; ++entryIndex) {\n\t\tlet adjustment = valueFiller(\n\t\t\t\tfillType,\n\t\t\t\t{ startValue, endValue, entryIndex, numEntries },\n\t\t\t\t{\n\t\t\t\t\toverrideValue,\n\t\t\t\t\tdateFunction,\n\t\t\t\t\tflag\n\t\t\t\t}\n\t\t\t),\n\t\t\tdate = dayjs(startDate)\n\t\t\t\t.add((entryIndex + 1) * durationValue, duration)\n\t\t\t\t.toDate();\n\t\tlet e = [date.valueOf(), Object.assign({}, adjustment, { date })];\n\t\tnewEntries.push(e);\n\t}\n\n\treturn newEntries;\n};\n\nexport { gapExists, gapFill, gapFillBlank, gapFillNull, valueFiller };\n","// Source: https://www.itl.nist.gov/div898/handbook/eda/section3/eda35h3.htm\n// https://vsp.pnnl.gov/help/Vsample/Rosners_Outlier_Test.htm\n// https://www.itl.nist.gov/div898/handbook/prc/section1/prc16.htm\n// https://www.math.ucla.edu/~tom/distributions/KolSmir2.html?\nimport { DataFrame } from \"data-forge\";\nimport {\n  sampleStandardDeviation,\n  mean as _mean,\n  max,\n  median as _median,\n  medianAbsoluteDeviation,\n  quantile\n} from \"simple-statistics\";\nimport { Studentt } from \"distributions\";\nimport dayjs from \"dayjs\";\n\nfunction rval(df) {\n  let values = df.deflate(row => row.x).toArray();\n  let std = sampleStandardDeviation(values);\n  let mean = _mean(values);\n  if (std === 0) {\n    let ndf = df.generateSeries({ ares: row => 0 });\n    return { R: 0, std, mean, df: ndf };\n  }\n  let ndf = new DataFrame({\n    values: values.map(x => ({\n      x,\n      ares: Math.abs(x - mean) / std\n    }))\n  });\n  let R = max(ndf.deflate(row => row.ares).toArray());\n  return { R, df: ndf, std, mean };\n}\n\nfunction pValue(n, i, alpha) {\n  let p = 1 - alpha / (2 * (n - i + 1));\n  return p;\n}\nfunction tValue(p, degreeOfFreedom) {\n  let qt = new Studentt(degreeOfFreedom);\n  let t = qt.inv(p);\n  return t;\n}\n//\nfunction lambdaTest(n, i, alpha) {\n  let p = pValue(n, i, alpha);\n  let df = n - i - 1;\n  let t = tValue(p, df);\n  let lambda =\n    (t * (n - i)) /\n    Math.sqrt((n - i - 1 + Math.pow(t, 2)) * (n - i + 1));\n  return { lambda, p, t };\n}\nfunction rosnerTest(dataset = [], k = 10, alpha = 0.05) {\n  let dataframe = new DataFrame({\n    values: dataset.map(x => ({ x }))\n  });\n  let n = dataframe.getSeries(\"x\").count();\n  let newdf;\n  let i = 1;\n  let outliers = [];\n  let trip = false;\n  while (i <= k) {\n    let pair = {};\n    let s = Date.now();\n    if (i === 1) {\n      let { R, df, mean, std } = rval(dataframe);\n      newdf = df.where(row => row.ares !== R);\n      pair = Object.assign({}, pair, {\n        mean,\n        std,\n        Value: df\n          .where(row => row.ares === R)\n          .getSeries(\"x\")\n          .first(),\n        R\n      });\n    } else {\n      let { R, df, mean, std } = rval(newdf);\n      newdf = df.where(row => row.ares !== R);\n      pair = Object.assign({}, pair, {\n        mean,\n        std,\n        Value: df\n          .where(row => row.ares === R)\n          .getSeries(\"x\")\n          .first(),\n        R\n      });\n    }\n    let { lambda, p, t } = lambdaTest(n, i, alpha);\n    pair = Object.assign({}, pair, { lambda });\n    outliers.push(pair);\n    if (trip && pair.R > pair.lambda) trip = false;\n    if (pair.R === 0) break;\n    if (pair.R < pair.lambda) {\n      if (trip) {\n        break;\n      } else {\n        trip = true;\n      }\n    }\n    i++;\n  }\n  outliers = new DataFrame(outliers)\n    .generateSeries({\n      outlier: row => row.R > row.lambda\n    })\n    .takeWhile(row => row.outlier);\n  let outlierValues = outliers\n    .where(row => row.Value > 0)\n    .deflate(row => row.Value);\n  let thresholds = {\n    lower: 0,\n    upper:\n      outlierValues.count() > 0 ? outlierValues.min() : Infinity\n  };\n  return {\n    outliers,\n    thresholds,\n    iterations: i\n  };\n}\nconst modz = (value, mad, median) => {\n  return (0.6745 * (value - median)) / mad;\n};\nfunction modifiedZScoreTest(values) {\n  let median = _median(values);\n  let mad = medianAbsoluteDeviation(values);\n  values = values\n    .sort((a, b) => b - a)\n    .filter(v => v > 0)\n    .map(v => [v, modz(v, mad, median)]);\n  let outliers = values.filter(\n    ([v, modz]) => Math.abs(modz) >= 3.5\n  );\n  let upper = Math.min(\n    ...[Infinity, ...outliers.map(v => v[0])]\n  );\n  // let score,\n  // \tvalue,\n  // \tthreshold = Infinity,\n  // \tindex = 0;\n  // do {\n  // \tvalue = values[index];\n  // \tscore = modz(value, mad, median);\n  // \tif (Math.abs(score) >= 3.5) threshold = value;\n  // } while (score >= 3.5);\n  return { thresholds: { upper, lower: 0 } };\n}\nfunction boxPlotTest(values) {\n  let q1 = quantile(values, 0.25);\n  let q3 = quantile(values, 0.75);\n  let iqr = q3 - q1;\n  return {\n    thresholds: {\n      lowerInner: q1 - 1.5 * iqr,\n      upperInner: q1 - 3 * iqr,\n      lowerOuter: q3 + 1.5 * iqr,\n      upperOuter: q3 + 3 * iqr\n    }\n  };\n}\nfunction calculateOutlierThresholds(\n  df,\n  { k, filterZeros = true } = {}\n) {\n  let values = df\n    .where(\n      row =>\n        row.flag === null ||\n        row.flag === undefined ||\n        Array.isArray(row.flag)\n    )\n    .where(row => !isNaN(row.value) && row.value !== null)\n    .getSeries(\"value\")\n    .bake();\n  if (filterZeros) values = values.where(value => value > 0);\n  if (!k) {\n    k =\n      values.count() < 1000\n        ? Math.floor(values.count() * 0.15)\n        : Math.min(...[1000, Math.floor(values.count() * 0.02)]);\n  }\n  if (values.count < 5) return {};\n  let { outliers, threshold } = rosnerTest(values.toArray(), k);\n  return { outliers, threshold };\n}\n\nfunction zeroCheck(df, threshold = 2) {\n  let zeroGroups = df\n    .variableWindow((a, b) => {\n      return a.value === b.value && a.value === 0;\n    })\n    .where(window => window.getIndex().count() >= threshold);\n  let zeroSummary = zeroGroups\n    .select(window => ({\n      start: window.first().date,\n      end: window.last().date,\n      count: window.count()\n    }))\n    .inflate(); // Series -> dataframe.\n  // .toArray()\n  return { zeroSummary, zeroGroups };\n}\n\nfunction zeroReplacement(df, threshold) {\n  let { zeroGroups } = zeroCheck(df, threshold);\n  zeroGroups.forEach(dff => {\n    dff = dff.transformSeries({\n      value: value => null,\n      flag: value => [\"zero\"]\n    });\n    df = DataFrame.merge([df, dff]);\n  });\n  return df;\n}\nfunction isOutlier(value, { lower, upper }) {\n  if (value < lower || value >= upper) {\n    return true;\n  }\n  return false;\n}\nfunction validMean(df) {\n  let values = df\n    .getSeries(\"value\")\n    .where(value => typeof value === \"number\");\n  return values.average();\n}\nfunction validMonthlyMeanMap(df) {\n  let dateComparison = row =>\n    dayjs(row.date)\n      .startOf(\"month\")\n      .month();\n\n  df = df\n    .where(row => typeof row.value === \"number\")\n    .groupBy(dateComparison)\n    .select(group => ({\n      month: new Date(group.first().date).getMonth(),\n      value: group.deflate(row => row.value).average()\n    }));\n  return new Map(\n    df.toArray().map(({ month, value }) => [month, value])\n  );\n}\n\nfunction quality(df) {\n  let count = df.getIndex().count();\n  let valid = df\n    .getSeries(\"flag\")\n    .where(\n      value =>\n        value === null ||\n        (Array.isArray(value) && value.length === 0)\n    )\n    .count();\n  let missing = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"missing\") !== -1)\n    .count();\n  let dirty = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"clean\") !== -1)\n    .count();\n  let zerod = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"zero\") !== -1)\n    .count();\n  let breakdown = {\n    valid: valid / count,\n    missing: missing / count,\n    invalid: (dirty + zerod) / count\n  };\n  let report = {\n    accuracy: (1 - dirty / count) * 4,\n    completeness: 4 * breakdown.valid,\n    consistency: 4 * ((count - missing - zerod) / count)\n  };\n  return { breakdown, report, count };\n}\n\nexport {\n  rosnerTest,\n  modifiedZScoreTest,\n  boxPlotTest,\n  calculateOutlierThresholds,\n  zeroReplacement,\n  isOutlier,\n  validMean,\n  validMonthlyMeanMap,\n  quality\n};\n","import dayjs from \"dayjs\";\nimport dataForge from \"data-forge\";\nimport { msToInterval, intervalToMS } from \"./lib/Timeseries.interval\";\nimport isEqual from \"lodash/isEqual\";\nimport has from \"lodash/has\";\nimport fromPairs from \"lodash/fromPairs\";\nimport { gapExists, gapFill, gapFillBlank } from \"./lib/Timeseries.fill\";\nimport { medianAbsoluteDeviation, quantile } from \"simple-statistics\";\nimport {\n\trosnerTest,\n\tboxPlotTest,\n\tmodifiedZScoreTest\n} from \"./lib/Timeseries.statistics\";\nimport { annualScale, calculateChange } from \"./lib/misc\";\nimport { zeroCheck } from \"./lib/Timeseries.zero\";\nimport { timingSafeEqual } from \"crypto\";\n\nexport default Timeseries;\n\nfunction Timeseries(data) {\n\tif (data instanceof Timeseries) {\n\t\treturn data;\n\t}\n\tif (data instanceof dataForge.DataFrame) {\n\t\tdata = data.toArray();\n\t}\n\n\tdata = data\n\t\t.map(({ date, ...others }) => ({ date: dayjs(date), ...others }))\n\t\t.sort((a, b) => a.date.valueOf() - b.date.valueOf());\n\tlet config = {\n\t\t// columns: ['date', 'value', 'raw', 'flag'],\n\t\tvalues: data,\n\t\tindex: data.map(({ date }) => date.toDate()),\n\t\tconsiderAllRows: true\n\t};\n\tdataForge.DataFrame.call(this, config);\n}\n\nTimeseries.prototype = Object.create(dataForge.DataFrame.prototype);\nTimeseries.prototype.constructor = Timeseries;\n\n// Getters\nfunction getValueColumns() {\n\treturn this.detectTypes()\n\t\t.where(row => row.Type === \"number\")\n\t\t.distinct(row => row.Column)\n\t\t.getSeries(\"Column\")\n\t\t.toArray();\n}\nfunction interval() {\n\tconst computeInterval = window => window.last() - window.first();\n\tconst intervals = this.getIndex()\n\t\t.window(2)\n\t\t.select(computeInterval)\n\t\t.detectValues()\n\t\t.orderBy(row => -row.Frequency)\n\t\t.orderBy(row => row.Value);\n\tlet val = intervals.first().Value;\n\treturn msToInterval(val);\n}\n\nfunction dateRange(unit, adjustment) {\n\tlet start = dayjs(this.first().date),\n\t\tend = dayjs(this.last().date);\n\tif (adjustment) {\n\t\tstart = start.startOf(adjustment);\n\t\tend = end.endOf(adjustment);\n\t}\n\treturn end.diff(start, unit);\n}\nTimeseries.prototype.getValueColumns = getValueColumns;\nTimeseries.prototype.getInterval = interval;\nTimeseries.prototype.getDateRange = dateRange;\n\n// Methods\nfunction calculateThresholdOptions({\n\tk,\n\tfilterZeros = true,\n\tfilterNegative = true\n} = {}) {\n\tlet noflags = this.where(\n\t\trow =>\n\t\t\trow.flag === null ||\n\t\t\trow.flag === undefined ||\n\t\t\t(Array.isArray(row.flag) && row.flag.length === 0)\n\t)\n\t\t.where(row => !isNaN(row.value) && row.value !== null)\n\t\t.getSeries(\"value\");\n\tif (filterZeros) noflags = noflags.where(value => value !== 0);\n\tif (filterNegative) noflags = noflags.where(value => value > 0);\n\tif (!k) {\n\t\tk =\n\t\t\tnoflags.count() < 1000\n\t\t\t\t? Math.floor(noflags.count() * 0.15)\n\t\t\t\t: Math.min(...[1000, Math.floor(noflags.count() * 0.02)]);\n\t}\n\tif (noflags.count() < 5) return {};\n\tlet { thresholds: esd } = rosnerTest(noflags.toArray(), k);\n\tlet { thresholds: box } = boxPlotTest(noflags.toArray());\n\tlet { thresholds: modz } = modifiedZScoreTest(noflags.toArray());\n\treturn { esd, box, modz };\n}\nfunction calculateStatistics(options = {}) {\n\tconst {\n\t\tcolumn = \"value\",\n\t\tfilterZeros = false,\n\t\tfilterNegative = true\n\t} = options;\n\tlet series = this.deflate(row => row[column]).where(value => !isNaN(value));\n\tif (filterNegative) series = series.where(value => value >= 0);\n\tif (filterZeros) series = series.where(value => value !== 0);\n\tlet median = series.median();\n\tlet mean = series.average();\n\tlet count = series.count();\n\tlet std = series.std();\n\tlet min = series.min();\n\tlet max = series.max();\n\tlet mad = medianAbsoluteDeviation(series.toArray());\n\tlet q1 = quantile(series.toArray(), 0.25);\n\tlet q3 = quantile(series.toArray(), 0.75);\n\tlet iqr = q3 - q1;\n\tlet stats = {\n\t\tmedian,\n\t\tmean,\n\t\tcount,\n\t\tstd,\n\t\tmin,\n\t\tmax,\n\t\tmad,\n\t\tq1,\n\t\tq3,\n\t\tiqr\n\t};\n\treturn stats;\n}\n\nTimeseries.prototype.calculateStatistics = calculateStatistics;\nTimeseries.prototype.calculateThresholdOptions = calculateThresholdOptions;\n\n// Chainable Methods\nfunction transformAllSeries(adjustmentFunction, { exclude }) {\n\tlet df = this;\n\tlet columns = (columns = df\n\t\t.detectTypes()\n\t\t.where(row => row.Type === \"number\")\n\t\t.distinct(row => row.Column)\n\t\t.getSeries(\"Column\")\n\t\t.toArray());\n\tif (exclude && Array.isArray(exclude)) {\n\t\tcolumns = columns.filter(col => exclude.indexOf(col) === -1);\n\t}\n\tcolumns.forEach(col => {\n\t\tdf = df.transformSeries({\n\t\t\t[col]: value => {\n\t\t\t\tif (isNaN(value)) {\n\t\t\t\t\treturn value;\n\t\t\t\t} else {\n\t\t\t\t\treturn adjustmentFunction(value);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\treturn df;\n}\n\nTimeseries.prototype.transformAllSeries = transformAllSeries;\n\nfunction reset() {\n\tlet df = this.withSeries({\n\t\tvalue: row =>\n\t\t\trow.flag && Array.isArray(row.flag) && row.flag.length > 0\n\t\t\t\t? row.raw\n\t\t\t\t: row.value\n\t})\n\t\t.subset([\"date\", \"value\"])\n\t\t.where(row => !isNaN(row.value) && row.value !== null);\n\treturn new Timeseries(df);\n}\nTimeseries.prototype.reset = reset;\n\nfunction group(interval, toArray) {\n\tif ([\"hour\", \"day\", \"month\", \"year\"].indexOf(interval) === -1)\n\t\tthrow new Error(\"interval type not supported\");\n\tlet dateComparison = row => dayjs(row.date).startOf(interval);\n\tlet groups = this.groupBy(dateComparison);\n\treturn groups;\n}\n\nTimeseries.prototype.group = group;\n\nfunction removeOutliers({\n\tcolumn = \"value\",\n\tlowerThreshold,\n\tupperThreshold\n} = {}) {\n\tif (lowerThreshold > upperThreshold) throw new Error(\"thresholds invalid\");\n\tlet outlierCheck = (value, lowerThreshold, upperThreshold) =>\n\t\tvalue < lowerThreshold || value > upperThreshold;\n\n\tlet outliers = this.where(row =>\n\t\toutlierCheck(row[column], lowerThreshold, upperThreshold)\n\t)\n\t\t.generateSeries({\n\t\t\traw: row => row[column],\n\t\t\tflag: ({ flag = [] }) => [\"outlier\", ...flag]\n\t\t})\n\t\t.transformSeries({\n\t\t\t[column]: row => null\n\t\t});\n\t// let df = this.withSeries(\"raw\", outliers.getSeries(\"raw\")).withSeries(\n\t// \t\"flag\",\n\t// \toutliers.getSeries(\"flag\")\n\t// );\n\n\tlet merged = this.merge(outliers);\n\treturn new Timeseries(merged.toArray());\n}\n\nTimeseries.prototype.removeOutliers = removeOutliers;\nTimeseries.prototype.clean = removeOutliers;\n\nfunction downsample([duration, value], fillType = \"sum\") {\n\tif ([\"hour\", \"day\", \"month\", \"year\"].indexOf(duration) === -1)\n\t\tthrow new Error(\"interval type not supported\");\n\tif ([\"sum\", \"avg\", \"median\"].indexOf(fillType) === -1) {\n\t\tthrow new Error(\"aggregation type not suppported, only:\");\n\t}\n\tlet dateComparison = row => row.date.startOf(duration);\n\tlet valueColumns = this.getValueColumns();\n\tif (value) {\n\t\tdateComparison = row => row.date.startOf(duration).add(value, duration);\n\t}\n\tlet df = this.groupBy(dateComparison)\n\t\t.select(group => {\n\t\t\tconst date = group.first().date.startOf(duration);\n\t\t\treturn {\n\t\t\t\tdate,\n\t\t\t\t...fromPairs([\n\t\t\t\t\t...valueColumns.map(col => {\n\t\t\t\t\t\tlet value;\n\t\t\t\t\t\tswitch (fillType) {\n\t\t\t\t\t\t\tcase \"median\":\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.median();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"avg\":\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.average();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t// sum\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.sum();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn [col, value];\n\t\t\t\t\t}),\n\t\t\t\t\t...group\n\t\t\t\t\t\t.getColumnNames()\n\t\t\t\t\t\t.filter(col => col !== \"date\")\n\t\t\t\t\t\t.filter(col => valueColumns.indexOf(col) === -1)\n\t\t\t\t\t\t.map(col => {\n\t\t\t\t\t\t\tlet value = group\n\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t.distinct()\n\t\t\t\t\t\t\t\t.toArray();\n\t\t\t\t\t\t\tif (value.length === 1) value = value[0];\n\t\t\t\t\t\t\treturn [col, value];\n\t\t\t\t\t\t})\n\t\t\t\t])\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => dayjs(row.date).toDate());\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.downsample = downsample;\n\nfunction upsample([duration, value], fillType = \"avg\") {\n\t// Dont use this b/c it has the raw and flag values\n\tlet df = this.fillGaps(\n\t\tgapExists([duration, value]),\n\t\tgapFill(fillType, [duration, value])\n\t);\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.upsample = upsample;\n\nfunction populate(value, type = \"avg\") {\n\tlet v;\n\tswitch (type) {\n\t\tcase \"fill\":\n\t\t\tv = value;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tv = value / this.count();\n\t\t\tbreak;\n\t}\n\tlet df = this.generateSeries({ value: row => v });\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.populate = populate;\n\nfunction reduceToValue(columnNames) {\n\tfunction chooseValue(row, columnNames = []) {\n\t\tlet values = columnNames.map(n => row[n]).filter(v => v);\n\t\treturn values[0] || 0;\n\t}\n\tlet df = this.generateSeries({\n\t\tvalue: row => chooseValue(row, columnNames)\n\t}).subset([\"date\", \"value\"]);\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.reduceToValue = reduceToValue;\n\n// Baseline Functions\n\nfunction addBaselineDelta(baselineDF) {\n\t// Only Change in Year\n\tif (!(baselineDF instanceof Timeseries))\n\t\tbaselineDF = new Timeseries(baselineDF);\n\tlet dfwb;\n\tif (baselineDF.count() > 1) {\n\t\tlet interval = this.getInterval();\n\t\tlet baselineInterval = baselineDF.interval;\n\t\tif (!isEqual(interval, baselineInterval)) {\n\t\t\tconsole.error(interval, baselineInterval);\n\t\t\tthrow new Error(\"baseline and data intervals do not match\");\n\t\t}\n\t\tlet indexer;\n\t\tswitch (interval[0]) {\n\t\t\tcase \"day\":\n\t\t\t\tindexer = date => `${date.month()}-${date.date()}`;\n\t\t\t\tbreak;\n\t\t\tcase \"month\":\n\t\t\t\tindexer = date => date.month();\n\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tindexer = date => 0;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tlet indexedBaseline = baselineDF.withIndex(row => indexer(row.date));\n\t\tlet getBaselineValue = index => {\n\t\t\tlet at = indexedBaseline.at(index);\n\t\t\tif (at && has(at, \"value\")) {\n\t\t\t\treturn at.value;\n\t\t\t} else {\n\t\t\t\treturn indexedBaseline.getSeries(\"value\").average();\n\t\t\t}\n\t\t};\n\t\tdfwb = this.generateSeries({\n\t\t\tbaseline: row => getBaselineValue(indexer(row.date))\n\t\t});\n\t} else {\n\t\tdfwb = this.generateSeries({\n\t\t\tbaseline: row => baselineDF.first().value\n\t\t});\n\t}\n\tdfwb = dfwb.generateSeries({\n\t\tdelta: row => calculateChange(row.baseline, row.value)\n\t});\n\treturn new Timeseries(dfwb);\n}\n\nTimeseries.prototype.addBaselineDelta = addBaselineDelta;\n\nfunction annualIntensity(normalizeValue = 1) {\n\tlet interval = this.getInterval();\n\tlet annual = this.groupBy(row => row.date.year())\n\t\t.select(group => {\n\t\t\tlet startDate = group.first().date;\n\t\t\tlet endDate = group\n\t\t\t\t.last()\n\t\t\t\t.date.add(interval[1] || 1, interval[0] || \"month\");\n\t\t\tlet scaler = annualScale(startDate, endDate);\n\t\t\treturn {\n\t\t\t\tstartDate,\n\t\t\t\tendDate,\n\t\t\t\t...fromPairs(\n\t\t\t\t\tthis.getValueColumns().map(col => [\n\t\t\t\t\t\tcol,\n\t\t\t\t\t\t(group\n\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t.where(v => v)\n\t\t\t\t\t\t\t.sum() *\n\t\t\t\t\t\t\tscaler) /\n\t\t\t\t\t\t\tnormalizeValue\n\t\t\t\t\t])\n\t\t\t\t)\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.renameSeries({ startDate: \"date\" })\n\t\t.dropSeries(\"endDate\");\n\treturn new Timeseries(annual);\n}\n\nTimeseries.prototype.annualIntensity = annualIntensity;\n\n// Fill Functions\n\nfunction fillMissing() {\n\tlet startDate = this.first().date.toDate(),\n\t\tendDate = this.last().date.toDate();\n\tlet interval = this.getInterval();\n\tlet bdf = Timeseries.blank(startDate, endDate, interval, \"missing\").withIndex(\n\t\trow => row.date.valueOf()\n\t);\n\tlet m = this.withIndex(row => row.date.valueOf())\n\t\t.merge(bdf)\n\t\t.transformSeries({\n\t\t\tflag: row => (row.value ? undefined : row.flag)\n\t\t});\n\treturn new Timeseries(m);\n}\nTimeseries.prototype.fillMissing = fillMissing;\nfunction fillNull(v) {\n\tlet df = this.transformSeries({\n\t\tvalue: value => (value === null || value === undefined ? v : value)\n\t});\n\treturn new Timeseries(df);\n}\nTimeseries.prototype.fillNull = fillNull;\n\nfunction zeroReplacement(threshold) {\n\tlet df = this;\n\tlet { zeroGroups } = zeroCheck(df, threshold);\n\tlet dfs = zeroGroups.toArray().map((zdf, i) => {\n\t\tzdf = zdf\n\t\t\t.transformSeries({\n\t\t\t\tvalue: () => null,\n\t\t\t\traw: () => 0,\n\t\t\t\tflag: value => [\"zero\", ...(value || [])]\n\t\t\t})\n\t\t\t.withIndex(row => new Date(row.date).valueOf());\n\t\treturn zdf;\n\t});\n\tlet merged = df.withIndex(row => row.date.valueOf()).merge(...dfs);\n\treturn new Timeseries(merged);\n}\nTimeseries.prototype.zeroReplacement = zeroReplacement;\n\nfunction monthlyWithQual() {\n\tlet duration = \"month\";\n\tlet dateComparison = row =>\n\t\tdayjs(row.date)\n\t\t\t.startOf(duration)\n\t\t\t.valueOf();\n\tlet ts = this.groupBy(dateComparison)\n\t\t.select(group => {\n\t\t\tconst date = dayjs(group.first().date)\n\t\t\t\t.startOf(duration)\n\t\t\t\t.toDate();\n\t\t\tlet days = new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\n\t\t\tlet count = group\n\t\t\t\t.getSeries(\"value\")\n\t\t\t\t.where(v => v && v !== 0)\n\t\t\t\t.toArray().length;\n\t\t\tlet value = group\n\t\t\t\t.getSeries(\"value\")\n\t\t\t\t.where(v => !isNaN(v))\n\t\t\t\t.sum();\n\t\t\treturn {\n\t\t\t\tdate,\n\t\t\t\tvalue: isNaN(value) ? 0 : value,\n\t\t\t\tcount,\n\t\t\t\tdays,\n\t\t\t\tscore: count / days\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => row.date.toDate());\n\treturn new Timeseries(ts);\n}\nTimeseries.prototype.monthlyWithQual = monthlyWithQual;\n\nfunction threeYearAverage(date, column = \"value\", defaultValue) {\n\tdate = dayjs(date);\n\tif (!defaultValue)\n\t\tdefaultValue = this.getSeries(\"value\")\n\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t.average();\n\n\t// let months = df\n\t// \t.before(date.valueOf())\n\t// \t.where(row => dayjs(row.date).month() === date.month())\n\t// \t.where(row => row.score > 0.9)\n\t// \t.tail(3);\n\tlet months = this.before(date.toDate())\n\t\t.where(row => row.date.month() === date.month())\n\t\t.orderBy(row => dayjs(row.date))\n\t\t.tail(3);\n\t// .where(row => row.score > 0.9);\n\tif (months.count() > 0) {\n\t\tlet val = months\n\t\t\t.getSeries(column)\n\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t.average();\n\t\treturn val;\n\t} else {\n\t\treturn defaultValue;\n\t}\n}\nTimeseries.prototype.threeYearAverage = threeYearAverage;\n\nfunction averageFill() {\n\tlet df = this;\n\tlet avg = df\n\t\t// .where(row => row.score ?row.score >= 0.9)\n\t\t.getSeries(\"value\")\n\t\t.where(v => !isNaN(v) && v !== null)\n\t\t.average();\n\tlet monthlyAvg = df\n\t\t.generateSeries({\n\t\t\trollingAverage: row => df.threeYearAverage(row.date, \"value\", avg)\n\t\t})\n\t\t.generateSeries({\n\t\t\tflag: row => (row.value ? row.flag : [\"filled\", ...(row.flag || [])])\n\t\t})\n\t\t.generateSeries({\n\t\t\tvalue: row => (row.value ? row.value : row.rollingAverage)\n\t\t})\n\t\t.dropSeries([\"rollingAverage\"]);\n\treturn new Timeseries(monthlyAvg);\n}\n\nTimeseries.prototype.averageFill = averageFill;\n\n// Static Methods\nfunction blank(startDate, endDate, [duration, value = 1], flag) {\n\tif ([\"minute\", \"hour\", \"day\", \"month\", \"year\"].indexOf(duration) < 0) {\n\t\tconsole.error(interval);\n\t\tthrow new Error(\"interval type not supported\");\n\t}\n\tstartDate = dayjs(startDate);\n\tendDate = dayjs(endDate);\n\tlet dates = [startDate];\n\tlet interval = intervalToMS([duration, value]);\n\twhile (dates[dates.length - 1].valueOf() < endDate.valueOf()) {\n\t\tdates.push(dayjs(dates[dates.length - 1]).add(value, duration));\n\t}\n\tlet df = new Timeseries(dates.map(date => ({ date, ...(flag && { flag }) })));\n\t// if (flag) {\n\t// \tdf = df.generateSeries({\n\t// \t\tflag: row => [flag]\n\t// \t});\n\t// \tdf = new Timeseries(df);\n\t// }\n\treturn df;\n}\nTimeseries.blank = blank;\nfunction aggregate(dataframes) {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df => new Timeseries(df));\n\tconst valueColumns = new Set(\n\t\tdataframes.map(df => df.getValueColumns()).reduce((a, b) => a.concat(b), [])\n\t);\n\tconst concatenated = dataForge.DataFrame.concat(dataframes)\n\t\t.groupBy(row => row.date)\n\t\t.select(group => {\n\t\t\tconst date = group.first().date;\n\t\t\tlet o = { date };\n\t\t\tvalueColumns.forEach(c => (o[c] = group.deflate(row => row[c]).sum()));\n\t\t\tgroup\n\t\t\t\t.getColumnNames()\n\t\t\t\t.filter(col => col !== \"date\")\n\t\t\t\t.filter(col => valueColumns.has(col) === -1)\n\t\t\t\t.forEach(col => {\n\t\t\t\t\tlet value = group\n\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t.distinct()\n\t\t\t\t\t\t.toArray();\n\t\t\t\t\tif (value.length === 1) value = value[0];\n\t\t\t\t\to[col] = value;\n\t\t\t\t\treturn;\n\t\t\t\t});\n\t\t\treturn o;\n\t\t})\n\t\t.inflate();\n\t// .toArray();\n\n\treturn new Timeseries(concatenated);\n}\nTimeseries.aggregate = aggregate;\nTimeseries.concat = dataframes => {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df => new Timeseries(df));\n\tlet df = dataForge.DataFrame.concat(dataframes);\n\treturn new Timeseries(df);\n};\nTimeseries.merge = dataframes => {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df => new Timeseries(df));\n\tlet df = dataForge.DataFrame.merge(dataframes);\n\treturn new Timeseries(df);\n};\n","export const annualScale = (start, end) => 365 / dayjs(end).diff(dayjs(start), \"day\");\nexport const calculateChange = (baseline, value) => (value - baseline) / baseline;\n\n","import { DataFrame } from \"data-forge\";\n\nconst zerogrouping = dataframe => {\n  // group sequential\n  let df = dataframe.variableWindow(\n    (a, b) => a.value === b.value\n  );\n};\n\nfunction zeroCheck(df, threshold = 2) {\n  let zeroGroups = df\n    .variableWindow((a, b) => {\n      return a.value === b.value && a.value === 0;\n    })\n    .where(window => window.getIndex().count() >= threshold);\n  let zeroSummary = zeroGroups\n    .select(window => ({\n      start: window.first().date,\n      end: window.last().date,\n      count: window.count()\n    }))\n    .inflate(); // Series -> dataframe.\n  // .toArray()\n  return { zeroSummary, zeroGroups };\n}\n\nfunction zeroReplacement(df, threshold) {\n  let { zeroGroups } = zeroCheck(df, threshold);\n  let dfs = zeroGroups.toArray().map(zdf => {\n    zdf = zdf\n      .transformSeries({\n        value: () => null,\n        raw: 0,\n        flag: value => [\"zero\", ...(value || [])]\n      })\n      .withIndex(row => new Date(row.date).valueOf());\n    return zdf;\n  });\n  let merged = DataFrame.merge([df, ...dfs]);\n\n  return merged;\n}\nexport { zerogrouping, zeroReplacement, zeroCheck };\n"],"names":["valueFiller","fillType","value","startValue","endValue","entryIndex","numEntries","overrideValue","dateFunction","date","flag","indexOf","Error","fromPairs","toPairs","map","key","val","rval","df","values","deflate","row","x","toArray","std","sampleStandardDeviation","mean","_mean","ndf","generateSeries","ares","R","DataFrame","Math","abs","max","lambdaTest","n","i","alpha","p","pValue","t","degreeOfFreedom","Studentt","inv","tValue","lambda","sqrt","pow","modz","mad","median","modifiedZScoreTest","_median","medianAbsoluteDeviation","outliers","sort","a","b","filter","v","thresholds","upper","min","Infinity","lower","Timeseries","data","dataForge","config","others","dayjs","valueOf","index","toDate","considerAllRows","call","this","removeOutliers","column","lowerThreshold","upperThreshold","where","outlierCheck","raw","transformSeries","[object Object]","merge","prototype","Object","create","constructor","getValueColumns","detectTypes","Type","distinct","Column","getSeries","getInterval","ms","start","end","getIndex","window","select","last","first","detectValues","orderBy","Frequency","Value","add","diff","ceil","getDateRange","unit","adjustment","startOf","endOf","calculateStatistics","options","filterZeros","filterNegative","series","isNaN","average","count","q1","quantile","q3","iqr","calculateThresholdOptions","k","noflags","Array","isArray","length","floor","esd","dataset","newdf","dataframe","trip","pair","assign","push","outlierValues","outlier","takeWhile","iterations","rosnerTest","box","lowerInner","upperInner","lowerOuter","upperOuter","transformAllSeries","adjustmentFunction","exclude","columns","col","forEach","reset","withSeries","subset","group","interval","groupBy","clean","downsample","duration","dateComparison","valueColumns","sum","getColumnNames","inflate","withIndex","upsample","fillGaps","durationValue","pairA","pairB","startDate","gapExists","endDate","newEntries","e","gapFill","populate","type","reduceToValue","columnNames","chooseValue","addBaselineDelta","baselineDF","dfwb","indexer","baselineInterval","isEqual","console","error","month","indexedBaseline","baseline","at","has","getBaselineValue","delta","calculateChange","annualIntensity","normalizeValue","year","scaler","annualScale","renameSeries","dropSeries","fillMissing","bdf","blank","undefined","fillNull","zeroReplacement","threshold","zeroGroups","variableWindow","zeroSummary","zeroCheck","dfs","zdf","Date","monthlyWithQual","days","getFullYear","getMonth","getDate","score","threeYearAverage","defaultValue","months","before","tail","averageFill","avg","rollingAverage","dates","intervalToMS","aggregate","dataframes","Set","reduce","concat","o","c"],"mappings":"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"}
{"version":3,"file":"index.modern.js","sources":["../src/lib/Timeseries.interval.js","../src/lib/Timeseries.fill.js","../src/lib/Timeseries.statistics.js","../src/lib/misc.js","../src/index.js"],"sourcesContent":["import dayjs from \"dayjs\";\n\nconst msToInterval = ms => {\n\tlet start = dayjs();\n\tlet end = dayjs().add(ms);\n\tif (end.diff(start, \"month\", true) >= 11) {\n\t\treturn [\"year\", Math.ceil(end.diff(start, \"year\", true))];\n\t} else if (end.diff(start, \"day\", true) >= 28) {\n\t\treturn [\"month\", Math.ceil(end.diff(start, \"month\", true))];\n\t} else if (end.diff(start, \"hour\", true) >= 23) {\n\t\treturn [\"day\", Math.ceil(end.diff(start, \"day\", true))];\n\t} else if (end.diff(start, \"minute\", true) >= 55) {\n\t\treturn [\"hour\", Math.ceil(end.diff(start, \"hour\", true))];\n\t} else {\n\t\treturn [\"minute\", end.diff(start, \"minute\")];\n\t}\n};\nconst intervalToMS = ([unit, value]) => {\n\tlet start = dayjs();\n\tlet end = dayjs().add(value, unit);\n\treturn end.diff(start);\n};\nfunction calculateInterval(df, startDate, endDate) {\n\tif (!startDate) startDate = df.first.date;\n\tif (!endDate) endDate = df.last.date;\n\tfunction computeInterval(window) {\n\t\treturn window.last() - window.first();\n\t}\n\tconst intervals = df\n\t\t.between(startDate, endDate)\n\t\t.getIndex()\n\t\t.window(2)\n\t\t.select(computeInterval)\n\t\t.detectValues()\n\t\t.orderBy(row => row.Frequency);\n\n\tlet val = intervals.last().Value;\n\treturn msToInterval(val);\n}\nexport { msToInterval, intervalToMS, calculateInterval };\n","import dayjs from \"dayjs\";\nimport fromPairs from \"lodash/fromPairs\";\nimport toPairs from \"lodash/toPairs\";\nimport { mean } from \"simple-statistics\";\nimport { Timeseries } from \"../index\";\nconst gapExists = ([duration, durationValue = 1]) => (pairA, pairB) => {\n\tconst startDate = pairA[0];\n\tconst endDate = pairB[0];\n\tlet gapSize = Math.floor(\n\t\tdayjs(endDate).diff(startDate, duration, true) / durationValue\n\t);\n\n\tif (gapSize > 0) return true;\n\treturn false;\n};\n\nconst valueFiller = (\n\tfillType,\n\t{ startValue, endValue, entryIndex, numEntries },\n\t{ overrideValue, dateFunction, date, flag }\n) => {\n\tif (\n\t\t[\"pad\", \"interpolate\", \"average\", \"dateFunction\", \"value\"].indexOf(\n\t\t\tfillType\n\t\t) === -1\n\t) {\n\t\tthrow new Error(\"fill Type not supported\");\n\t}\n\tlet value;\n\tif (fillType === \"pad\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\treturn [key, startValue[key]];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", \"pad\"];\n\t} else if (fillType === \"interpolate\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv =\n\t\t\t\t\tstartValue[key] +\n\t\t\t\t\t(entryIndex + 1) *\n\t\t\t\t\t\t((endValue[key] - startValue[key]) / (numEntries + 1));\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"average\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv = (startValue[key] + endValue[key]) / numEntries;\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"dateFunction\" && dateFunction) {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv = dateFunction(date);\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"value\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv;\n\t\t\t\tif (typeof overrideValue === \"number\") {\n\t\t\t\t\tnv = overrideValue;\n\t\t\t\t} else {\n\t\t\t\t\tnv = overrideValue[key];\n\t\t\t\t}\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\treturn [key, null];\n\t\t\t})\n\t\t);\n\t\tflag = [\"fill\"];\n\t}\n\treturn { ...value, flag };\n};\n\nconst gapFill = (\n\tfillType,\n\t[duration, durationValue],\n\t{ overrideValue, dateFunction, flag } = {}\n) => (pairA, pairB) => {\n\t// Fill values forward.\n\n\tconst startDate = dayjs(pairA[0]);\n\tconst endDate = dayjs(pairB[0]);\n\tlet gapSize = Math.floor(\n\t\tdayjs(endDate).diff(startDate, duration) / durationValue\n\t);\n\tconst numEntries = gapSize - 1;\n\tconst startValue = pairA[1];\n\tconst endValue = pairB[1];\n\tconst newEntries = [];\n\tfor (let entryIndex = 0; entryIndex < numEntries; ++entryIndex) {\n\t\tlet adjustment = valueFiller(\n\t\t\t\tfillType,\n\t\t\t\t{ startValue, endValue, entryIndex, numEntries },\n\t\t\t\t{\n\t\t\t\t\toverrideValue,\n\t\t\t\t\tdateFunction,\n\t\t\t\t\tflag\n\t\t\t\t}\n\t\t\t),\n\t\t\tdate = dayjs(startDate)\n\t\t\t\t.add((entryIndex + 1) * durationValue, duration)\n\t\t\t\t.toDate();\n\t\tlet e = [date.valueOf(), Object.assign({}, adjustment, { date })];\n\t\tnewEntries.push(e);\n\t}\n\n\treturn newEntries;\n};\n\n// Basic Fill Functions\nconst averageMonthlyMap = df =>\n\tnew Map(\n\t\tdf\n\t\t\t.group(\"month\")\n\t\t\t.select(group => ({\n\t\t\t\tmonth: group.first().date.month(),\n\t\t\t\tvalue: group\n\t\t\t\t\t.getSeries(\"value\")\n\t\t\t\t\t.where(v => v)\n\t\t\t\t\t.average()\n\t\t\t}))\n\t\t\t.toArray()\n\t\t\t.map(({ month, value }) => [month, value])\n\t);\nconst annualMonthlyAverageMap = df =>\n\tnew Map(\n\t\tdf\n\t\t\t.groupBy(row => row.date.year())\n\t\t\t.select(group => {\n\t\t\t\tconst date = group.first().date.startOf(\"year\");\n\t\t\t\tlet ts = new Timeseries(group).downsample([\"month\", 1], \"avg\");\n\t\t\t\tlet avg = ts.getSeries(\"value\").average();\n\t\t\t\tlet map = averageMonthlyMap(ts);\n\t\t\t\tmap.set(\"avg\", avg);\n\t\t\t\treturn [date.year(), map];\n\t\t\t})\n\t\t\t.toArray()\n\t);\nconst monthlyRollingAverageMap = (\n\tdf,\n\t{ years = 3, series = \"value\", aggregator = \"average\", validOnly = true } = {}\n) => {\n\tlet months = df\n\t\t.groupBy(row => row.date.startOf(\"month\").toDate())\n\t\t.select(group => {\n\t\t\tlet date = group.first().date.startOf(\"month\");\n\t\t\tlet value = group\n\t\t\t\t.getSeries(series)\n\t\t\t\t.where(v => (validOnly ? Boolean(v) : true))\n\t\t\t\t.average();\n\t\t\treturn { date, value };\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => row.date.toDate())\n\t\t.bake();\n\tlet data = months\n\t\t.groupBy(row => row.date.month())\n\t\t.select(group => {\n\t\t\tlet values = new Map(\n\t\t\t\tgroup.rollingWindow(years).select(window => [\n\t\t\t\t\twindow.last().date.year(),\n\t\t\t\t\twindow\n\t\t\t\t\t\t.getSeries(series)\n\t\t\t\t\t\t.where(v => (validOnly ? Boolean(v) : true))\n\t\t\t\t\t\t.average() ||\n\t\t\t\t\t\tgroup\n\t\t\t\t\t\t\t.getSeries(series)\n\t\t\t\t\t\t\t.where(v => (validOnly ? Boolean(v) : true))\n\t\t\t\t\t\t\t.average()\n\t\t\t\t])\n\t\t\t);\n\t\t\tgroup\n\t\t\t\t.where(row => !values.has(row.date.year()))\n\t\t\t\t.forEach(row => {\n\t\t\t\t\tlet value =\n\t\t\t\t\t\tmonths.before(row.date.toDate()).count() > 0\n\t\t\t\t\t\t\t? months.before(row.date.toDate()).last()[series]\n\t\t\t\t\t\t\t: months.getSeries(series).average();\n\t\t\t\t\tvalues.set(row.date.year(), value);\n\t\t\t\t});\n\n\t\t\tlet month = group.first().date.month();\n\t\t\treturn [month, values];\n\t\t});\n\n\treturn new Map(data.toArray());\n};\n\nconst fillMonthlyByMap = monthMap => row => monthMap.get(row.date.month());\nconst fillMonthlyBAnnualyMap = annualMonthlyMap => row => {\n\tlet month = row.date.month(),\n\t\tyear = row.date.year();\n\tif (annualMonthlyMap.has(month)) {\n\t\tif (annualMonthlyMap.has(month)) {\n\t\t\treturn annualMonthlyMap.get(month).get(year);\n\t\t} else {\n\t\t\treturn mean([...annualMonthlyMap.get(month).values()]);\n\t\t}\n\t} else {\n\t\treturn mean(\n\t\t\t[...annualMonthlyMap.values()].map(m =>\n\t\t\t\t[...m.values()].reduce((a, b) => a.concat(b), [])\n\t\t\t)\n\t\t);\n\t}\n};\n\nconst pad = (df, { validOnly = true, series = \"value\" } = {}) => row => {\n\tlet values = df\n\t\t.before(row.date.toDate())\n\t\t.getSeries(series)\n\t\t.where(v => v);\n\tlet value = values.count() > 0 ? values.last() : 0;\n\treturn value;\n};\nconst annualAverage = (\n\tdf,\n\t{ validOnly = true, series = \"value\", years = 3, defaultValue } = {}\n) => row => {\n\tlet subset = df\n\t\t.subset([\"date\", series])\n\t\t.after(row.date.subtract(years, \"year\").toDate())\n\t\t.before(row.date.toDate())\n\t\t.bake();\n\tlet values = subset\n\t\t.where(r => r.date.month() === row.date.month())\n\t\t.where(r => r.date.date() === row.date.date())\n\t\t.where(r => r.date.hour() === row.date.hour())\n\t\t.where(r => r.date.minute() === row.date.minute())\n\t\t.getSeries(series)\n\t\t.where(v => v);\n\n\tlet value;\n\tif (values.count() < years) {\n\t\tvalue = values\n\t\t\t.appendPair([\n\t\t\t\tnull,\n\t\t\t\tsubset\n\t\t\t\t\t.getSeries(series)\n\t\t\t\t\t.where(v => v)\n\t\t\t\t\t.average()\n\t\t\t])\n\t\t\t.average();\n\t} else {\n\t\tvalue = values.average();\n\t}\n\treturn value;\n};\nexport {\n\tgapExists,\n\tgapFill,\n\taverageMonthlyMap,\n\tfillMonthlyByMap,\n\tpad,\n\tannualAverage,\n\tannualMonthlyAverageMap,\n\tmonthlyRollingAverageMap,\n\tfillMonthlyBAnnualyMap\n};\n","// Source: https://www.itl.nist.gov/div898/handbook/eda/section3/eda35h3.htm\n// https://vsp.pnnl.gov/help/Vsample/Rosners_Outlier_Test.htm\n// https://www.itl.nist.gov/div898/handbook/prc/section1/prc16.htm\n// https://www.math.ucla.edu/~tom/distributions/KolSmir2.html?\nimport { DataFrame } from \"data-forge\";\nimport {\n  sampleStandardDeviation,\n  mean as _mean,\n  max,\n  median as _median,\n  medianAbsoluteDeviation,\n  quantile\n} from \"simple-statistics\";\nimport { Studentt } from \"distributions\";\nimport dayjs from \"dayjs\";\n\nfunction rval(df) {\n  let values = df.deflate(row => row.x).toArray();\n  let std = sampleStandardDeviation(values);\n  let mean = _mean(values);\n  if (std === 0) {\n    let ndf = df.generateSeries({ ares: row => 0 });\n    return { R: 0, std, mean, df: ndf };\n  }\n  let ndf = new DataFrame({\n    values: values.map(x => ({\n      x,\n      ares: Math.abs(x - mean) / std\n    }))\n  });\n  let R = max(ndf.deflate(row => row.ares).toArray());\n  return { R, df: ndf, std, mean };\n}\n\nfunction pValue(n, i, alpha) {\n  let p = 1 - alpha / (2 * (n - i + 1));\n  return p;\n}\nfunction tValue(p, degreeOfFreedom) {\n  let qt = new Studentt(degreeOfFreedom);\n  let t = qt.inv(p);\n  return t;\n}\n//\nfunction lambdaTest(n, i, alpha) {\n  let p = pValue(n, i, alpha);\n  let df = n - i - 1;\n  let t = tValue(p, df);\n  let lambda =\n    (t * (n - i)) /\n    Math.sqrt((n - i - 1 + Math.pow(t, 2)) * (n - i + 1));\n  return { lambda, p, t };\n}\nfunction rosnerTest(dataset = [], k = 10, alpha = 0.05) {\n  let dataframe = new DataFrame({\n    values: dataset.map(x => ({ x }))\n  });\n  let n = dataframe.getSeries(\"x\").count();\n  let newdf;\n  let i = 1;\n  let outliers = [];\n  let trip = false;\n  while (i <= k) {\n    let pair = {};\n    let s = Date.now();\n    if (i === 1) {\n      let { R, df, mean, std } = rval(dataframe);\n      newdf = df.where(row => row.ares !== R);\n      pair = Object.assign({}, pair, {\n        mean,\n        std,\n        Value: df\n          .where(row => row.ares === R)\n          .getSeries(\"x\")\n          .first(),\n        R\n      });\n    } else {\n      let { R, df, mean, std } = rval(newdf);\n      newdf = df.where(row => row.ares !== R);\n      pair = Object.assign({}, pair, {\n        mean,\n        std,\n        Value: df\n          .where(row => row.ares === R)\n          .getSeries(\"x\")\n          .first(),\n        R\n      });\n    }\n    let { lambda, p, t } = lambdaTest(n, i, alpha);\n    pair = Object.assign({}, pair, { lambda });\n    outliers.push(pair);\n    if (trip && pair.R > pair.lambda) trip = false;\n    if (pair.R === 0) break;\n    if (pair.R < pair.lambda) {\n      if (trip) {\n        break;\n      } else {\n        trip = true;\n      }\n    }\n    i++;\n  }\n  outliers = new DataFrame(outliers)\n    .generateSeries({\n      outlier: row => row.R > row.lambda\n    })\n    .takeWhile(row => row.outlier);\n  let outlierValues = outliers\n    .where(row => row.Value > 0)\n    .deflate(row => row.Value);\n  let thresholds = {\n    lower: 0,\n    upper:\n      outlierValues.count() > 0 ? outlierValues.min() : Infinity\n  };\n  return {\n    outliers,\n    thresholds,\n    iterations: i\n  };\n}\nconst modz = (value, mad, median) => {\n  return (0.6745 * (value - median)) / mad;\n};\nfunction modifiedZScoreTest(values) {\n  let median = _median(values);\n  let mad = medianAbsoluteDeviation(values);\n  values = values\n    .sort((a, b) => b - a)\n    .filter(v => v > 0)\n    .map(v => [v, modz(v, mad, median)]);\n  let outliers = values.filter(\n    ([v, modz]) => Math.abs(modz) >= 3.5\n  );\n  let upper = Math.min(\n    ...[Infinity, ...outliers.map(v => v[0])]\n  );\n  // let score,\n  // \tvalue,\n  // \tthreshold = Infinity,\n  // \tindex = 0;\n  // do {\n  // \tvalue = values[index];\n  // \tscore = modz(value, mad, median);\n  // \tif (Math.abs(score) >= 3.5) threshold = value;\n  // } while (score >= 3.5);\n  return { thresholds: { upper, lower: 0 } };\n}\nfunction boxPlotTest(values) {\n  let q1 = quantile(values, 0.25);\n  let q3 = quantile(values, 0.75);\n  let iqr = q3 - q1;\n  return {\n    thresholds: {\n      lowerInner: q1 - 1.5 * iqr,\n      upperInner: q1 - 3 * iqr,\n      lowerOuter: q3 + 1.5 * iqr,\n      upperOuter: q3 + 3 * iqr\n    }\n  };\n}\nfunction calculateOutlierThresholds(\n  df,\n  { k, filterZeros = true } = {}\n) {\n  let values = df\n    .where(\n      row =>\n        row.flag === null ||\n        row.flag === undefined ||\n        Array.isArray(row.flag)\n    )\n    .where(row => !isNaN(row.value) && row.value !== null)\n    .getSeries(\"value\")\n    .bake();\n  if (filterZeros) values = values.where(value => value > 0);\n  if (!k) {\n    k =\n      values.count() < 1000\n        ? Math.floor(values.count() * 0.15)\n        : Math.min(...[1000, Math.floor(values.count() * 0.02)]);\n  }\n  if (values.count < 5) return {};\n  let { outliers, threshold } = rosnerTest(values.toArray(), k);\n  return { outliers, threshold };\n}\n\nfunction zeroCheck(df, threshold = 2) {\n  let zeroGroups = df\n    .variableWindow((a, b) => {\n      return a.value === b.value && a.value === 0;\n    })\n    .where(window => window.getIndex().count() >= threshold);\n  let zeroSummary = zeroGroups\n    .select(window => ({\n      start: window.first().date,\n      end: window.last().date,\n      count: window.count()\n    }))\n    .inflate(); // Series -> dataframe.\n  // .toArray()\n  return { zeroSummary, zeroGroups };\n}\n\nfunction zeroReplacement(df, threshold) {\n  let { zeroGroups } = zeroCheck(df, threshold);\n  zeroGroups.forEach(dff => {\n    dff = dff.transformSeries({\n      value: value => null,\n      flag: value => [\"zero\"]\n    });\n    df = DataFrame.merge([df, dff]);\n  });\n  return df;\n}\nfunction isOutlier(value, { lower, upper }) {\n  if (value < lower || value >= upper) {\n    return true;\n  }\n  return false;\n}\nfunction validMean(df) {\n  let values = df\n    .getSeries(\"value\")\n    .where(value => typeof value === \"number\");\n  return values.average();\n}\nfunction validMonthlyMeanMap(df) {\n  let dateComparison = row =>\n    dayjs(row.date)\n      .startOf(\"month\")\n      .month();\n\n  df = df\n    .where(row => typeof row.value === \"number\")\n    .groupBy(dateComparison)\n    .select(group => ({\n      month: new Date(group.first().date).getMonth(),\n      value: group.deflate(row => row.value).average()\n    }));\n  return new Map(\n    df.toArray().map(({ month, value }) => [month, value])\n  );\n}\n\nfunction quality(df) {\n  let count = df.getIndex().count();\n  let valid = df\n    .getSeries(\"flag\")\n    .where(\n      value =>\n        value === null ||\n        (Array.isArray(value) && value.length === 0)\n    )\n    .count();\n  let missing = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"missing\") !== -1)\n    .count();\n  let dirty = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"clean\") !== -1)\n    .count();\n  let zerod = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"zero\") !== -1)\n    .count();\n  let breakdown = {\n    valid: valid / count,\n    missing: missing / count,\n    invalid: (dirty + zerod) / count\n  };\n  let report = {\n    accuracy: (1 - dirty / count) * 4,\n    completeness: 4 * breakdown.valid,\n    consistency: 4 * ((count - missing - zerod) / count)\n  };\n  return { breakdown, report, count };\n}\n\nexport {\n  rosnerTest,\n  modifiedZScoreTest,\n  boxPlotTest,\n  calculateOutlierThresholds,\n  zeroReplacement,\n  isOutlier,\n  validMean,\n  validMonthlyMeanMap,\n  quality\n};\n","import dayjs from \"dayjs\";\nexport const annualScale = (start, end) =>\n\t365 / dayjs(end).diff(dayjs(start), \"day\");\nexport const calculateChange = (baseline, value) =>\n\t(value - baseline) / baseline;\n","import dayjs from \"dayjs\";\nimport dataForge from \"data-forge\";\nimport { msToInterval, intervalToMS } from \"./lib/Timeseries.interval\";\nimport isEqual from \"lodash/isEqual\";\nimport has from \"lodash/has\";\nimport get from \"lodash/get\";\nimport fromPairs from \"lodash/fromPairs\";\nimport {\n\tgapExists,\n\tgapFill,\n\taverageMonthlyMap,\n\tfillMonthlyByMap,\n\tpad,\n\tannualAverage,\n\tannualMonthlyAverageMap,\n\tmonthlyRollingAverageMap,\n\tfillMonthlyBAnnualyMap\n} from \"./lib/Timeseries.fill\";\nimport {\n\tckmeans,\n\tmax,\n\tmedianAbsoluteDeviation,\n\tquantile\n} from \"simple-statistics\";\n\nimport {\n\trosnerTest,\n\tboxPlotTest,\n\tmodifiedZScoreTest\n} from \"./lib/Timeseries.statistics\";\nimport { annualScale, calculateChange } from \"./lib/misc\";\n\n// export default ;\n// Fill Options\nexport {\n\tTimeseries,\n\tannualAverage,\n\taverageMonthlyMap,\n\tannualMonthlyAverageMap,\n\tmonthlyRollingAverageMap,\n\tfillMonthlyBAnnualyMap,\n\tfillMonthlyByMap,\n\tpad\n};\nfunction Timeseries(data = [], options = {}) {\n\t// const { msIndex } = options;\n\tif (data instanceof Timeseries) {\n\t\treturn data;\n\t}\n\tif (data instanceof dataForge.DataFrame) {\n\t\tdata = data.toArray();\n\t}\n\n\tdata = data\n\t\t.map(({ date, ...others }) => ({ date: dayjs(date), ...others }))\n\t\t.sort((a, b) => a.date.valueOf() - b.date.valueOf());\n\tlet config = {\n\t\t// columns: ['date', 'value', 'raw', 'flag'],\n\t\tvalues: data,\n\t\tindex: data.map(({ date }) => date.toDate()),\n\t\tconsiderAllRows: true\n\t};\n\tdataForge.DataFrame.call(this, config);\n}\n\nTimeseries.prototype = Object.create(dataForge.DataFrame.prototype);\nTimeseries.prototype.constructor = Timeseries;\n\n// Getters\nfunction getValueColumns() {\n\treturn this.detectTypes()\n\t\t.where(row => row.Type === \"number\")\n\t\t.distinct(row => row.Column)\n\t\t.getSeries(\"Column\")\n\t\t.toArray();\n}\nfunction interval() {\n\tconst computeInterval = window => window.last() - window.first();\n\tconst intervals = this.getIndex()\n\t\t.window(2)\n\t\t.select(computeInterval)\n\t\t.detectValues()\n\t\t.orderBy(row => -row.Frequency);\n\t// .orderBy(row => row.Value);\n\n\tlet val = intervals.first().Value;\n\n\treturn msToInterval(val);\n}\n\nfunction dateRange(unit, adjustment) {\n\tlet start = dayjs(this.first().date),\n\t\tend = dayjs(this.last().date);\n\tif (adjustment) {\n\t\tstart = start.startOf(adjustment);\n\t\tend = end.endOf(adjustment);\n\t}\n\treturn end.diff(start, unit);\n}\nTimeseries.prototype.getValueColumns = getValueColumns;\nTimeseries.prototype.getInterval = interval;\nTimeseries.prototype.getDateRange = dateRange;\n\n// Statistics\nfunction cvrsme(actual, simulated) {\n\tlet df = this.subset([actual, simulated])\n\t\t.resetIndex()\n\t\t.generateSeries({\n\t\t\tactual: row => row[actual] || 0,\n\t\t\tsimulated: row => row[simulated] || 0\n\t\t})\n\t\t.dropSeries([actual, simulated])\n\t\t.generateSeries({ diff: row => row.actual - row.simulated });\n\tlet n = df.count();\n\tlet p = 1.0;\n\tlet ybar = df.getSeries(\"actual\").sum() / n;\n\tlet v = Math.sqrt(df.getSeries(\"diff\").sum() / (n - p)) / ybar;\n\treturn v;\n}\nfunction nmbe(actual, simulated) {\n\tlet df = this.subset([actual, simulated])\n\t\t.resetIndex()\n\t\t.generateSeries({\n\t\t\tactual: row => row[actual] || 0,\n\t\t\tsimulated: row => row[simulated] || 0\n\t\t})\n\t\t.dropSeries([actual, simulated])\n\t\t.generateSeries({ diff: row => row.actual - row.simulated });\n\n\tlet n = df.count();\n\tlet p = 1.0;\n\tlet ybar = df.getSeries(\"actual\").sum() / n;\n\tlet b = df.getSeries(\"diff\").sum() / ((n - p) * ybar);\n\treturn b;\n}\nTimeseries.prototype.cvrsme = cvrsme;\nTimeseries.prototype.nmbe = nmbe;\n\n// Methods\nfunction calculateThresholdOptions({\n\tk,\n\tfilterZeros = true,\n\tfilterNegative = true\n} = {}) {\n\tlet noflags = this.where(\n\t\trow =>\n\t\t\trow.flag === null ||\n\t\t\trow.flag === undefined ||\n\t\t\t(Array.isArray(row.flag) && row.flag.length === 0)\n\t)\n\t\t.where(row => !isNaN(row.value) && row.value !== null)\n\t\t.getSeries(\"value\");\n\tif (filterZeros) noflags = noflags.where(value => value !== 0);\n\tif (filterNegative) noflags = noflags.where(value => value > 0);\n\tif (!k) {\n\t\tk =\n\t\t\tnoflags.count() < 1000\n\t\t\t\t? Math.floor(noflags.count() * 0.15)\n\t\t\t\t: Math.min(...[1000, Math.floor(noflags.count() * 0.02)]);\n\t}\n\tif (noflags.count() < 5) return {};\n\tlet { thresholds: esd } = rosnerTest(noflags.toArray(), k);\n\tlet { thresholds: box } = boxPlotTest(noflags.toArray());\n\tlet { thresholds: modz } = modifiedZScoreTest(noflags.toArray());\n\treturn { esd, box, modz };\n}\n\nfunction getBestThreshold() {\n\ttry {\n\t\tlet thresholds = this.calculateThresholdOptions();\n\t\tconst thresholdGroups = ckmeans(\n\t\t\t[\n\t\t\t\tget(thresholds, \"esd.upper\", null),\n\t\t\t\tget(thresholds, \"modz.upper\", null),\n\t\t\t\tget(thresholds, \"box.lowerOuter\", null),\n\t\t\t\tget(thresholds, \"box.upperOuter\", null)\n\t\t\t].filter(v => v),\n\t\t\t2\n\t\t);\n\t\tlet threshold_actual = max(\n\t\t\tthresholdGroups.reduce((a, b) => (a.length > b.length ? a : b))\n\t\t);\n\t\treturn threshold_actual;\n\t} catch (error) {\n\t\tconsole.error(error);\n\t\tthrow new Error(\"Cannot determine threshold\");\n\t}\n}\n\nfunction calculateStatistics(options = {}) {\n\tconst {\n\t\tcolumn = \"value\",\n\t\tfilterZeros = false,\n\t\tfilterNegative = true\n\t} = options;\n\tlet series = this.deflate(row => row[column]).where(value => !isNaN(value));\n\tif (filterNegative) series = series.where(value => value >= 0);\n\tif (filterZeros) series = series.where(value => value !== 0);\n\tlet median = series.median();\n\tlet mean = series.average();\n\tlet count = series.count();\n\tlet std = series.std();\n\tlet min = series.min();\n\tlet max = series.max();\n\tlet mad = medianAbsoluteDeviation(series.toArray());\n\tlet q1 = quantile(series.toArray(), 0.25);\n\tlet q3 = quantile(series.toArray(), 0.75);\n\tlet iqr = q3 - q1;\n\tlet stats = {\n\t\tmedian,\n\t\tmean,\n\t\tcount,\n\t\tstd,\n\t\tmin,\n\t\tmax,\n\t\tmad,\n\t\tq1,\n\t\tq3,\n\t\tiqr\n\t};\n\treturn stats;\n}\n\nTimeseries.prototype.calculateStatistics = calculateStatistics;\nTimeseries.prototype.calculateThresholdOptions = calculateThresholdOptions;\nTimeseries.prototype.getBestThreshold = getBestThreshold;\n\n// Chainable Methods\nfunction betweenDates(start, end) {\n\tstart = dayjs(start).toDate();\n\tend = dayjs(end).toDate();\n\tlet df = this.between(start, end);\n\treturn new Timeseries(df);\n}\nTimeseries.prototype.betweenDates = betweenDates;\n\nfunction transformAllSeries(adjustmentFunction, { exclude }) {\n\tlet df = this;\n\tlet columns = (columns = df\n\t\t.detectTypes()\n\t\t.where(row => row.Type === \"number\")\n\t\t.distinct(row => row.Column)\n\t\t.getSeries(\"Column\")\n\t\t.toArray());\n\tif (exclude && Array.isArray(exclude)) {\n\t\tcolumns = columns.filter(col => exclude.indexOf(col) === -1);\n\t}\n\tcolumns.forEach(col => {\n\t\tdf = df.transformSeries({\n\t\t\t[col]: value => {\n\t\t\t\tif (isNaN(value)) {\n\t\t\t\t\treturn value;\n\t\t\t\t} else {\n\t\t\t\t\treturn adjustmentFunction(value);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\treturn df;\n}\n\nTimeseries.prototype.transformAllSeries = transformAllSeries;\n\nfunction reset() {\n\tlet df = this.withSeries({\n\t\tvalue: row =>\n\t\t\trow.flag && Array.isArray(row.flag) && row.flag.length > 0\n\t\t\t\t? row.raw\n\t\t\t\t: row.value\n\t})\n\t\t.subset([\"date\", \"value\"])\n\t\t.where(row => !isNaN(row.value) && row.value !== null);\n\treturn new Timeseries(df);\n}\nTimeseries.prototype.reset = reset;\n\nfunction group(interval, toArray) {\n\tif ([\"hour\", \"day\", \"month\", \"year\"].indexOf(interval) === -1)\n\t\tthrow new Error(\"interval type not supported\");\n\tlet dateComparison = row => dayjs(row.date).startOf(interval);\n\tlet groups = this.groupBy(dateComparison);\n\treturn groups;\n}\n\nTimeseries.prototype.group = group;\n\nfunction removeOutliers({ series = \"value\", lower, upper } = {}) {\n\tif (lower > upper) throw new Error(\"thresholds invalid\");\n\tlet outlierCheck = (value, lower, upper) => value < lower || value > upper;\n\n\tlet outliers = this.where(row => outlierCheck(row[series], lower, upper))\n\t\t.generateSeries({\n\t\t\traw: row => row[series],\n\t\t\tflag: ({ flag = [] }) => [\"outlier\", ...flag]\n\t\t})\n\t\t.transformSeries({\n\t\t\t[series]: value => null\n\t\t});\n\n\tlet merged = this.merge(outliers);\n\treturn new Timeseries(merged);\n}\n\nTimeseries.prototype.removeOutliers = removeOutliers;\nTimeseries.prototype.clean = removeOutliers;\n\nfunction downsample([duration, value], fillType = \"sum\") {\n\tif ([\"hour\", \"day\", \"month\", \"year\"].indexOf(duration) === -1)\n\t\tthrow new Error(\"interval type not supported\");\n\tif ([\"sum\", \"avg\", \"median\"].indexOf(fillType) === -1) {\n\t\tthrow new Error(\"aggregation type not suppported, only:\");\n\t}\n\tlet dateComparison = row => row.date.startOf(duration);\n\tlet valueColumns = this.getValueColumns();\n\tif (value) {\n\t\tdateComparison = row => row.date.startOf(duration).add(value, duration);\n\t}\n\tlet df = this.groupBy(dateComparison)\n\t\t.select(group => {\n\t\t\tconst date = group.first().date.startOf(duration);\n\t\t\treturn {\n\t\t\t\tdate,\n\t\t\t\t...fromPairs([\n\t\t\t\t\t...valueColumns.map(col => {\n\t\t\t\t\t\tlet value;\n\t\t\t\t\t\tswitch (fillType) {\n\t\t\t\t\t\t\tcase \"median\":\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.median();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"avg\":\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.average();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t// sum\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.sum();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn [col, value];\n\t\t\t\t\t}),\n\t\t\t\t\t...group\n\t\t\t\t\t\t.getColumnNames()\n\t\t\t\t\t\t.filter(col => col !== \"date\")\n\t\t\t\t\t\t.filter(col => valueColumns.indexOf(col) === -1)\n\t\t\t\t\t\t.map(col => {\n\t\t\t\t\t\t\tlet value = group\n\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t.distinct()\n\t\t\t\t\t\t\t\t.toArray();\n\t\t\t\t\t\t\tif (value.length === 1) value = value[0];\n\t\t\t\t\t\t\treturn [col, value];\n\t\t\t\t\t\t})\n\t\t\t\t])\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => dayjs(row.date).toDate());\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.downsample = downsample;\nfunction downsampleClean([duration, value], threshold = 0.8) {\n\tif ([\"hour\", \"day\", \"month\", \"year\"].indexOf(duration) === -1)\n\t\tthrow new Error(\"interval type not supported\");\n\tlet dateComparison = row => row.date.startOf(duration);\n\tlet valueColumns = this.getValueColumns();\n\tif (value) {\n\t\tdateComparison = row => row.date.startOf(duration).add(value, duration);\n\t}\n\tlet df = this.groupBy(dateComparison)\n\t\t.select(group => {\n\t\t\tconst date = group.first().date.startOf(duration);\n\t\t\tlet quality = new Timeseries(group).dataQuality().setIndex(\"flag\");\n\t\t\tlet clean = quality.at(\"clean\").percent;\n\t\t\treturn {\n\t\t\t\tdate,\n\t\t\t\tvalue:\n\t\t\t\t\tclean >= threshold\n\t\t\t\t\t\t? group\n\t\t\t\t\t\t\t\t.deflate(row => row.value)\n\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t.sum()\n\t\t\t\t\t\t: null\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => dayjs(row.date).toDate());\n\treturn new Timeseries(df);\n}\nTimeseries.prototype.downsampleClean = downsampleClean;\nfunction upsample([duration, value], fillType = \"avg\") {\n\t// Dont use this b/c it has the raw and flag values\n\tlet df = this.fillGaps(\n\t\tgapExists([duration, value]),\n\t\tgapFill(fillType, [duration, value])\n\t);\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.upsample = upsample;\n\nfunction populate(value, type = \"avg\") {\n\tlet v;\n\tswitch (type) {\n\t\tcase \"fill\":\n\t\t\tv = value;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tv = value / this.count();\n\t\t\tbreak;\n\t}\n\tlet df = this.generateSeries({ value: row => v });\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.populate = populate;\n\nfunction reduceToValue(columnNames) {\n\tfunction chooseValue(row, columnNames = []) {\n\t\tlet values = columnNames.map(n => row[n]).filter(v => v);\n\t\treturn values[0] || 0;\n\t}\n\tlet df = this.generateSeries({\n\t\tvalue: row => chooseValue(row, columnNames)\n\t}).subset([\"date\", \"value\"]);\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.reduceToValue = reduceToValue;\n\nfunction cumulativeSum(columns) {\n\tif (!columns) columns = this.getValueColumns();\n\tif (columns & !Array.isArray(columns)) columns = [columns];\n\tlet df = this;\n\tconst cumulativeSum = sum => value => (sum += value);\n\tcolumns.forEach(s => {\n\t\tdf = df.withSeries(s, df.getSeries(s).select(cumulativeSum(0)));\n\t});\n\treturn new Timeseries(df);\n}\nTimeseries.prototype.cumulativeSum = cumulativeSum;\n\nfunction totalRows(series = [\"value\"], colname = \"total\") {\n\tlet ndf = this.generateSeries({\n\t\t[colname]: row => series.map(v => row[v] || 0).reduce((a, b) => a + b, 0)\n\t});\n\treturn new Timeseries(ndf);\n}\nTimeseries.prototype.totalRows = totalRows;\nTimeseries.prototype.totalRow = totalRows;\nTimeseries.prototype.totalColumns = totalRows;\n\n// Baseline Functions\nfunction rollingPercentChange(col = \"value\", decimal = true) {\n\tlet df = this;\n\tlet delta = df.withSeries(\"delta\", df.getSeries(\"value\").percentChange());\n\tif (decimal) delta = data.transformSeries({ delta: value => value / 100 });\n\treturn new Timeseries(delta);\n}\n\nTimeseries.prototype.rollingPercentChange = rollingPercentChange;\nfunction baselinePercentChange(baselineDF) {\n\t// Only Change in Year\n\tif (!(baselineDF instanceof Timeseries))\n\t\tbaselineDF = new Timeseries(baselineDF);\n\tlet dfwb;\n\tif (baselineDF.count() > 1) {\n\t\tlet interval = this.getInterval();\n\t\tlet baselineInterval = baselineDF.interval;\n\t\tif (!isEqual(interval, baselineInterval)) {\n\t\t\tconsole.error(interval, baselineInterval);\n\t\t\tthrow new Error(\"baseline and data intervals do not match\");\n\t\t}\n\t\tlet indexer;\n\t\tswitch (interval[0]) {\n\t\t\tcase \"day\":\n\t\t\t\tindexer = date => `${date.month()}-${date.date()}`;\n\t\t\t\tbreak;\n\t\t\tcase \"month\":\n\t\t\t\tindexer = date => date.month();\n\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tindexer = date => 0;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tlet indexedBaseline = baselineDF.withIndex(row => indexer(row.date));\n\t\tlet getBaselineValue = index => {\n\t\t\tlet at = indexedBaseline.at(index);\n\t\t\tif (at && has(at, \"value\")) {\n\t\t\t\treturn at.value;\n\t\t\t} else {\n\t\t\t\treturn indexedBaseline.getSeries(\"value\").average();\n\t\t\t}\n\t\t};\n\t\tdfwb = this.generateSeries({\n\t\t\tbaseline: row => getBaselineValue(indexer(row.date))\n\t\t});\n\t} else {\n\t\tdfwb = this.generateSeries({\n\t\t\tbaseline: row => baselineDF.first().value\n\t\t});\n\t}\n\tdfwb = dfwb.generateSeries({\n\t\tdelta: row => calculateChange(row.baseline, row.value)\n\t});\n\treturn new Timeseries(dfwb);\n}\n\nTimeseries.prototype.baselinePercentChange = baselinePercentChange;\nTimeseries.prototype.addBaselineDelta = baselinePercentChange;\n\nfunction annualIntensity(normalizeValue = 1) {\n\tlet interval = this.getInterval();\n\tlet annual = this.groupBy(row => row.date.year())\n\t\t.select(group => {\n\t\t\tlet startDate = group.first().date;\n\t\t\tlet endDate = group\n\t\t\t\t.last()\n\t\t\t\t.date.add(interval[1] || 1, interval[0] || \"month\");\n\t\t\tlet scaler = annualScale(startDate, endDate);\n\t\t\treturn {\n\t\t\t\tstartDate,\n\t\t\t\tendDate,\n\t\t\t\t...fromPairs(\n\t\t\t\t\tthis.getValueColumns().map(col => [\n\t\t\t\t\t\tcol,\n\t\t\t\t\t\t(group\n\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t.where(v => v)\n\t\t\t\t\t\t\t.sum() *\n\t\t\t\t\t\t\tscaler) /\n\t\t\t\t\t\t\tnormalizeValue\n\t\t\t\t\t])\n\t\t\t\t)\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.renameSeries({ startDate: \"date\" })\n\t\t.dropSeries(\"endDate\");\n\treturn new Timeseries(annual);\n}\n\nTimeseries.prototype.annualIntensity = annualIntensity;\n\n// Fill Functions\n\nfunction fillMissing() {\n\tlet df = this;\n\tlet startDate = df.first().date.toDate(),\n\t\tendDate = df.last().date.toDate();\n\tlet interval = df.getInterval();\n\tlet bdf = Timeseries.blank(\n\t\tstartDate,\n\t\tendDate,\n\t\tinterval,\n\t\t\"missing\"\n\t).withIndex(row => row.date.valueOf());\n\tlet m = bdf.merge(df.withIndex(row => row.date.valueOf())).generateSeries({\n\t\tflag: row =>\n\t\t\trow.value === null || row.value === undefined ? row.flag : undefined\n\t});\n\tm = new Timeseries(m);\n\treturn m;\n}\nTimeseries.prototype.fillMissing = fillMissing;\n\nfunction fillNull({ series = \"value\", value, callback }) {\n\tconst seriesCheck = row => row[series] === null || row[series] === undefined;\n\tif (callback) {\n\t\tlet df = this.generateSeries({\n\t\t\tflag: row =>\n\t\t\t\tseriesCheck(row) ? [\"fill\", ...(row.flag || [])] : row.flag,\n\t\t\t[series]: row => (seriesCheck(row) ? callback(row) : row[series])\n\t\t});\n\t\treturn new Timeseries(df);\n\t} else if (value) {\n\t\tlet df = this.generateSeries({\n\t\t\tflag: row => (seriesCheck(row) ? [\"fill\", ...(row.flag || [])] : row.flag)\n\t\t}).transformSeries({\n\t\t\t[series]: currentValue =>\n\t\t\t\tcurrentValue === null || currentValue === undefined\n\t\t\t\t\t? value\n\t\t\t\t\t: currentValue\n\t\t});\n\t\treturn new Timeseries(df);\n\t} else {\n\t\treturn this;\n\t}\n}\nTimeseries.prototype.fillNull = fillNull;\n\nfunction zeroFaultDetection(thresholdInterval) {\n\tif (!Array.isArray(thresholdInterval))\n\t\tthresholdInterval = [thresholdInterval, 1];\n\tthresholdInterval = intervalToMS(thresholdInterval);\n\tlet df = this;\n\tlet zeroFaultDates = df\n\t\t.where(row => row.value === 0)\n\t\t.ensureSeries(\n\t\t\t\"interval\",\n\t\t\tdf\n\t\t\t\t.where(row => row.value === 0)\n\t\t\t\t.getSeries(\"date\")\n\t\t\t\t.amountChange()\n\t\t)\n\t\t.where(v => v.interval <= thresholdInterval)\n\t\t.subset([\"date\"])\n\t\t.generateSeries({ value: row => null, flag: row => [\"zeroFault\"] });\n\n\tlet zeroFaultDF = new Timeseries(this.merge(zeroFaultDates));\n\treturn zeroFaultDF;\n}\n\nTimeseries.prototype.zeroFaultDetection = zeroFaultDetection;\n\nfunction dataQuality() {\n\tlet count = this.count();\n\tlet withFlags = this.where(r => Array.isArray(r.flag) && r.flag.length > 0)\n\t\t.groupBy(r => r.flag.toString())\n\t\t.select(group => ({\n\t\t\tflag: group.first().flag,\n\t\t\tcount: group.count(),\n\t\t\tpercent: group.count() / count\n\t\t}))\n\t\t.inflate();\n\tlet good = this.where(\n\t\tr =>\n\t\t\tr.flag === undefined ||\n\t\t\tr.flag === null ||\n\t\t\t(Array.isArray(r.flag) && r.flag.length === 0)\n\t).count();\n\tlet quality = withFlags\n\t\t.appendPair([\n\t\t\twithFlags.count(),\n\t\t\t{ flag: \"clean\", count: good, percent: good / count }\n\t\t])\n\t\t.orderByDescending(row => row.count);\n\treturn quality;\n}\n\nTimeseries.prototype.dataQuality = dataQuality;\n\nfunction monthlyWithQual() {\n\tlet interval = this.getInterval();\n\tlet ms = intervalToMS(interval);\n\tconst duration = \"month\";\n\tlet dateComparison = row =>\n\t\tdayjs(row.date)\n\t\t\t.startOf()\n\t\t\t.valueOf();\n\tlet ts = this.groupBy(dateComparison)\n\t\t.select(group => {\n\t\t\tconst date = dayjs(group.first().date)\n\t\t\t\t.startOf(duration)\n\t\t\t\t.toDate();\n\t\t\tlet fullCount = Math.floor(\n\t\t\t\tdayjs(date)\n\t\t\t\t\t.endOf(\"month\")\n\t\t\t\t\t.diff(dayjs(date), \"millisecond\") / ms\n\t\t\t);\n\t\t\tlet days = new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\n\t\t\tlet count = group\n\t\t\t\t.getSeries(\"value\")\n\t\t\t\t.where(v => v && v !== 0)\n\t\t\t\t.toArray().length;\n\t\t\tlet value = group\n\t\t\t\t.getSeries(\"value\")\n\t\t\t\t.where(v => !isNaN(v))\n\t\t\t\t.sum();\n\t\t\treturn {\n\t\t\t\tdate,\n\t\t\t\tvalue: isNaN(value) ? 0 : value,\n\t\t\t\tcount,\n\t\t\t\tfullCount,\n\t\t\t\tscore: count / fullCount\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => row.date.toDate());\n\treturn new Timeseries(ts);\n}\nTimeseries.prototype.monthlyWithQual = monthlyWithQual;\n\nfunction threeYearAverage(date, series = \"value\", defaultValue) {\n\tdate = dayjs(date);\n\tif (!defaultValue)\n\t\tdefaultValue = this.getSeries(series)\n\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t.average();\n\n\t// let months = df\n\t// \t.before(date.valueOf())\n\t// \t.where(row => dayjs(row.date).month() === date.month())\n\t// \t.where(row => row.score > 0.9)\n\t// \t.tail(3);\n\tlet months = this.before(date.toDate())\n\t\t.where(row => row.date.month() === date.month())\n\t\t.orderBy(row => dayjs(row.date))\n\t\t.tail(3);\n\t// .where(row => row.score > 0.9);\n\tif (months.count() > 0) {\n\t\tlet val = months\n\t\t\t.getSeries(series)\n\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t.average();\n\t\treturn val;\n\t} else {\n\t\treturn defaultValue;\n\t}\n}\nTimeseries.prototype.threeYearAverage = threeYearAverage;\n\nfunction averageFill() {\n\tlet df = this;\n\tlet avg = df\n\t\t// .where(row => row.score ?row.score >= 0.9)\n\t\t.getSeries(\"value\")\n\t\t.where(v => !isNaN(v) && v !== null)\n\t\t.average();\n\tlet monthlyAvg = df\n\t\t.generateSeries({\n\t\t\trollingAverage: row => df.threeYearAverage(row.date, \"value\", avg)\n\t\t})\n\t\t.generateSeries({\n\t\t\tflag: row => (row.value ? row.flag : [\"filled\", ...(row.flag || [])])\n\t\t})\n\t\t.generateSeries({\n\t\t\tvalue: row => (row.value ? row.value : row.rollingAverage)\n\t\t})\n\t\t.dropSeries([\"rollingAverage\"]);\n\treturn new Timeseries(monthlyAvg);\n}\n\nTimeseries.prototype.averageFill = averageFill;\nfunction toArray() {\n\tconst values = [];\n\tfor (const value of this.getContent().values) {\n\t\tif (value !== undefined) {\n\t\t\tvalues.push(value);\n\t\t}\n\t}\n\treturn values.map(({ date, ...others }) => ({\n\t\tdate: date.toDate(),\n\t\t...others\n\t}));\n}\nTimeseries.prototype.toArray = toArray;\n\nfunction atDate(date) {\n\tif (this.none()) {\n\t\treturn undefined;\n\t}\n\tdate = dayjs(date).valueOf();\n\n\tfor (const pair of this.getContent().pairs) {\n\t\tif (pair[0].valueOf() === date) {\n\t\t\treturn pair[1];\n\t\t}\n\t}\n\treturn undefined;\n}\nTimeseries.prototype.atDate = atDate;\n\n// Static Methods\nfunction blank(startDate, endDate, [duration, value = 1], flag) {\n\tif ([\"minute\", \"hour\", \"day\", \"month\", \"year\"].indexOf(duration) < 0) {\n\t\tconsole.error(interval);\n\t\tthrow new Error(\"interval type not supported\");\n\t}\n\tstartDate = dayjs(startDate);\n\tendDate = dayjs(endDate);\n\tlet dates = [startDate];\n\tlet interval = intervalToMS([duration, value]);\n\twhile (dates[dates.length - 1].valueOf() < endDate.valueOf()) {\n\t\tdates.push(dayjs(dates[dates.length - 1]).add(value, duration));\n\t}\n\tlet df = new Timeseries(dates.map(date => ({ date })));\n\n\tif (flag) {\n\t\tdf = new Timeseries(\n\t\t\tdf.generateSeries({\n\t\t\t\tflag: row => [flag]\n\t\t\t})\n\t\t);\n\t}\n\n\treturn df;\n}\nTimeseries.blank = blank;\nfunction aggregate(dataframes) {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df => new Timeseries(df));\n\tconst valueColumns = new Set(\n\t\tdataframes.map(df => df.getValueColumns()).reduce((a, b) => a.concat(b), [])\n\t);\n\tconst concatenated = dataForge.DataFrame.concat(dataframes)\n\t\t.groupBy(row => row.date)\n\t\t.select(group => {\n\t\t\tconst date = group.first().date;\n\t\t\tlet o = { date };\n\t\t\tvalueColumns.forEach(c => (o[c] = group.deflate(row => row[c]).sum()));\n\t\t\tgroup\n\t\t\t\t.getColumnNames()\n\t\t\t\t.filter(col => col !== \"date\")\n\t\t\t\t.filter(col => valueColumns.has(col) === -1)\n\t\t\t\t.forEach(col => {\n\t\t\t\t\tlet value = group\n\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t.distinct()\n\t\t\t\t\t\t.toArray();\n\t\t\t\t\tif (value.length === 1) value = value[0];\n\t\t\t\t\to[col] = value;\n\t\t\t\t\treturn;\n\t\t\t\t});\n\t\t\treturn o;\n\t\t})\n\t\t.inflate();\n\treturn new Timeseries(concatenated);\n}\n\nTimeseries.aggregate = aggregate;\nTimeseries.concat = dataframes => {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df =>\n\t\tnew Timeseries(df).withIndex(row => row.date.valueOf())\n\t);\n\tlet df = dataForge.DataFrame.concat(dataframes);\n\treturn new Timeseries(df);\n};\nTimeseries.merge = dataframes => {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df =>\n\t\tnew Timeseries(df).withIndex(row => row.date.valueOf())\n\t);\n\tlet df = dataForge.DataFrame.merge(dataframes);\n\treturn new Timeseries(df);\n};\n"],"names":["intervalToMS","unit","value","start","dayjs","add","diff","valueFiller","fillType","startValue","endValue","entryIndex","numEntries","overrideValue","dateFunction","date","flag","indexOf","Error","fromPairs","toPairs","map","key","val","averageMonthlyMap","df","Map","group","select","month","first","getSeries","where","v","average","toArray","annualMonthlyAverageMap","groupBy","row","year","startOf","ts","Timeseries","downsample","avg","set","monthlyRollingAverageMap","years","series","aggregator","validOnly","months","toDate","Boolean","inflate","withIndex","bake","data","values","rollingWindow","window","last","has","forEach","before","count","fillMonthlyByMap","monthMap","get","fillMonthlyBAnnualyMap","annualMonthlyMap","mean","m","reduce","a","b","concat","pad","annualAverage","subset","after","subtract","r","hour","minute","appendPair","rval","deflate","x","std","sampleStandardDeviation","_mean","ndf","generateSeries","ares","R","DataFrame","Math","abs","max","lambdaTest","n","i","alpha","p","pValue","t","degreeOfFreedom","Studentt","inv","tValue","lambda","sqrt","pow","modz","mad","median","modifiedZScoreTest","_median","medianAbsoluteDeviation","outliers","sort","filter","thresholds","upper","min","Infinity","lower","calculateChange","baseline","options","dataForge","config","others","valueOf","index","considerAllRows","call","this","removeOutliers","outlierCheck","raw","transformSeries","[object Object]","merge","totalRows","colname","baselinePercentChange","baselineDF","dfwb","indexer","interval","getInterval","baselineInterval","isEqual","console","error","indexedBaseline","at","getBaselineValue","delta","prototype","Object","create","constructor","getValueColumns","detectTypes","Type","distinct","Column","ms","end","getIndex","detectValues","orderBy","Frequency","Value","ceil","getDateRange","adjustment","endOf","cvrsme","actual","simulated","resetIndex","dropSeries","ybar","sum","nmbe","calculateStatistics","column","filterZeros","filterNegative","isNaN","q1","quantile","q3","iqr","calculateThresholdOptions","k","noflags","Array","isArray","length","floor","esd","dataset","newdf","dataframe","trip","pair","assign","push","outlierValues","outlier","takeWhile","iterations","rosnerTest","box","lowerInner","upperInner","lowerOuter","upperOuter","getBestThreshold","thresholdGroups","ckmeans","betweenDates","between","transformAllSeries","adjustmentFunction","exclude","columns","col","reset","withSeries","clean","duration","dateComparison","valueColumns","getColumnNames","downsampleClean","threshold","dataQuality","setIndex","percent","upsample","fillGaps","durationValue","pairA","pairB","startDate","gapExists","endDate","newEntries","e","gapFill","populate","type","reduceToValue","columnNames","chooseValue","cumulativeSum","s","totalRow","totalColumns","rollingPercentChange","decimal","percentChange","addBaselineDelta","annualIntensity","normalizeValue","scaler","annualScale","renameSeries","fillMissing","blank","undefined","fillNull","callback","seriesCheck","currentValue","zeroFaultDetection","thresholdInterval","zeroFaultDates","ensureSeries","amountChange","withFlags","toString","good","orderByDescending","monthlyWithQual","fullCount","Date","getFullYear","getMonth","getDate","score","threeYearAverage","defaultValue","tail","averageFill","rollingAverage","getContent","atDate","none","pairs","dates","aggregate","dataframes","Set","o","c"],"mappings":"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"}
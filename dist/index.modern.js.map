{"version":3,"file":"index.modern.js","sources":["../src/lib/Timeseries.interval.js","../src/lib/Timeseries.fill.js","../src/lib/Timeseries.statistics.js","../src/index.js","../src/lib/misc.js","../src/lib/Timeseries.zero.js"],"sourcesContent":["import dayjs from \"dayjs\";\n\nconst msToInterval = ms => {\n\tlet start = dayjs();\n\tlet end = dayjs().add(ms);\n\tif (end.diff(start, \"month\", true) >= 11) {\n\t\treturn [\"year\", Math.ceil(end.diff(start, \"year\", true))];\n\t} else if (end.diff(start, \"day\", true) >= 28) {\n\t\treturn [\"month\", Math.ceil(end.diff(start, \"month\", true))];\n\t} else if (end.diff(start, \"hour\", true) >= 23) {\n\t\treturn [\"day\", Math.ceil(end.diff(start, \"day\", true))];\n\t} else if (end.diff(start, \"minute\", true) >= 55) {\n\t\treturn [\"hour\", Math.ceil(end.diff(start, \"hour\", true))];\n\t} else {\n\t\treturn [\"minute\", end.diff(start, \"minute\")];\n\t}\n};\nconst intervalToMS = ([unit, value]) => {\n\tlet start = dayjs();\n\tlet end = dayjs().add(value, unit);\n\treturn end.diff(start);\n};\nfunction calculateInterval(df, startDate, endDate) {\n\tif (!startDate) startDate = df.first.date;\n\tif (!endDate) endDate = df.last.date;\n\tfunction computeInterval(window) {\n\t\treturn window.last() - window.first();\n\t}\n\tconst intervals = df\n\t\t.between(startDate, endDate)\n\t\t.getIndex()\n\t\t.window(2)\n\t\t.select(computeInterval)\n\t\t.detectValues()\n\t\t.orderBy(row => row.Frequency);\n\n\tlet val = intervals.last().Value;\n\treturn msToInterval(val);\n}\nexport { msToInterval, intervalToMS, calculateInterval };\n","import dayjs from \"dayjs\";\nimport fromPairs from \"lodash/fromPairs\";\nimport toPairs from \"lodash/toPairs\";\nconst gapExists = ([duration, durationValue = 1]) => (pairA, pairB) => {\n\tconst startDate = pairA[0];\n\tconst endDate = pairB[0];\n\tlet gapSize = Math.floor(\n\t\tdayjs(endDate).diff(startDate, duration, true) / durationValue\n\t);\n\n\tif (gapSize > 0) return true;\n\treturn false;\n};\nconst gapExists_old = (interval, maxGap) => (pairA, pairB) => {\n\tconst startDate = pairA[0];\n\tconst endDate = pairB[0];\n\tlet gapSize;\n\tif (interval === \"quarterHour\") {\n\t\tgapSize = Math.floor(dayjs(endDate).diff(startDate, \"minutes\") / 15);\n\t} else {\n\t\tgapSize = dayjs(endDate).diff(startDate, interval);\n\t}\n\tif (maxGap && maxGap > gapSize) return false;\n\tif (gapSize > 0) return true;\n\treturn false;\n};\n\nconst gapFillNull = ([duration, durationValue], flag) => (pairA, pairB) => {\n\tconst startDate = pairA[0];\n\tconst endDate = pairB[0];\n\tlet gapSize = Math.floor(\n\t\tdayjs(endDate).diff(startDate, duration) / durationValue\n\t);\n\tconst numEntries = gapSize - 1;\n\tconst newEntries = [];\n\n\tfor (let entryIndex = 0; entryIndex < numEntries; ++entryIndex) {\n\t\tlet date = dayjs(startDate).add((entryIndex + 1) * durationValue, duration);\n\t\tnewEntries.push([\n\t\t\tdate.valueOf(),\n\t\t\t{ date, value: undefined, ...(flag && { flag: [flag] }) }\n\t\t]);\n\t}\n\treturn newEntries;\n};\nconst gapFillBlank = gapFillNull;\n\nconst valueFiller = (\n\tfillType,\n\t{ startValue, endValue, entryIndex, numEntries },\n\t{ overrideValue, dateFunction, date, flag }\n) => {\n\tif (\n\t\t[\"pad\", \"interpolate\", \"average\", \"dateFunction\", \"value\"].indexOf(\n\t\t\tfillType\n\t\t) === -1\n\t) {\n\t\tthrow new Error(\"fill Type not supported\");\n\t}\n\tlet value;\n\tif (fillType === \"pad\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\treturn [key, startValue[key]];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", \"pad\"];\n\t} else if (fillType === \"interpolate\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv =\n\t\t\t\t\tstartValue[key] +\n\t\t\t\t\t(entryIndex + 1) *\n\t\t\t\t\t\t((endValue[key] - startValue[key]) / (numEntries + 1));\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"average\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv = (startValue[key] + endValue[key]) / numEntries;\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"dateFunction\" && dateFunction) {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv = dateFunction(date);\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"value\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv;\n\t\t\t\tif (typeof overrideValue === \"number\") {\n\t\t\t\t\tnv = overrideValue;\n\t\t\t\t} else {\n\t\t\t\t\tnv = overrideValue[key];\n\t\t\t\t}\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\treturn [key, null];\n\t\t\t})\n\t\t);\n\t\tflag = [\"fill\"];\n\t}\n\treturn { ...value, flag };\n};\n\nconst gapFill = (\n\tfillType,\n\t[duration, durationValue],\n\t{ overrideValue, dateFunction, flag } = {}\n) => (pairA, pairB) => {\n\t// Fill values forward.\n\n\tconst startDate = dayjs(pairA[0]);\n\tconst endDate = dayjs(pairB[0]);\n\tlet gapSize = Math.floor(\n\t\tdayjs(endDate).diff(startDate, duration) / durationValue\n\t);\n\tconst numEntries = gapSize - 1;\n\tconst startValue = pairA[1];\n\tconst endValue = pairB[1];\n\tconst newEntries = [];\n\tfor (let entryIndex = 0; entryIndex < numEntries; ++entryIndex) {\n\t\tlet adjustment = valueFiller(\n\t\t\t\tfillType,\n\t\t\t\t{ startValue, endValue, entryIndex, numEntries },\n\t\t\t\t{\n\t\t\t\t\toverrideValue,\n\t\t\t\t\tdateFunction,\n\t\t\t\t\tflag\n\t\t\t\t}\n\t\t\t),\n\t\t\tdate = dayjs(startDate)\n\t\t\t\t.add((entryIndex + 1) * durationValue, duration)\n\t\t\t\t.toDate();\n\t\tlet e = [date.valueOf(), Object.assign({}, adjustment, { date })];\n\t\tnewEntries.push(e);\n\t}\n\n\treturn newEntries;\n};\n\nexport { gapExists, gapFill, gapFillBlank, gapFillNull, valueFiller };\n","// Source: https://www.itl.nist.gov/div898/handbook/eda/section3/eda35h3.htm\n// https://vsp.pnnl.gov/help/Vsample/Rosners_Outlier_Test.htm\n// https://www.itl.nist.gov/div898/handbook/prc/section1/prc16.htm\n// https://www.math.ucla.edu/~tom/distributions/KolSmir2.html?\nimport { DataFrame } from \"data-forge\";\nimport {\n  sampleStandardDeviation,\n  mean as _mean,\n  max,\n  median as _median,\n  medianAbsoluteDeviation,\n  quantile\n} from \"simple-statistics\";\nimport { Studentt } from \"distributions\";\nimport dayjs from \"dayjs\";\n\nfunction rval(df) {\n  let values = df.deflate(row => row.x).toArray();\n  let std = sampleStandardDeviation(values);\n  let mean = _mean(values);\n  if (std === 0) {\n    let ndf = df.generateSeries({ ares: row => 0 });\n    return { R: 0, std, mean, df: ndf };\n  }\n  let ndf = new DataFrame({\n    values: values.map(x => ({\n      x,\n      ares: Math.abs(x - mean) / std\n    }))\n  });\n  let R = max(ndf.deflate(row => row.ares).toArray());\n  return { R, df: ndf, std, mean };\n}\n\nfunction pValue(n, i, alpha) {\n  let p = 1 - alpha / (2 * (n - i + 1));\n  return p;\n}\nfunction tValue(p, degreeOfFreedom) {\n  let qt = new Studentt(degreeOfFreedom);\n  let t = qt.inv(p);\n  return t;\n}\n//\nfunction lambdaTest(n, i, alpha) {\n  let p = pValue(n, i, alpha);\n  let df = n - i - 1;\n  let t = tValue(p, df);\n  let lambda =\n    (t * (n - i)) /\n    Math.sqrt((n - i - 1 + Math.pow(t, 2)) * (n - i + 1));\n  return { lambda, p, t };\n}\nfunction rosnerTest(dataset = [], k = 10, alpha = 0.05) {\n  let dataframe = new DataFrame({\n    values: dataset.map(x => ({ x }))\n  });\n  let n = dataframe.getSeries(\"x\").count();\n  let newdf;\n  let i = 1;\n  let outliers = [];\n  let trip = false;\n  while (i <= k) {\n    let pair = {};\n    let s = Date.now();\n    if (i === 1) {\n      let { R, df, mean, std } = rval(dataframe);\n      newdf = df.where(row => row.ares !== R);\n      pair = Object.assign({}, pair, {\n        mean,\n        std,\n        Value: df\n          .where(row => row.ares === R)\n          .getSeries(\"x\")\n          .first(),\n        R\n      });\n    } else {\n      let { R, df, mean, std } = rval(newdf);\n      newdf = df.where(row => row.ares !== R);\n      pair = Object.assign({}, pair, {\n        mean,\n        std,\n        Value: df\n          .where(row => row.ares === R)\n          .getSeries(\"x\")\n          .first(),\n        R\n      });\n    }\n    let { lambda, p, t } = lambdaTest(n, i, alpha);\n    pair = Object.assign({}, pair, { lambda });\n    outliers.push(pair);\n    if (trip && pair.R > pair.lambda) trip = false;\n    if (pair.R === 0) break;\n    if (pair.R < pair.lambda) {\n      if (trip) {\n        break;\n      } else {\n        trip = true;\n      }\n    }\n    i++;\n  }\n  outliers = new DataFrame(outliers)\n    .generateSeries({\n      outlier: row => row.R > row.lambda\n    })\n    .takeWhile(row => row.outlier);\n  let outlierValues = outliers\n    .where(row => row.Value > 0)\n    .deflate(row => row.Value);\n  let thresholds = {\n    lower: 0,\n    upper:\n      outlierValues.count() > 0 ? outlierValues.min() : Infinity\n  };\n  return {\n    outliers,\n    thresholds,\n    iterations: i\n  };\n}\nconst modz = (value, mad, median) => {\n  return (0.6745 * (value - median)) / mad;\n};\nfunction modifiedZScoreTest(values) {\n  let median = _median(values);\n  let mad = medianAbsoluteDeviation(values);\n  values = values\n    .sort((a, b) => b - a)\n    .filter(v => v > 0)\n    .map(v => [v, modz(v, mad, median)]);\n  let outliers = values.filter(\n    ([v, modz]) => Math.abs(modz) >= 3.5\n  );\n  let upper = Math.min(\n    ...[Infinity, ...outliers.map(v => v[0])]\n  );\n  // let score,\n  // \tvalue,\n  // \tthreshold = Infinity,\n  // \tindex = 0;\n  // do {\n  // \tvalue = values[index];\n  // \tscore = modz(value, mad, median);\n  // \tif (Math.abs(score) >= 3.5) threshold = value;\n  // } while (score >= 3.5);\n  return { thresholds: { upper, lower: 0 } };\n}\nfunction boxPlotTest(values) {\n  let q1 = quantile(values, 0.25);\n  let q3 = quantile(values, 0.75);\n  let iqr = q3 - q1;\n  return {\n    thresholds: {\n      lowerInner: q1 - 1.5 * iqr,\n      upperInner: q1 - 3 * iqr,\n      lowerOuter: q3 + 1.5 * iqr,\n      upperOuter: q3 + 3 * iqr\n    }\n  };\n}\nfunction calculateOutlierThresholds(\n  df,\n  { k, filterZeros = true } = {}\n) {\n  let values = df\n    .where(\n      row =>\n        row.flag === null ||\n        row.flag === undefined ||\n        Array.isArray(row.flag)\n    )\n    .where(row => !isNaN(row.value) && row.value !== null)\n    .getSeries(\"value\")\n    .bake();\n  if (filterZeros) values = values.where(value => value > 0);\n  if (!k) {\n    k =\n      values.count() < 1000\n        ? Math.floor(values.count() * 0.15)\n        : Math.min(...[1000, Math.floor(values.count() * 0.02)]);\n  }\n  if (values.count < 5) return {};\n  let { outliers, threshold } = rosnerTest(values.toArray(), k);\n  return { outliers, threshold };\n}\n\nfunction zeroCheck(df, threshold = 2) {\n  let zeroGroups = df\n    .variableWindow((a, b) => {\n      return a.value === b.value && a.value === 0;\n    })\n    .where(window => window.getIndex().count() >= threshold);\n  let zeroSummary = zeroGroups\n    .select(window => ({\n      start: window.first().date,\n      end: window.last().date,\n      count: window.count()\n    }))\n    .inflate(); // Series -> dataframe.\n  // .toArray()\n  return { zeroSummary, zeroGroups };\n}\n\nfunction zeroReplacement(df, threshold) {\n  let { zeroGroups } = zeroCheck(df, threshold);\n  zeroGroups.forEach(dff => {\n    dff = dff.transformSeries({\n      value: value => null,\n      flag: value => [\"zero\"]\n    });\n    df = DataFrame.merge([df, dff]);\n  });\n  return df;\n}\nfunction isOutlier(value, { lower, upper }) {\n  if (value < lower || value >= upper) {\n    return true;\n  }\n  return false;\n}\nfunction validMean(df) {\n  let values = df\n    .getSeries(\"value\")\n    .where(value => typeof value === \"number\");\n  return values.average();\n}\nfunction validMonthlyMeanMap(df) {\n  let dateComparison = row =>\n    dayjs(row.date)\n      .startOf(\"month\")\n      .month();\n\n  df = df\n    .where(row => typeof row.value === \"number\")\n    .groupBy(dateComparison)\n    .select(group => ({\n      month: new Date(group.first().date).getMonth(),\n      value: group.deflate(row => row.value).average()\n    }));\n  return new Map(\n    df.toArray().map(({ month, value }) => [month, value])\n  );\n}\n\nfunction quality(df) {\n  let count = df.getIndex().count();\n  let valid = df\n    .getSeries(\"flag\")\n    .where(\n      value =>\n        value === null ||\n        (Array.isArray(value) && value.length === 0)\n    )\n    .count();\n  let missing = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"missing\") !== -1)\n    .count();\n  let dirty = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"clean\") !== -1)\n    .count();\n  let zerod = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"zero\") !== -1)\n    .count();\n  let breakdown = {\n    valid: valid / count,\n    missing: missing / count,\n    invalid: (dirty + zerod) / count\n  };\n  let report = {\n    accuracy: (1 - dirty / count) * 4,\n    completeness: 4 * breakdown.valid,\n    consistency: 4 * ((count - missing - zerod) / count)\n  };\n  return { breakdown, report, count };\n}\n\nexport {\n  rosnerTest,\n  modifiedZScoreTest,\n  boxPlotTest,\n  calculateOutlierThresholds,\n  zeroReplacement,\n  isOutlier,\n  validMean,\n  validMonthlyMeanMap,\n  quality\n};\n","import dayjs from \"dayjs\";\nimport dataForge from \"data-forge\";\nimport { msToInterval, intervalToMS } from \"./lib/Timeseries.interval\";\nimport isEqual from \"lodash/isEqual\";\nimport has from \"lodash/has\";\nimport fromPairs from \"lodash/fromPairs\";\nimport { gapExists, gapFill, gapFillBlank } from \"./lib/Timeseries.fill\";\nimport { medianAbsoluteDeviation, quantile } from \"simple-statistics\";\nimport {\n\trosnerTest,\n\tboxPlotTest,\n\tmodifiedZScoreTest\n} from \"./lib/Timeseries.statistics\";\nimport { annualScale, calculateChange } from \"./lib/misc\";\nimport { zeroCheck } from \"./lib/Timeseries.zero\";\nimport { timingSafeEqual } from \"crypto\";\n\nexport default Timeseries;\n\nfunction Timeseries(data) {\n\tif (data instanceof Timeseries) {\n\t\treturn data;\n\t}\n\tif (data instanceof dataForge.DataFrame) {\n\t\tdata = data.toArray();\n\t}\n\n\tdata = data\n\t\t.map(({ date, ...others }) => ({ date: dayjs(date), ...others }))\n\t\t.sort((a, b) => a.date.valueOf() - b.date.valueOf());\n\tlet config = {\n\t\t// columns: ['date', 'value', 'raw', 'flag'],\n\t\tvalues: data,\n\t\tindex: data.map(({ date }) => date.toDate()),\n\t\tconsiderAllRows: true\n\t};\n\tdataForge.DataFrame.call(this, config);\n}\n\nTimeseries.prototype = Object.create(dataForge.DataFrame.prototype);\nTimeseries.prototype.constructor = Timeseries;\n\n// Getters\nfunction getValueColumns() {\n\treturn this.detectTypes()\n\t\t.where(row => row.Type === \"number\")\n\t\t.distinct(row => row.Column)\n\t\t.getSeries(\"Column\")\n\t\t.toArray();\n}\nfunction interval() {\n\tconst computeInterval = window => window.last() - window.first();\n\tconst intervals = this.getIndex()\n\t\t.window(2)\n\t\t.select(computeInterval)\n\t\t.detectValues()\n\t\t.orderBy(row => -row.Frequency);\n\t// .orderBy(row => row.Value);\n\n\tlet val = intervals.first().Value;\n\n\treturn msToInterval(val);\n}\n\nfunction dateRange(unit, adjustment) {\n\tlet start = dayjs(this.first().date),\n\t\tend = dayjs(this.last().date);\n\tif (adjustment) {\n\t\tstart = start.startOf(adjustment);\n\t\tend = end.endOf(adjustment);\n\t}\n\treturn end.diff(start, unit);\n}\nTimeseries.prototype.getValueColumns = getValueColumns;\nTimeseries.prototype.getInterval = interval;\nTimeseries.prototype.getDateRange = dateRange;\n\n// Methods\nfunction calculateThresholdOptions({\n\tk,\n\tfilterZeros = true,\n\tfilterNegative = true\n} = {}) {\n\tlet noflags = this.where(\n\t\trow =>\n\t\t\trow.flag === null ||\n\t\t\trow.flag === undefined ||\n\t\t\t(Array.isArray(row.flag) && row.flag.length === 0)\n\t)\n\t\t.where(row => !isNaN(row.value) && row.value !== null)\n\t\t.getSeries(\"value\");\n\tif (filterZeros) noflags = noflags.where(value => value !== 0);\n\tif (filterNegative) noflags = noflags.where(value => value > 0);\n\tif (!k) {\n\t\tk =\n\t\t\tnoflags.count() < 1000\n\t\t\t\t? Math.floor(noflags.count() * 0.15)\n\t\t\t\t: Math.min(...[1000, Math.floor(noflags.count() * 0.02)]);\n\t}\n\tif (noflags.count() < 5) return {};\n\tlet { thresholds: esd } = rosnerTest(noflags.toArray(), k);\n\tlet { thresholds: box } = boxPlotTest(noflags.toArray());\n\tlet { thresholds: modz } = modifiedZScoreTest(noflags.toArray());\n\treturn { esd, box, modz };\n}\nfunction calculateStatistics(options = {}) {\n\tconst {\n\t\tcolumn = \"value\",\n\t\tfilterZeros = false,\n\t\tfilterNegative = true\n\t} = options;\n\tlet series = this.deflate(row => row[column]).where(value => !isNaN(value));\n\tif (filterNegative) series = series.where(value => value >= 0);\n\tif (filterZeros) series = series.where(value => value !== 0);\n\tlet median = series.median();\n\tlet mean = series.average();\n\tlet count = series.count();\n\tlet std = series.std();\n\tlet min = series.min();\n\tlet max = series.max();\n\tlet mad = medianAbsoluteDeviation(series.toArray());\n\tlet q1 = quantile(series.toArray(), 0.25);\n\tlet q3 = quantile(series.toArray(), 0.75);\n\tlet iqr = q3 - q1;\n\tlet stats = {\n\t\tmedian,\n\t\tmean,\n\t\tcount,\n\t\tstd,\n\t\tmin,\n\t\tmax,\n\t\tmad,\n\t\tq1,\n\t\tq3,\n\t\tiqr\n\t};\n\treturn stats;\n}\n\nTimeseries.prototype.calculateStatistics = calculateStatistics;\nTimeseries.prototype.calculateThresholdOptions = calculateThresholdOptions;\n\n// Chainable Methods\nfunction transformAllSeries(adjustmentFunction, { exclude }) {\n\tlet df = this;\n\tlet columns = (columns = df\n\t\t.detectTypes()\n\t\t.where(row => row.Type === \"number\")\n\t\t.distinct(row => row.Column)\n\t\t.getSeries(\"Column\")\n\t\t.toArray());\n\tif (exclude && Array.isArray(exclude)) {\n\t\tcolumns = columns.filter(col => exclude.indexOf(col) === -1);\n\t}\n\tcolumns.forEach(col => {\n\t\tdf = df.transformSeries({\n\t\t\t[col]: value => {\n\t\t\t\tif (isNaN(value)) {\n\t\t\t\t\treturn value;\n\t\t\t\t} else {\n\t\t\t\t\treturn adjustmentFunction(value);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\treturn df;\n}\n\nTimeseries.prototype.transformAllSeries = transformAllSeries;\n\nfunction reset() {\n\tlet df = this.withSeries({\n\t\tvalue: row =>\n\t\t\trow.flag && Array.isArray(row.flag) && row.flag.length > 0\n\t\t\t\t? row.raw\n\t\t\t\t: row.value\n\t})\n\t\t.subset([\"date\", \"value\"])\n\t\t.where(row => !isNaN(row.value) && row.value !== null);\n\treturn new Timeseries(df);\n}\nTimeseries.prototype.reset = reset;\n\nfunction group(interval, toArray) {\n\tif ([\"hour\", \"day\", \"month\", \"year\"].indexOf(interval) === -1)\n\t\tthrow new Error(\"interval type not supported\");\n\tlet dateComparison = row => dayjs(row.date).startOf(interval);\n\tlet groups = this.groupBy(dateComparison);\n\treturn groups;\n}\n\nTimeseries.prototype.group = group;\n\nfunction removeOutliers({\n\tcolumn = \"value\",\n\tlowerThreshold,\n\tupperThreshold\n} = {}) {\n\tif (lowerThreshold > upperThreshold) throw new Error(\"thresholds invalid\");\n\tlet outlierCheck = (value, lowerThreshold, upperThreshold) =>\n\t\tvalue < lowerThreshold || value > upperThreshold;\n\n\tlet outliers = this.where(row =>\n\t\toutlierCheck(row[column], lowerThreshold, upperThreshold)\n\t)\n\t\t.generateSeries({\n\t\t\traw: row => row[column],\n\t\t\tflag: ({ flag = [] }) => [\"outlier\", ...flag]\n\t\t})\n\t\t.transformSeries({\n\t\t\t[column]: row => null\n\t\t});\n\t// let df = this.withSeries(\"raw\", outliers.getSeries(\"raw\")).withSeries(\n\t// \t\"flag\",\n\t// \toutliers.getSeries(\"flag\")\n\t// );\n\n\tlet merged = this.merge(outliers);\n\treturn new Timeseries(merged.toArray());\n}\n\nTimeseries.prototype.removeOutliers = removeOutliers;\nTimeseries.prototype.clean = removeOutliers;\n\nfunction downsample([duration, value], fillType = \"sum\") {\n\tif ([\"hour\", \"day\", \"month\", \"year\"].indexOf(duration) === -1)\n\t\tthrow new Error(\"interval type not supported\");\n\tif ([\"sum\", \"avg\", \"median\"].indexOf(fillType) === -1) {\n\t\tthrow new Error(\"aggregation type not suppported, only:\");\n\t}\n\tlet dateComparison = row => row.date.startOf(duration);\n\tlet valueColumns = this.getValueColumns();\n\tif (value) {\n\t\tdateComparison = row => row.date.startOf(duration).add(value, duration);\n\t}\n\tlet df = this.groupBy(dateComparison)\n\t\t.select(group => {\n\t\t\tconst date = group.first().date.startOf(duration);\n\t\t\treturn {\n\t\t\t\tdate,\n\t\t\t\t...fromPairs([\n\t\t\t\t\t...valueColumns.map(col => {\n\t\t\t\t\t\tlet value;\n\t\t\t\t\t\tswitch (fillType) {\n\t\t\t\t\t\t\tcase \"median\":\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.median();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"avg\":\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.average();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t// sum\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.sum();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn [col, value];\n\t\t\t\t\t}),\n\t\t\t\t\t...group\n\t\t\t\t\t\t.getColumnNames()\n\t\t\t\t\t\t.filter(col => col !== \"date\")\n\t\t\t\t\t\t.filter(col => valueColumns.indexOf(col) === -1)\n\t\t\t\t\t\t.map(col => {\n\t\t\t\t\t\t\tlet value = group\n\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t.distinct()\n\t\t\t\t\t\t\t\t.toArray();\n\t\t\t\t\t\t\tif (value.length === 1) value = value[0];\n\t\t\t\t\t\t\treturn [col, value];\n\t\t\t\t\t\t})\n\t\t\t\t])\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => dayjs(row.date).toDate());\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.downsample = downsample;\n\nfunction upsample([duration, value], fillType = \"avg\") {\n\t// Dont use this b/c it has the raw and flag values\n\tlet df = this.fillGaps(\n\t\tgapExists([duration, value]),\n\t\tgapFill(fillType, [duration, value])\n\t);\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.upsample = upsample;\n\nfunction populate(value, type = \"avg\") {\n\tlet v;\n\tswitch (type) {\n\t\tcase \"fill\":\n\t\t\tv = value;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tv = value / this.count();\n\t\t\tbreak;\n\t}\n\tlet df = this.generateSeries({ value: row => v });\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.populate = populate;\n\nfunction reduceToValue(columnNames) {\n\tfunction chooseValue(row, columnNames = []) {\n\t\tlet values = columnNames.map(n => row[n]).filter(v => v);\n\t\treturn values[0] || 0;\n\t}\n\tlet df = this.generateSeries({\n\t\tvalue: row => chooseValue(row, columnNames)\n\t}).subset([\"date\", \"value\"]);\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.reduceToValue = reduceToValue;\n\n// Baseline Functions\n\nfunction addBaselineDelta(baselineDF) {\n\t// Only Change in Year\n\tif (!(baselineDF instanceof Timeseries))\n\t\tbaselineDF = new Timeseries(baselineDF);\n\tlet dfwb;\n\tif (baselineDF.count() > 1) {\n\t\tlet interval = this.getInterval();\n\t\tlet baselineInterval = baselineDF.interval;\n\t\tif (!isEqual(interval, baselineInterval)) {\n\t\t\tconsole.error(interval, baselineInterval);\n\t\t\tthrow new Error(\"baseline and data intervals do not match\");\n\t\t}\n\t\tlet indexer;\n\t\tswitch (interval[0]) {\n\t\t\tcase \"day\":\n\t\t\t\tindexer = date => `${date.month()}-${date.date()}`;\n\t\t\t\tbreak;\n\t\t\tcase \"month\":\n\t\t\t\tindexer = date => date.month();\n\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tindexer = date => 0;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tlet indexedBaseline = baselineDF.withIndex(row => indexer(row.date));\n\t\tlet getBaselineValue = index => {\n\t\t\tlet at = indexedBaseline.at(index);\n\t\t\tif (at && has(at, \"value\")) {\n\t\t\t\treturn at.value;\n\t\t\t} else {\n\t\t\t\treturn indexedBaseline.getSeries(\"value\").average();\n\t\t\t}\n\t\t};\n\t\tdfwb = this.generateSeries({\n\t\t\tbaseline: row => getBaselineValue(indexer(row.date))\n\t\t});\n\t} else {\n\t\tdfwb = this.generateSeries({\n\t\t\tbaseline: row => baselineDF.first().value\n\t\t});\n\t}\n\tdfwb = dfwb.generateSeries({\n\t\tdelta: row => calculateChange(row.baseline, row.value)\n\t});\n\treturn new Timeseries(dfwb);\n}\n\nTimeseries.prototype.addBaselineDelta = addBaselineDelta;\n\nfunction annualIntensity(normalizeValue = 1) {\n\tlet interval = this.getInterval();\n\tlet annual = this.groupBy(row => row.date.year())\n\t\t.select(group => {\n\t\t\tlet startDate = group.first().date;\n\t\t\tlet endDate = group\n\t\t\t\t.last()\n\t\t\t\t.date.add(interval[1] || 1, interval[0] || \"month\");\n\t\t\tlet scaler = annualScale(startDate, endDate);\n\t\t\treturn {\n\t\t\t\tstartDate,\n\t\t\t\tendDate,\n\t\t\t\t...fromPairs(\n\t\t\t\t\tthis.getValueColumns().map(col => [\n\t\t\t\t\t\tcol,\n\t\t\t\t\t\t(group\n\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t.where(v => v)\n\t\t\t\t\t\t\t.sum() *\n\t\t\t\t\t\t\tscaler) /\n\t\t\t\t\t\t\tnormalizeValue\n\t\t\t\t\t])\n\t\t\t\t)\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.renameSeries({ startDate: \"date\" })\n\t\t.dropSeries(\"endDate\");\n\treturn new Timeseries(annual);\n}\n\nTimeseries.prototype.annualIntensity = annualIntensity;\n\n// Fill Functions\n\nfunction fillMissing() {\n\tlet startDate = this.first().date.toDate(),\n\t\tendDate = this.last().date.toDate();\n\tlet interval = this.getInterval();\n\tlet bdf = Timeseries.blank(startDate, endDate, interval, \"missing\").withIndex(\n\t\trow => row.date.valueOf()\n\t);\n\tlet m = this.withIndex(row => row.date.valueOf()).merge(bdf);\n\tm = m.transformSeries({\n\t\tflag: row => (row.value ? undefined : row.flag)\n\t});\n\tm = new Timeseries(m);\n\treturn m;\n}\nTimeseries.prototype.fillMissing = fillMissing;\nfunction fillNull(v) {\n\tlet df = this.transformSeries({\n\t\tvalue: value => (value === null || value === undefined ? v : value)\n\t});\n\treturn new Timeseries(df);\n}\nTimeseries.prototype.fillNull = fillNull;\n\nfunction zeroReplacement(threshold) {\n\tlet df = this;\n\tlet { zeroGroups } = zeroCheck(df, threshold);\n\tlet dfs = zeroGroups.toArray().map((zdf, i) => {\n\t\tzdf = zdf\n\t\t\t.transformSeries({\n\t\t\t\tvalue: () => null,\n\t\t\t\traw: () => 0,\n\t\t\t\tflag: value => [\"zero\", ...(value || [])]\n\t\t\t})\n\t\t\t.withIndex(row => new Date(row.date).valueOf());\n\t\treturn zdf;\n\t});\n\tlet merged = df.withIndex(row => row.date.valueOf()).merge(...dfs);\n\treturn new Timeseries(merged);\n}\nTimeseries.prototype.zeroReplacement = zeroReplacement;\n\nfunction monthlyWithQual() {\n\tlet interval = this.getInterval();\n\tlet ms = intervalToMS(interval);\n\tconst duration = \"month\";\n\tlet dateComparison = row =>\n\t\tdayjs(row.date)\n\t\t\t.startOf()\n\t\t\t.valueOf();\n\tlet ts = this.groupBy(dateComparison)\n\t\t.select(group => {\n\t\t\tconst date = dayjs(group.first().date)\n\t\t\t\t.startOf(duration)\n\t\t\t\t.toDate();\n\t\t\tlet fullCount = Math.floor(\n\t\t\t\tdayjs(date)\n\t\t\t\t\t.endOf(\"month\")\n\t\t\t\t\t.diff(dayjs(date), \"millisecond\") / ms\n\t\t\t);\n\t\t\tlet days = new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\n\t\t\tlet count = group\n\t\t\t\t.getSeries(\"value\")\n\t\t\t\t.where(v => v && v !== 0)\n\t\t\t\t.toArray().length;\n\t\t\tlet value = group\n\t\t\t\t.getSeries(\"value\")\n\t\t\t\t.where(v => !isNaN(v))\n\t\t\t\t.sum();\n\t\t\treturn {\n\t\t\t\tdate,\n\t\t\t\tvalue: isNaN(value) ? 0 : value,\n\t\t\t\tcount,\n\t\t\t\tfullCount,\n\t\t\t\tscore: count / fullCount\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => row.date.toDate());\n\treturn new Timeseries(ts);\n}\nTimeseries.prototype.monthlyWithQual = monthlyWithQual;\n\nfunction threeYearAverage(date, column = \"value\", defaultValue) {\n\tdate = dayjs(date);\n\tif (!defaultValue)\n\t\tdefaultValue = this.getSeries(\"value\")\n\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t.average();\n\n\t// let months = df\n\t// \t.before(date.valueOf())\n\t// \t.where(row => dayjs(row.date).month() === date.month())\n\t// \t.where(row => row.score > 0.9)\n\t// \t.tail(3);\n\tlet months = this.before(date.toDate())\n\t\t.where(row => row.date.month() === date.month())\n\t\t.orderBy(row => dayjs(row.date))\n\t\t.tail(3);\n\t// .where(row => row.score > 0.9);\n\tif (months.count() > 0) {\n\t\tlet val = months\n\t\t\t.getSeries(column)\n\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t.average();\n\t\treturn val;\n\t} else {\n\t\treturn defaultValue;\n\t}\n}\nTimeseries.prototype.threeYearAverage = threeYearAverage;\n\nfunction averageFill() {\n\tlet df = this;\n\tlet avg = df\n\t\t// .where(row => row.score ?row.score >= 0.9)\n\t\t.getSeries(\"value\")\n\t\t.where(v => !isNaN(v) && v !== null)\n\t\t.average();\n\tlet monthlyAvg = df\n\t\t.generateSeries({\n\t\t\trollingAverage: row => df.threeYearAverage(row.date, \"value\", avg)\n\t\t})\n\t\t.generateSeries({\n\t\t\tflag: row => (row.value ? row.flag : [\"filled\", ...(row.flag || [])])\n\t\t})\n\t\t.generateSeries({\n\t\t\tvalue: row => (row.value ? row.value : row.rollingAverage)\n\t\t})\n\t\t.dropSeries([\"rollingAverage\"]);\n\treturn new Timeseries(monthlyAvg);\n}\n\nTimeseries.prototype.averageFill = averageFill;\n\n// Static Methods\nfunction blank(startDate, endDate, [duration, value = 1], flag) {\n\tif ([\"minute\", \"hour\", \"day\", \"month\", \"year\"].indexOf(duration) < 0) {\n\t\tconsole.error(interval);\n\t\tthrow new Error(\"interval type not supported\");\n\t}\n\tstartDate = dayjs(startDate);\n\tendDate = dayjs(endDate);\n\tlet dates = [startDate];\n\tlet interval = intervalToMS([duration, value]);\n\twhile (dates[dates.length - 1].valueOf() < endDate.valueOf()) {\n\t\tdates.push(dayjs(dates[dates.length - 1]).add(value, duration));\n\t}\n\tlet df = new Timeseries(dates.map(date => ({ date, ...(flag && { flag }) })));\n\t// if (flag) {\n\t// \tdf = df.generateSeries({\n\t// \t\tflag: row => [flag]\n\t// \t});\n\t// \tdf = new Timeseries(df);\n\t// }\n\treturn df;\n}\nTimeseries.blank = blank;\nfunction aggregate(dataframes) {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df => new Timeseries(df));\n\tconst valueColumns = new Set(\n\t\tdataframes.map(df => df.getValueColumns()).reduce((a, b) => a.concat(b), [])\n\t);\n\tconst concatenated = dataForge.DataFrame.concat(dataframes)\n\t\t.groupBy(row => row.date)\n\t\t.select(group => {\n\t\t\tconst date = group.first().date;\n\t\t\tlet o = { date };\n\t\t\tvalueColumns.forEach(c => (o[c] = group.deflate(row => row[c]).sum()));\n\t\t\tgroup\n\t\t\t\t.getColumnNames()\n\t\t\t\t.filter(col => col !== \"date\")\n\t\t\t\t.filter(col => valueColumns.has(col) === -1)\n\t\t\t\t.forEach(col => {\n\t\t\t\t\tlet value = group\n\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t.distinct()\n\t\t\t\t\t\t.toArray();\n\t\t\t\t\tif (value.length === 1) value = value[0];\n\t\t\t\t\to[col] = value;\n\t\t\t\t\treturn;\n\t\t\t\t});\n\t\t\treturn o;\n\t\t})\n\t\t.inflate();\n\t// .toArray();\n\n\treturn new Timeseries(concatenated);\n}\nTimeseries.aggregate = aggregate;\nTimeseries.concat = dataframes => {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df => new Timeseries(df));\n\tlet df = dataForge.DataFrame.concat(dataframes);\n\treturn new Timeseries(df);\n};\nTimeseries.merge = dataframes => {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df => new Timeseries(df));\n\tlet df = dataForge.DataFrame.merge(dataframes);\n\treturn new Timeseries(df);\n};\n","import dayjs from \"dayjs\";\nexport const annualScale = (start, end) =>\n\t365 / dayjs(end).diff(dayjs(start), \"day\");\nexport const calculateChange = (baseline, value) =>\n\t(value - baseline) / baseline;\n","import { DataFrame } from \"data-forge\";\n\nconst zerogrouping = dataframe => {\n  // group sequential\n  let df = dataframe.variableWindow(\n    (a, b) => a.value === b.value\n  );\n};\n\nfunction zeroCheck(df, threshold = 2) {\n  let zeroGroups = df\n    .variableWindow((a, b) => {\n      return a.value === b.value && a.value === 0;\n    })\n    .where(window => window.getIndex().count() >= threshold);\n  let zeroSummary = zeroGroups\n    .select(window => ({\n      start: window.first().date,\n      end: window.last().date,\n      count: window.count()\n    }))\n    .inflate(); // Series -> dataframe.\n  // .toArray()\n  return { zeroSummary, zeroGroups };\n}\n\nfunction zeroReplacement(df, threshold) {\n  let { zeroGroups } = zeroCheck(df, threshold);\n  let dfs = zeroGroups.toArray().map(zdf => {\n    zdf = zdf\n      .transformSeries({\n        value: () => null,\n        raw: 0,\n        flag: value => [\"zero\", ...(value || [])]\n      })\n      .withIndex(row => new Date(row.date).valueOf());\n    return zdf;\n  });\n  let merged = DataFrame.merge([df, ...dfs]);\n\n  return merged;\n}\nexport { zerogrouping, zeroReplacement, zeroCheck };\n"],"names":["intervalToMS","unit","value","start","dayjs","add","diff","valueFiller","fillType","startValue","endValue","entryIndex","numEntries","overrideValue","dateFunction","date","flag","indexOf","Error","fromPairs","toPairs","map","key","val","rval","df","values","deflate","row","x","toArray","std","sampleStandardDeviation","mean","_mean","ndf","generateSeries","ares","R","DataFrame","Math","abs","max","lambdaTest","n","i","alpha","p","pValue","t","degreeOfFreedom","Studentt","inv","tValue","lambda","sqrt","pow","modz","mad","median","modifiedZScoreTest","_median","medianAbsoluteDeviation","outliers","sort","a","b","filter","v","thresholds","upper","min","Infinity","lower","Timeseries","data","dataForge","config","others","valueOf","index","toDate","considerAllRows","call","this","removeOutliers","column","lowerThreshold","upperThreshold","where","outlierCheck","raw","transformSeries","[object Object]","merge","prototype","Object","create","constructor","getValueColumns","detectTypes","Type","distinct","Column","getSeries","getInterval","ms","end","getIndex","window","select","last","first","detectValues","orderBy","Frequency","Value","ceil","getDateRange","adjustment","startOf","endOf","calculateStatistics","options","filterZeros","filterNegative","series","isNaN","average","count","q1","quantile","q3","iqr","calculateThresholdOptions","k","noflags","Array","isArray","length","floor","esd","dataset","newdf","dataframe","trip","pair","assign","push","outlierValues","outlier","takeWhile","iterations","rosnerTest","box","lowerInner","upperInner","lowerOuter","upperOuter","transformAllSeries","adjustmentFunction","exclude","columns","col","forEach","reset","withSeries","subset","group","interval","groupBy","clean","downsample","duration","dateComparison","valueColumns","sum","getColumnNames","inflate","withIndex","upsample","fillGaps","durationValue","pairA","pairB","startDate","gapExists","endDate","newEntries","e","gapFill","populate","type","reduceToValue","columnNames","chooseValue","addBaselineDelta","baselineDF","dfwb","indexer","baselineInterval","isEqual","console","error","month","indexedBaseline","baseline","at","has","getBaselineValue","delta","calculateChange","annualIntensity","normalizeValue","year","scaler","annualScale","renameSeries","dropSeries","fillMissing","bdf","blank","m","undefined","fillNull","zeroReplacement","threshold","zeroGroups","variableWindow","zeroSummary","zeroCheck","dfs","zdf","Date","monthlyWithQual","fullCount","getFullYear","getMonth","getDate","score","threeYearAverage","defaultValue","months","before","tail","averageFill","avg","rollingAverage","dates","aggregate","dataframes","Set","reduce","concat","o","c"],"mappings":"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"}
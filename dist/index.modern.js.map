{"version":3,"file":"index.modern.js","sources":["../src/lib/Timeseries.interval.js","../src/lib/Timeseries.fill.js","../src/lib/Timeseries.statistics.js","../src/lib/misc.js","../src/index.js","../src/lib/Timeseries.zero.js"],"sourcesContent":["import dayjs from \"dayjs\";\n\nconst msToInterval = ms => {\n\tlet start = dayjs();\n\tlet end = dayjs().add(ms);\n\tif (end.diff(start, \"month\", true) >= 11) {\n\t\treturn [\"year\", Math.ceil(end.diff(start, \"year\", true))];\n\t} else if (end.diff(start, \"day\", true) >= 28) {\n\t\treturn [\"month\", Math.ceil(end.diff(start, \"month\", true))];\n\t} else if (end.diff(start, \"hour\", true) >= 23) {\n\t\treturn [\"day\", Math.ceil(end.diff(start, \"day\", true))];\n\t} else if (end.diff(start, \"minute\", true) >= 55) {\n\t\treturn [\"hour\", Math.ceil(end.diff(start, \"hour\", true))];\n\t} else {\n\t\treturn [\"minute\", end.diff(start, \"minute\")];\n\t}\n};\nconst intervalToMS = ([unit, value]) => {\n\tlet start = dayjs();\n\tlet end = dayjs().add(value, unit);\n\treturn end.diff(start);\n};\nfunction calculateInterval(df, startDate, endDate) {\n\tif (!startDate) startDate = df.first.date;\n\tif (!endDate) endDate = df.last.date;\n\tfunction computeInterval(window) {\n\t\treturn window.last() - window.first();\n\t}\n\tconst intervals = df\n\t\t.between(startDate, endDate)\n\t\t.getIndex()\n\t\t.window(2)\n\t\t.select(computeInterval)\n\t\t.detectValues()\n\t\t.orderBy(row => row.Frequency);\n\n\tlet val = intervals.last().Value;\n\treturn msToInterval(val);\n}\nexport { msToInterval, intervalToMS, calculateInterval };\n","import dayjs from \"dayjs\";\nimport fromPairs from \"lodash/fromPairs\";\nimport toPairs from \"lodash/toPairs\";\n\nconst gapExists = ([duration, durationValue = 1]) => (pairA, pairB) => {\n\tconst startDate = pairA[0];\n\tconst endDate = pairB[0];\n\tlet gapSize = Math.floor(\n\t\tdayjs(endDate).diff(startDate, duration, true) / durationValue\n\t);\n\n\tif (gapSize > 0) return true;\n\treturn false;\n};\n\nconst valueFiller = (\n\tfillType,\n\t{ startValue, endValue, entryIndex, numEntries },\n\t{ overrideValue, dateFunction, date, flag }\n) => {\n\tif (\n\t\t[\"pad\", \"interpolate\", \"average\", \"dateFunction\", \"value\"].indexOf(\n\t\t\tfillType\n\t\t) === -1\n\t) {\n\t\tthrow new Error(\"fill Type not supported\");\n\t}\n\tlet value;\n\tif (fillType === \"pad\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\treturn [key, startValue[key]];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", \"pad\"];\n\t} else if (fillType === \"interpolate\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv =\n\t\t\t\t\tstartValue[key] +\n\t\t\t\t\t(entryIndex + 1) *\n\t\t\t\t\t\t((endValue[key] - startValue[key]) / (numEntries + 1));\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"average\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv = (startValue[key] + endValue[key]) / numEntries;\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"dateFunction\" && dateFunction) {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv = dateFunction(date);\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"value\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv;\n\t\t\t\tif (typeof overrideValue === \"number\") {\n\t\t\t\t\tnv = overrideValue;\n\t\t\t\t} else {\n\t\t\t\t\tnv = overrideValue[key];\n\t\t\t\t}\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\treturn [key, null];\n\t\t\t})\n\t\t);\n\t\tflag = [\"fill\"];\n\t}\n\treturn { ...value, flag };\n};\n\nconst gapFill = (\n\tfillType,\n\t[duration, durationValue],\n\t{ overrideValue, dateFunction, flag } = {}\n) => (pairA, pairB) => {\n\t// Fill values forward.\n\n\tconst startDate = dayjs(pairA[0]);\n\tconst endDate = dayjs(pairB[0]);\n\tlet gapSize = Math.floor(\n\t\tdayjs(endDate).diff(startDate, duration) / durationValue\n\t);\n\tconst numEntries = gapSize - 1;\n\tconst startValue = pairA[1];\n\tconst endValue = pairB[1];\n\tconst newEntries = [];\n\tfor (let entryIndex = 0; entryIndex < numEntries; ++entryIndex) {\n\t\tlet adjustment = valueFiller(\n\t\t\t\tfillType,\n\t\t\t\t{ startValue, endValue, entryIndex, numEntries },\n\t\t\t\t{\n\t\t\t\t\toverrideValue,\n\t\t\t\t\tdateFunction,\n\t\t\t\t\tflag\n\t\t\t\t}\n\t\t\t),\n\t\t\tdate = dayjs(startDate)\n\t\t\t\t.add((entryIndex + 1) * durationValue, duration)\n\t\t\t\t.toDate();\n\t\tlet e = [date.valueOf(), Object.assign({}, adjustment, { date })];\n\t\tnewEntries.push(e);\n\t}\n\n\treturn newEntries;\n};\n\n// Basic Fill Functions\nconst averageMonthlyMap = df =>\n\tnew Map(\n\t\tdf\n\t\t\t.group(\"month\")\n\t\t\t.select(group => ({\n\t\t\t\tmonth: group.first().date.month(),\n\t\t\t\tvalue: group\n\t\t\t\t\t.getSeries(\"value\")\n\t\t\t\t\t.where(v => v)\n\t\t\t\t\t.average()\n\t\t\t}))\n\t\t\t.toArray()\n\t\t\t.map(({ month, value }) => [month, value])\n\t);\nconst fillMonthlyByMap = monthMap => row => monthMap.get(row.date.month());\n\nconst pad = (df, { validOnly = true, series = \"value\" } = {}) => row => {\n\tlet values = df\n\t\t.before(row.date.toDate())\n\t\t.getSeries(series)\n\t\t.where(v => v);\n\tlet value = values.count() > 0 ? values.last() : 0;\n\t// console.log(row.date.toDate(), value);\n\treturn value;\n};\nconst annualAverage = (\n\tdf,\n\t{ validOnly = true, series = \"value\", years = 3, defaultValue } = {}\n) => row => {\n\tdf = df.subset([\"date\", series]).before(row.date.toDate());\n\tlet values = df\n\t\t.where(r => r.date.year(row.date.year()).isSame(row.date))\n\t\t.after(row.date.subtract(years, \"year\"))\n\t\t.getSeries(series)\n\t\t.where(v => v)\n\t\t.bake();\n\n\tlet value;\n\tif (values.count() < years) {\n\t\tvalue = values\n\t\t\t.appendPair([\n\t\t\t\tnull,\n\t\t\t\tdf\n\t\t\t\t\t.getSeries(series)\n\t\t\t\t\t.where(v => v)\n\t\t\t\t\t.average()\n\t\t\t])\n\t\t\t.average();\n\t} else {\n\t\tvalue = values.average();\n\t}\n\treturn value;\n};\nexport {\n\tgapExists,\n\tgapFill,\n\taverageMonthlyMap,\n\tfillMonthlyByMap,\n\tpad,\n\tannualAverage\n};\n","// Source: https://www.itl.nist.gov/div898/handbook/eda/section3/eda35h3.htm\n// https://vsp.pnnl.gov/help/Vsample/Rosners_Outlier_Test.htm\n// https://www.itl.nist.gov/div898/handbook/prc/section1/prc16.htm\n// https://www.math.ucla.edu/~tom/distributions/KolSmir2.html?\nimport { DataFrame } from \"data-forge\";\nimport {\n  sampleStandardDeviation,\n  mean as _mean,\n  max,\n  median as _median,\n  medianAbsoluteDeviation,\n  quantile\n} from \"simple-statistics\";\nimport { Studentt } from \"distributions\";\nimport dayjs from \"dayjs\";\n\nfunction rval(df) {\n  let values = df.deflate(row => row.x).toArray();\n  let std = sampleStandardDeviation(values);\n  let mean = _mean(values);\n  if (std === 0) {\n    let ndf = df.generateSeries({ ares: row => 0 });\n    return { R: 0, std, mean, df: ndf };\n  }\n  let ndf = new DataFrame({\n    values: values.map(x => ({\n      x,\n      ares: Math.abs(x - mean) / std\n    }))\n  });\n  let R = max(ndf.deflate(row => row.ares).toArray());\n  return { R, df: ndf, std, mean };\n}\n\nfunction pValue(n, i, alpha) {\n  let p = 1 - alpha / (2 * (n - i + 1));\n  return p;\n}\nfunction tValue(p, degreeOfFreedom) {\n  let qt = new Studentt(degreeOfFreedom);\n  let t = qt.inv(p);\n  return t;\n}\n//\nfunction lambdaTest(n, i, alpha) {\n  let p = pValue(n, i, alpha);\n  let df = n - i - 1;\n  let t = tValue(p, df);\n  let lambda =\n    (t * (n - i)) /\n    Math.sqrt((n - i - 1 + Math.pow(t, 2)) * (n - i + 1));\n  return { lambda, p, t };\n}\nfunction rosnerTest(dataset = [], k = 10, alpha = 0.05) {\n  let dataframe = new DataFrame({\n    values: dataset.map(x => ({ x }))\n  });\n  let n = dataframe.getSeries(\"x\").count();\n  let newdf;\n  let i = 1;\n  let outliers = [];\n  let trip = false;\n  while (i <= k) {\n    let pair = {};\n    let s = Date.now();\n    if (i === 1) {\n      let { R, df, mean, std } = rval(dataframe);\n      newdf = df.where(row => row.ares !== R);\n      pair = Object.assign({}, pair, {\n        mean,\n        std,\n        Value: df\n          .where(row => row.ares === R)\n          .getSeries(\"x\")\n          .first(),\n        R\n      });\n    } else {\n      let { R, df, mean, std } = rval(newdf);\n      newdf = df.where(row => row.ares !== R);\n      pair = Object.assign({}, pair, {\n        mean,\n        std,\n        Value: df\n          .where(row => row.ares === R)\n          .getSeries(\"x\")\n          .first(),\n        R\n      });\n    }\n    let { lambda, p, t } = lambdaTest(n, i, alpha);\n    pair = Object.assign({}, pair, { lambda });\n    outliers.push(pair);\n    if (trip && pair.R > pair.lambda) trip = false;\n    if (pair.R === 0) break;\n    if (pair.R < pair.lambda) {\n      if (trip) {\n        break;\n      } else {\n        trip = true;\n      }\n    }\n    i++;\n  }\n  outliers = new DataFrame(outliers)\n    .generateSeries({\n      outlier: row => row.R > row.lambda\n    })\n    .takeWhile(row => row.outlier);\n  let outlierValues = outliers\n    .where(row => row.Value > 0)\n    .deflate(row => row.Value);\n  let thresholds = {\n    lower: 0,\n    upper:\n      outlierValues.count() > 0 ? outlierValues.min() : Infinity\n  };\n  return {\n    outliers,\n    thresholds,\n    iterations: i\n  };\n}\nconst modz = (value, mad, median) => {\n  return (0.6745 * (value - median)) / mad;\n};\nfunction modifiedZScoreTest(values) {\n  let median = _median(values);\n  let mad = medianAbsoluteDeviation(values);\n  values = values\n    .sort((a, b) => b - a)\n    .filter(v => v > 0)\n    .map(v => [v, modz(v, mad, median)]);\n  let outliers = values.filter(\n    ([v, modz]) => Math.abs(modz) >= 3.5\n  );\n  let upper = Math.min(\n    ...[Infinity, ...outliers.map(v => v[0])]\n  );\n  // let score,\n  // \tvalue,\n  // \tthreshold = Infinity,\n  // \tindex = 0;\n  // do {\n  // \tvalue = values[index];\n  // \tscore = modz(value, mad, median);\n  // \tif (Math.abs(score) >= 3.5) threshold = value;\n  // } while (score >= 3.5);\n  return { thresholds: { upper, lower: 0 } };\n}\nfunction boxPlotTest(values) {\n  let q1 = quantile(values, 0.25);\n  let q3 = quantile(values, 0.75);\n  let iqr = q3 - q1;\n  return {\n    thresholds: {\n      lowerInner: q1 - 1.5 * iqr,\n      upperInner: q1 - 3 * iqr,\n      lowerOuter: q3 + 1.5 * iqr,\n      upperOuter: q3 + 3 * iqr\n    }\n  };\n}\nfunction calculateOutlierThresholds(\n  df,\n  { k, filterZeros = true } = {}\n) {\n  let values = df\n    .where(\n      row =>\n        row.flag === null ||\n        row.flag === undefined ||\n        Array.isArray(row.flag)\n    )\n    .where(row => !isNaN(row.value) && row.value !== null)\n    .getSeries(\"value\")\n    .bake();\n  if (filterZeros) values = values.where(value => value > 0);\n  if (!k) {\n    k =\n      values.count() < 1000\n        ? Math.floor(values.count() * 0.15)\n        : Math.min(...[1000, Math.floor(values.count() * 0.02)]);\n  }\n  if (values.count < 5) return {};\n  let { outliers, threshold } = rosnerTest(values.toArray(), k);\n  return { outliers, threshold };\n}\n\nfunction zeroCheck(df, threshold = 2) {\n  let zeroGroups = df\n    .variableWindow((a, b) => {\n      return a.value === b.value && a.value === 0;\n    })\n    .where(window => window.getIndex().count() >= threshold);\n  let zeroSummary = zeroGroups\n    .select(window => ({\n      start: window.first().date,\n      end: window.last().date,\n      count: window.count()\n    }))\n    .inflate(); // Series -> dataframe.\n  // .toArray()\n  return { zeroSummary, zeroGroups };\n}\n\nfunction zeroReplacement(df, threshold) {\n  let { zeroGroups } = zeroCheck(df, threshold);\n  zeroGroups.forEach(dff => {\n    dff = dff.transformSeries({\n      value: value => null,\n      flag: value => [\"zero\"]\n    });\n    df = DataFrame.merge([df, dff]);\n  });\n  return df;\n}\nfunction isOutlier(value, { lower, upper }) {\n  if (value < lower || value >= upper) {\n    return true;\n  }\n  return false;\n}\nfunction validMean(df) {\n  let values = df\n    .getSeries(\"value\")\n    .where(value => typeof value === \"number\");\n  return values.average();\n}\nfunction validMonthlyMeanMap(df) {\n  let dateComparison = row =>\n    dayjs(row.date)\n      .startOf(\"month\")\n      .month();\n\n  df = df\n    .where(row => typeof row.value === \"number\")\n    .groupBy(dateComparison)\n    .select(group => ({\n      month: new Date(group.first().date).getMonth(),\n      value: group.deflate(row => row.value).average()\n    }));\n  return new Map(\n    df.toArray().map(({ month, value }) => [month, value])\n  );\n}\n\nfunction quality(df) {\n  let count = df.getIndex().count();\n  let valid = df\n    .getSeries(\"flag\")\n    .where(\n      value =>\n        value === null ||\n        (Array.isArray(value) && value.length === 0)\n    )\n    .count();\n  let missing = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"missing\") !== -1)\n    .count();\n  let dirty = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"clean\") !== -1)\n    .count();\n  let zerod = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"zero\") !== -1)\n    .count();\n  let breakdown = {\n    valid: valid / count,\n    missing: missing / count,\n    invalid: (dirty + zerod) / count\n  };\n  let report = {\n    accuracy: (1 - dirty / count) * 4,\n    completeness: 4 * breakdown.valid,\n    consistency: 4 * ((count - missing - zerod) / count)\n  };\n  return { breakdown, report, count };\n}\n\nexport {\n  rosnerTest,\n  modifiedZScoreTest,\n  boxPlotTest,\n  calculateOutlierThresholds,\n  zeroReplacement,\n  isOutlier,\n  validMean,\n  validMonthlyMeanMap,\n  quality\n};\n","import dayjs from \"dayjs\";\nexport const annualScale = (start, end) =>\n\t365 / dayjs(end).diff(dayjs(start), \"day\");\nexport const calculateChange = (baseline, value) =>\n\t(value - baseline) / baseline;\n","import dayjs from \"dayjs\";\nimport dataForge from \"data-forge\";\nimport { msToInterval, intervalToMS } from \"./lib/Timeseries.interval\";\nimport isEqual from \"lodash/isEqual\";\nimport has from \"lodash/has\";\nimport get from \"lodash/get\";\nimport fromPairs from \"lodash/fromPairs\";\nimport {\n\tgapExists,\n\tgapFill,\n\taverageMonthlyMap,\n\tfillMonthlyByMap,\n\tpad,\n\tannualAverage\n} from \"./lib/Timeseries.fill\";\nimport {\n\tckmeans,\n\tmax,\n\tmedianAbsoluteDeviation,\n\tquantile\n} from \"simple-statistics\";\n\nimport {\n\trosnerTest,\n\tboxPlotTest,\n\tmodifiedZScoreTest\n} from \"./lib/Timeseries.statistics\";\nimport { annualScale, calculateChange } from \"./lib/misc\";\nimport { zeroCheck } from \"./lib/Timeseries.zero\";\n\nexport default Timeseries;\n// Fill Options\nexport { averageMonthlyMap, fillMonthlyByMap, pad, annualAverage };\nfunction Timeseries(data, options = {}) {\n\t// const { msIndex } = options;\n\tif (data instanceof Timeseries) {\n\t\treturn data;\n\t}\n\tif (data instanceof dataForge.DataFrame) {\n\t\tdata = data.toArray();\n\t}\n\n\tdata = data\n\t\t.map(({ date, ...others }) => ({ date: dayjs(date), ...others }))\n\t\t.sort((a, b) => a.date.valueOf() - b.date.valueOf());\n\tlet config = {\n\t\t// columns: ['date', 'value', 'raw', 'flag'],\n\t\tvalues: data,\n\t\tindex: data.map(({ date }) => date.toDate()),\n\t\tconsiderAllRows: true\n\t};\n\tdataForge.DataFrame.call(this, config);\n}\n\nTimeseries.prototype = Object.create(dataForge.DataFrame.prototype);\nTimeseries.prototype.constructor = Timeseries;\n\n// Getters\nfunction getValueColumns() {\n\treturn this.detectTypes()\n\t\t.where(row => row.Type === \"number\")\n\t\t.distinct(row => row.Column)\n\t\t.getSeries(\"Column\")\n\t\t.toArray();\n}\nfunction interval() {\n\tconst computeInterval = window => window.last() - window.first();\n\tconst intervals = this.getIndex()\n\t\t.window(2)\n\t\t.select(computeInterval)\n\t\t.detectValues()\n\t\t.orderBy(row => -row.Frequency);\n\t// .orderBy(row => row.Value);\n\n\tlet val = intervals.first().Value;\n\n\treturn msToInterval(val);\n}\n\nfunction dateRange(unit, adjustment) {\n\tlet start = dayjs(this.first().date),\n\t\tend = dayjs(this.last().date);\n\tif (adjustment) {\n\t\tstart = start.startOf(adjustment);\n\t\tend = end.endOf(adjustment);\n\t}\n\treturn end.diff(start, unit);\n}\nTimeseries.prototype.getValueColumns = getValueColumns;\nTimeseries.prototype.getInterval = interval;\nTimeseries.prototype.getDateRange = dateRange;\n\n// Methods\nfunction calculateThresholdOptions({\n\tk,\n\tfilterZeros = true,\n\tfilterNegative = true\n} = {}) {\n\tlet noflags = this.where(\n\t\trow =>\n\t\t\trow.flag === null ||\n\t\t\trow.flag === undefined ||\n\t\t\t(Array.isArray(row.flag) && row.flag.length === 0)\n\t)\n\t\t.where(row => !isNaN(row.value) && row.value !== null)\n\t\t.getSeries(\"value\");\n\tif (filterZeros) noflags = noflags.where(value => value !== 0);\n\tif (filterNegative) noflags = noflags.where(value => value > 0);\n\tif (!k) {\n\t\tk =\n\t\t\tnoflags.count() < 1000\n\t\t\t\t? Math.floor(noflags.count() * 0.15)\n\t\t\t\t: Math.min(...[1000, Math.floor(noflags.count() * 0.02)]);\n\t}\n\tif (noflags.count() < 5) return {};\n\tlet { thresholds: esd } = rosnerTest(noflags.toArray(), k);\n\tlet { thresholds: box } = boxPlotTest(noflags.toArray());\n\tlet { thresholds: modz } = modifiedZScoreTest(noflags.toArray());\n\treturn { esd, box, modz };\n}\n\nfunction getBestThreshold() {\n\ttry {\n\t\tlet thresholds = this.calculateThresholdOptions();\n\t\tconst thresholdGroups = ckmeans(\n\t\t\t[\n\t\t\t\tget(thresholds, \"esd.upper\", null),\n\t\t\t\tget(thresholds, \"modz.upper\", null),\n\t\t\t\tget(thresholds, \"box.lowerOuter\", null),\n\t\t\t\tget(thresholds, \"box.upperOuter\", null)\n\t\t\t].filter(v => v),\n\t\t\t2\n\t\t);\n\t\tlet threshold_actual = max(\n\t\t\tthresholdGroups.reduce((a, b) => (a.length > b.length ? a : b))\n\t\t);\n\t\treturn threshold_actual;\n\t} catch (error) {\n\t\tconsole.error(error);\n\t\tthrow new Error(\"Cannot determine threshold\");\n\t}\n}\n\nfunction calculateStatistics(options = {}) {\n\tconst {\n\t\tcolumn = \"value\",\n\t\tfilterZeros = false,\n\t\tfilterNegative = true\n\t} = options;\n\tlet series = this.deflate(row => row[column]).where(value => !isNaN(value));\n\tif (filterNegative) series = series.where(value => value >= 0);\n\tif (filterZeros) series = series.where(value => value !== 0);\n\tlet median = series.median();\n\tlet mean = series.average();\n\tlet count = series.count();\n\tlet std = series.std();\n\tlet min = series.min();\n\tlet max = series.max();\n\tlet mad = medianAbsoluteDeviation(series.toArray());\n\tlet q1 = quantile(series.toArray(), 0.25);\n\tlet q3 = quantile(series.toArray(), 0.75);\n\tlet iqr = q3 - q1;\n\tlet stats = {\n\t\tmedian,\n\t\tmean,\n\t\tcount,\n\t\tstd,\n\t\tmin,\n\t\tmax,\n\t\tmad,\n\t\tq1,\n\t\tq3,\n\t\tiqr\n\t};\n\treturn stats;\n}\n\nTimeseries.prototype.calculateStatistics = calculateStatistics;\nTimeseries.prototype.calculateThresholdOptions = calculateThresholdOptions;\nTimeseries.prototype.getBestThreshold = getBestThreshold;\n\n// Chainable Methods\nfunction transformAllSeries(adjustmentFunction, { exclude }) {\n\tlet df = this;\n\tlet columns = (columns = df\n\t\t.detectTypes()\n\t\t.where(row => row.Type === \"number\")\n\t\t.distinct(row => row.Column)\n\t\t.getSeries(\"Column\")\n\t\t.toArray());\n\tif (exclude && Array.isArray(exclude)) {\n\t\tcolumns = columns.filter(col => exclude.indexOf(col) === -1);\n\t}\n\tcolumns.forEach(col => {\n\t\tdf = df.transformSeries({\n\t\t\t[col]: value => {\n\t\t\t\tif (isNaN(value)) {\n\t\t\t\t\treturn value;\n\t\t\t\t} else {\n\t\t\t\t\treturn adjustmentFunction(value);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\treturn df;\n}\n\nTimeseries.prototype.transformAllSeries = transformAllSeries;\n\nfunction reset() {\n\tlet df = this.withSeries({\n\t\tvalue: row =>\n\t\t\trow.flag && Array.isArray(row.flag) && row.flag.length > 0\n\t\t\t\t? row.raw\n\t\t\t\t: row.value\n\t})\n\t\t.subset([\"date\", \"value\"])\n\t\t.where(row => !isNaN(row.value) && row.value !== null);\n\treturn new Timeseries(df);\n}\nTimeseries.prototype.reset = reset;\n\nfunction group(interval, toArray) {\n\tif ([\"hour\", \"day\", \"month\", \"year\"].indexOf(interval) === -1)\n\t\tthrow new Error(\"interval type not supported\");\n\tlet dateComparison = row => dayjs(row.date).startOf(interval);\n\tlet groups = this.groupBy(dateComparison);\n\treturn groups;\n}\n\nTimeseries.prototype.group = group;\n\nfunction removeOutliers({ series = \"value\", lower, upper } = {}) {\n\tif (lower > upper) throw new Error(\"thresholds invalid\");\n\tlet outlierCheck = (value, lower, upper) => value < lower || value > upper;\n\n\tlet outliers = this.where(row => outlierCheck(row[series], lower, upper))\n\t\t.generateSeries({\n\t\t\traw: row => row[series],\n\t\t\tflag: ({ flag = [] }) => [\"outlier\", ...flag]\n\t\t})\n\t\t.transformSeries({\n\t\t\t[series]: value => null\n\t\t});\n\n\tlet merged = this.merge(outliers);\n\treturn new Timeseries(merged);\n}\n\nTimeseries.prototype.removeOutliers = removeOutliers;\nTimeseries.prototype.clean = removeOutliers;\n\nfunction downsample([duration, value], fillType = \"sum\") {\n\tif ([\"hour\", \"day\", \"month\", \"year\"].indexOf(duration) === -1)\n\t\tthrow new Error(\"interval type not supported\");\n\tif ([\"sum\", \"avg\", \"median\"].indexOf(fillType) === -1) {\n\t\tthrow new Error(\"aggregation type not suppported, only:\");\n\t}\n\tlet dateComparison = row => row.date.startOf(duration);\n\tlet valueColumns = this.getValueColumns();\n\tif (value) {\n\t\tdateComparison = row => row.date.startOf(duration).add(value, duration);\n\t}\n\tlet df = this.groupBy(dateComparison)\n\t\t.select(group => {\n\t\t\tconst date = group.first().date.startOf(duration);\n\t\t\treturn {\n\t\t\t\tdate,\n\t\t\t\t...fromPairs([\n\t\t\t\t\t...valueColumns.map(col => {\n\t\t\t\t\t\tlet value;\n\t\t\t\t\t\tswitch (fillType) {\n\t\t\t\t\t\t\tcase \"median\":\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.median();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"avg\":\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.average();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t// sum\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.sum();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn [col, value];\n\t\t\t\t\t}),\n\t\t\t\t\t...group\n\t\t\t\t\t\t.getColumnNames()\n\t\t\t\t\t\t.filter(col => col !== \"date\")\n\t\t\t\t\t\t.filter(col => valueColumns.indexOf(col) === -1)\n\t\t\t\t\t\t.map(col => {\n\t\t\t\t\t\t\tlet value = group\n\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t.distinct()\n\t\t\t\t\t\t\t\t.toArray();\n\t\t\t\t\t\t\tif (value.length === 1) value = value[0];\n\t\t\t\t\t\t\treturn [col, value];\n\t\t\t\t\t\t})\n\t\t\t\t])\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => dayjs(row.date).toDate());\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.downsample = downsample;\n\nfunction upsample([duration, value], fillType = \"avg\") {\n\t// Dont use this b/c it has the raw and flag values\n\tlet df = this.fillGaps(\n\t\tgapExists([duration, value]),\n\t\tgapFill(fillType, [duration, value])\n\t);\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.upsample = upsample;\n\nfunction populate(value, type = \"avg\") {\n\tlet v;\n\tswitch (type) {\n\t\tcase \"fill\":\n\t\t\tv = value;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tv = value / this.count();\n\t\t\tbreak;\n\t}\n\tlet df = this.generateSeries({ value: row => v });\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.populate = populate;\n\nfunction reduceToValue(columnNames) {\n\tfunction chooseValue(row, columnNames = []) {\n\t\tlet values = columnNames.map(n => row[n]).filter(v => v);\n\t\treturn values[0] || 0;\n\t}\n\tlet df = this.generateSeries({\n\t\tvalue: row => chooseValue(row, columnNames)\n\t}).subset([\"date\", \"value\"]);\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.reduceToValue = reduceToValue;\n\n// Baseline Functions\n\nfunction rollingPercentChange(col = \"value\") {\n\tlet df = this;\n\tlet delta = df.withSeries(\"delta\", full.getSeries(\"value\").percentChange());\n\treturn new Timeseries(delta);\n}\n\nTimeseries.prototype.rollingPercentChange = rollingPercentChange;\nfunction baselinePercentChange(baselineDF) {\n\t// Only Change in Year\n\tif (!(baselineDF instanceof Timeseries))\n\t\tbaselineDF = new Timeseries(baselineDF);\n\tlet dfwb;\n\tif (baselineDF.count() > 1) {\n\t\tlet interval = this.getInterval();\n\t\tlet baselineInterval = baselineDF.interval;\n\t\tif (!isEqual(interval, baselineInterval)) {\n\t\t\tconsole.error(interval, baselineInterval);\n\t\t\tthrow new Error(\"baseline and data intervals do not match\");\n\t\t}\n\t\tlet indexer;\n\t\tswitch (interval[0]) {\n\t\t\tcase \"day\":\n\t\t\t\tindexer = date => `${date.month()}-${date.date()}`;\n\t\t\t\tbreak;\n\t\t\tcase \"month\":\n\t\t\t\tindexer = date => date.month();\n\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tindexer = date => 0;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tlet indexedBaseline = baselineDF.withIndex(row => indexer(row.date));\n\t\tlet getBaselineValue = index => {\n\t\t\tlet at = indexedBaseline.at(index);\n\t\t\tif (at && has(at, \"value\")) {\n\t\t\t\treturn at.value;\n\t\t\t} else {\n\t\t\t\treturn indexedBaseline.getSeries(\"value\").average();\n\t\t\t}\n\t\t};\n\t\tdfwb = this.generateSeries({\n\t\t\tbaseline: row => getBaselineValue(indexer(row.date))\n\t\t});\n\t} else {\n\t\tdfwb = this.generateSeries({\n\t\t\tbaseline: row => baselineDF.first().value\n\t\t});\n\t}\n\tdfwb = dfwb.generateSeries({\n\t\tdelta: row => calculateChange(row.baseline, row.value)\n\t});\n\treturn new Timeseries(dfwb);\n}\n\nTimeseries.prototype.baselinePercentChange = baselinePercentChange;\nTimeseries.prototype.addBaselineDelta = baselinePercentChange;\n\nfunction annualIntensity(normalizeValue = 1) {\n\tlet interval = this.getInterval();\n\tlet annual = this.groupBy(row => row.date.year())\n\t\t.select(group => {\n\t\t\tlet startDate = group.first().date;\n\t\t\tlet endDate = group\n\t\t\t\t.last()\n\t\t\t\t.date.add(interval[1] || 1, interval[0] || \"month\");\n\t\t\tlet scaler = annualScale(startDate, endDate);\n\t\t\treturn {\n\t\t\t\tstartDate,\n\t\t\t\tendDate,\n\t\t\t\t...fromPairs(\n\t\t\t\t\tthis.getValueColumns().map(col => [\n\t\t\t\t\t\tcol,\n\t\t\t\t\t\t(group\n\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t.where(v => v)\n\t\t\t\t\t\t\t.sum() *\n\t\t\t\t\t\t\tscaler) /\n\t\t\t\t\t\t\tnormalizeValue\n\t\t\t\t\t])\n\t\t\t\t)\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.renameSeries({ startDate: \"date\" })\n\t\t.dropSeries(\"endDate\");\n\treturn new Timeseries(annual);\n}\n\nTimeseries.prototype.annualIntensity = annualIntensity;\n\n// Fill Functions\n\nfunction fillMissing() {\n\tlet df = this;\n\tlet startDate = df.first().date.toDate(),\n\t\tendDate = df.last().date.toDate();\n\tlet interval = df.getInterval();\n\tlet bdf = Timeseries.blank(startDate, endDate, interval, \"missing\").withIndex(\n\t\trow => row.date.valueOf()\n\t);\n\tlet m = bdf.merge(df.withIndex(row => row.date.valueOf())).generateSeries({\n\t\tflag: row =>\n\t\t\trow.value === null || row.value === undefined ? row.flag : undefined\n\t});\n\tm = new Timeseries(m);\n\treturn m;\n}\nTimeseries.prototype.fillMissing = fillMissing;\n\nfunction fillNull({ series = \"value\", value, callback }) {\n\tconst seriesCheck = row => row[series] === null || row[series] === undefined;\n\tif (callback) {\n\t\tlet df = this.generateSeries({\n\t\t\tflag: row =>\n\t\t\t\tseriesCheck(row) ? [\"fill\", ...(row.flag || [])] : row.flag,\n\t\t\t[series]: row => (seriesCheck(row) ? callback(row) : row[series])\n\t\t});\n\t\treturn new Timeseries(df);\n\t} else if (value) {\n\t\tlet df = this.generateSeries({\n\t\t\tflag: row => (seriesCheck(row) ? [\"fill\", ...(row.flag || [])] : row.flag)\n\t\t}).transformSeries({\n\t\t\t[series]: currentValue =>\n\t\t\t\tcurrentValue === null || currentValue === undefined\n\t\t\t\t\t? value\n\t\t\t\t\t: currentValue\n\t\t});\n\t\treturn new Timeseries(df);\n\t} else {\n\t\treturn this;\n\t}\n}\nTimeseries.prototype.fillNull = fillNull;\n\nfunction zeroReplacement(threshold) {\n\tlet df = this;\n\tlet { zeroGroups } = zeroCheck(df, threshold);\n\tlet dfs = zeroGroups.toArray().map((zdf, i) => {\n\t\tzdf = zdf\n\t\t\t.transformSeries({\n\t\t\t\tvalue: () => null,\n\t\t\t\traw: () => 0,\n\t\t\t\tflag: value => [\"zero\", ...(value || [])]\n\t\t\t})\n\t\t\t.withIndex(row => new Date(row.date).valueOf());\n\t\treturn zdf;\n\t});\n\tlet merged = df.withIndex(row => row.date.valueOf()).merge(...dfs);\n\treturn new Timeseries(merged);\n}\nTimeseries.prototype.zeroReplacement = zeroReplacement;\n\nfunction monthlyWithQual() {\n\tlet interval = this.getInterval();\n\tlet ms = intervalToMS(interval);\n\tconst duration = \"month\";\n\tlet dateComparison = row =>\n\t\tdayjs(row.date)\n\t\t\t.startOf()\n\t\t\t.valueOf();\n\tlet ts = this.groupBy(dateComparison)\n\t\t.select(group => {\n\t\t\tconst date = dayjs(group.first().date)\n\t\t\t\t.startOf(duration)\n\t\t\t\t.toDate();\n\t\t\tlet fullCount = Math.floor(\n\t\t\t\tdayjs(date)\n\t\t\t\t\t.endOf(\"month\")\n\t\t\t\t\t.diff(dayjs(date), \"millisecond\") / ms\n\t\t\t);\n\t\t\tlet days = new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\n\t\t\tlet count = group\n\t\t\t\t.getSeries(\"value\")\n\t\t\t\t.where(v => v && v !== 0)\n\t\t\t\t.toArray().length;\n\t\t\tlet value = group\n\t\t\t\t.getSeries(\"value\")\n\t\t\t\t.where(v => !isNaN(v))\n\t\t\t\t.sum();\n\t\t\treturn {\n\t\t\t\tdate,\n\t\t\t\tvalue: isNaN(value) ? 0 : value,\n\t\t\t\tcount,\n\t\t\t\tfullCount,\n\t\t\t\tscore: count / fullCount\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => row.date.toDate());\n\treturn new Timeseries(ts);\n}\nTimeseries.prototype.monthlyWithQual = monthlyWithQual;\n\nfunction threeYearAverage(date, series = \"value\", defaultValue) {\n\tdate = dayjs(date);\n\tif (!defaultValue)\n\t\tdefaultValue = this.getSeries(series)\n\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t.average();\n\n\t// let months = df\n\t// \t.before(date.valueOf())\n\t// \t.where(row => dayjs(row.date).month() === date.month())\n\t// \t.where(row => row.score > 0.9)\n\t// \t.tail(3);\n\tlet months = this.before(date.toDate())\n\t\t.where(row => row.date.month() === date.month())\n\t\t.orderBy(row => dayjs(row.date))\n\t\t.tail(3);\n\t// .where(row => row.score > 0.9);\n\tif (months.count() > 0) {\n\t\tlet val = months\n\t\t\t.getSeries(series)\n\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t.average();\n\t\treturn val;\n\t} else {\n\t\treturn defaultValue;\n\t}\n}\nTimeseries.prototype.threeYearAverage = threeYearAverage;\n\nfunction averageFill() {\n\tlet df = this;\n\tlet avg = df\n\t\t// .where(row => row.score ?row.score >= 0.9)\n\t\t.getSeries(\"value\")\n\t\t.where(v => !isNaN(v) && v !== null)\n\t\t.average();\n\tlet monthlyAvg = df\n\t\t.generateSeries({\n\t\t\trollingAverage: row => df.threeYearAverage(row.date, \"value\", avg)\n\t\t})\n\t\t.generateSeries({\n\t\t\tflag: row => (row.value ? row.flag : [\"filled\", ...(row.flag || [])])\n\t\t})\n\t\t.generateSeries({\n\t\t\tvalue: row => (row.value ? row.value : row.rollingAverage)\n\t\t})\n\t\t.dropSeries([\"rollingAverage\"]);\n\treturn new Timeseries(monthlyAvg);\n}\n\nTimeseries.prototype.averageFill = averageFill;\n\n// Static Methods\nfunction blank(startDate, endDate, [duration, value = 1], flag) {\n\tif ([\"minute\", \"hour\", \"day\", \"month\", \"year\"].indexOf(duration) < 0) {\n\t\tconsole.error(interval);\n\t\tthrow new Error(\"interval type not supported\");\n\t}\n\tstartDate = dayjs(startDate);\n\tendDate = dayjs(endDate);\n\tlet dates = [startDate];\n\tlet interval = intervalToMS([duration, value]);\n\twhile (dates[dates.length - 1].valueOf() < endDate.valueOf()) {\n\t\tdates.push(dayjs(dates[dates.length - 1]).add(value, duration));\n\t}\n\tlet df = new Timeseries(dates.map(date => ({ date })));\n\n\tif (flag) {\n\t\tdf = new Timeseries(\n\t\t\tdf.generateSeries({\n\t\t\t\tflag: row => [flag]\n\t\t\t})\n\t\t);\n\t}\n\n\treturn df;\n}\nTimeseries.blank = blank;\nfunction aggregate(dataframes) {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df => new Timeseries(df));\n\tconst valueColumns = new Set(\n\t\tdataframes.map(df => df.getValueColumns()).reduce((a, b) => a.concat(b), [])\n\t);\n\tconst concatenated = dataForge.DataFrame.concat(dataframes)\n\t\t.groupBy(row => row.date)\n\t\t.select(group => {\n\t\t\tconst date = group.first().date;\n\t\t\tlet o = { date };\n\t\t\tvalueColumns.forEach(c => (o[c] = group.deflate(row => row[c]).sum()));\n\t\t\tgroup\n\t\t\t\t.getColumnNames()\n\t\t\t\t.filter(col => col !== \"date\")\n\t\t\t\t.filter(col => valueColumns.has(col) === -1)\n\t\t\t\t.forEach(col => {\n\t\t\t\t\tlet value = group\n\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t.distinct()\n\t\t\t\t\t\t.toArray();\n\t\t\t\t\tif (value.length === 1) value = value[0];\n\t\t\t\t\to[col] = value;\n\t\t\t\t\treturn;\n\t\t\t\t});\n\t\t\treturn o;\n\t\t})\n\t\t.inflate();\n\t// .toArray();\n\n\treturn new Timeseries(concatenated);\n}\nTimeseries.aggregate = aggregate;\nTimeseries.concat = dataframes => {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df =>\n\t\tnew Timeseries(df).withIndex(row => row.date.valueOf())\n\t);\n\tlet df = dataForge.DataFrame.concat(dataframes);\n\treturn new Timeseries(df);\n};\nTimeseries.merge = dataframes => {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df =>\n\t\tnew Timeseries(df).withIndex(row => row.date.valueOf())\n\t);\n\tlet df = dataForge.DataFrame.merge(dataframes);\n\treturn new Timeseries(df);\n};\n","import { DataFrame } from \"data-forge\";\n\nconst zerogrouping = dataframe => {\n  // group sequential\n  let df = dataframe.variableWindow(\n    (a, b) => a.value === b.value\n  );\n};\n\nfunction zeroCheck(df, threshold = 2) {\n  let zeroGroups = df\n    .variableWindow((a, b) => {\n      return a.value === b.value && a.value === 0;\n    })\n    .where(window => window.getIndex().count() >= threshold);\n  let zeroSummary = zeroGroups\n    .select(window => ({\n      start: window.first().date,\n      end: window.last().date,\n      count: window.count()\n    }))\n    .inflate(); // Series -> dataframe.\n  // .toArray()\n  return { zeroSummary, zeroGroups };\n}\n\nfunction zeroReplacement(df, threshold) {\n  let { zeroGroups } = zeroCheck(df, threshold);\n  let dfs = zeroGroups.toArray().map(zdf => {\n    zdf = zdf\n      .transformSeries({\n        value: () => null,\n        raw: 0,\n        flag: value => [\"zero\", ...(value || [])]\n      })\n      .withIndex(row => new Date(row.date).valueOf());\n    return zdf;\n  });\n  let merged = DataFrame.merge([df, ...dfs]);\n\n  return merged;\n}\nexport { zerogrouping, zeroReplacement, zeroCheck };\n"],"names":["intervalToMS","unit","value","start","dayjs","add","diff","valueFiller","fillType","startValue","endValue","entryIndex","numEntries","overrideValue","dateFunction","date","flag","indexOf","Error","fromPairs","toPairs","map","key","val","averageMonthlyMap","df","Map","group","select","month","first","getSeries","where","v","average","toArray","fillMonthlyByMap","monthMap","row","get","pad","validOnly","series","values","before","toDate","count","last","annualAverage","years","subset","r","year","isSame","after","subtract","bake","appendPair","rval","deflate","x","std","sampleStandardDeviation","mean","_mean","ndf","generateSeries","ares","R","DataFrame","Math","abs","max","lambdaTest","n","i","alpha","p","pValue","t","degreeOfFreedom","Studentt","inv","tValue","lambda","sqrt","pow","modz","mad","median","modifiedZScoreTest","_median","medianAbsoluteDeviation","outliers","sort","a","b","filter","thresholds","upper","min","Infinity","lower","calculateChange","baseline","Timeseries","data","options","dataForge","config","others","valueOf","index","considerAllRows","call","this","removeOutliers","outlierCheck","raw","transformSeries","[object Object]","merge","baselinePercentChange","baselineDF","dfwb","indexer","interval","getInterval","baselineInterval","isEqual","console","error","indexedBaseline","withIndex","at","has","getBaselineValue","delta","prototype","Object","create","constructor","getValueColumns","detectTypes","Type","distinct","Column","ms","end","getIndex","window","detectValues","orderBy","Frequency","Value","ceil","getDateRange","adjustment","startOf","endOf","calculateStatistics","column","filterZeros","filterNegative","isNaN","q1","quantile","q3","iqr","calculateThresholdOptions","k","noflags","Array","isArray","length","floor","esd","dataset","newdf","dataframe","trip","pair","assign","push","outlierValues","outlier","takeWhile","iterations","rosnerTest","box","lowerInner","upperInner","lowerOuter","upperOuter","getBestThreshold","thresholdGroups","ckmeans","reduce","transformAllSeries","adjustmentFunction","exclude","columns","col","forEach","reset","withSeries","groupBy","clean","downsample","duration","dateComparison","valueColumns","sum","getColumnNames","inflate","upsample","fillGaps","durationValue","pairA","pairB","startDate","gapExists","endDate","newEntries","e","gapFill","populate","type","reduceToValue","columnNames","chooseValue","rollingPercentChange","full","percentChange","addBaselineDelta","annualIntensity","normalizeValue","scaler","annualScale","renameSeries","dropSeries","fillMissing","m","blank","undefined","fillNull","callback","seriesCheck","currentValue","zeroReplacement","threshold","zeroGroups","variableWindow","zeroSummary","zeroCheck","dfs","zdf","Date","monthlyWithQual","fullCount","getFullYear","getMonth","getDate","score","threeYearAverage","defaultValue","months","tail","averageFill","avg","rollingAverage","dates","aggregate","dataframes","Set","concat","o","c"],"mappings":"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"}
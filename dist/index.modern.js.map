{"version":3,"file":"index.modern.js","sources":["../src/lib/Timeseries.interval.js","../src/lib/Timeseries.fill.js","../src/lib/Timeseries.statistics.js","../src/lib/misc.js","../src/index.js","../src/lib/Timeseries.zero.js"],"sourcesContent":["import dayjs from \"dayjs\";\n\nconst msToInterval = ms => {\n\tlet start = dayjs();\n\tlet end = dayjs().add(ms);\n\tif (end.diff(start, \"month\", true) >= 11) {\n\t\treturn [\"year\", Math.ceil(end.diff(start, \"year\", true))];\n\t} else if (end.diff(start, \"day\", true) >= 28) {\n\t\treturn [\"month\", Math.ceil(end.diff(start, \"month\", true))];\n\t} else if (end.diff(start, \"hour\", true) >= 23) {\n\t\treturn [\"day\", Math.ceil(end.diff(start, \"day\", true))];\n\t} else if (end.diff(start, \"minute\", true) >= 55) {\n\t\treturn [\"hour\", Math.ceil(end.diff(start, \"hour\", true))];\n\t} else {\n\t\treturn [\"minute\", end.diff(start, \"minute\")];\n\t}\n};\nconst intervalToMS = ([unit, value]) => {\n\tlet start = dayjs();\n\tlet end = dayjs().add(value, unit);\n\treturn end.diff(start);\n};\nfunction calculateInterval(df, startDate, endDate) {\n\tif (!startDate) startDate = df.first.date;\n\tif (!endDate) endDate = df.last.date;\n\tfunction computeInterval(window) {\n\t\treturn window.last() - window.first();\n\t}\n\tconst intervals = df\n\t\t.between(startDate, endDate)\n\t\t.getIndex()\n\t\t.window(2)\n\t\t.select(computeInterval)\n\t\t.detectValues()\n\t\t.orderBy(row => row.Frequency);\n\n\tlet val = intervals.last().Value;\n\treturn msToInterval(val);\n}\nexport { msToInterval, intervalToMS, calculateInterval };\n","import dayjs from \"dayjs\";\nimport fromPairs from \"lodash/fromPairs\";\nimport toPairs from \"lodash/toPairs\";\n\nconst gapExists = ([duration, durationValue = 1]) => (pairA, pairB) => {\n\tconst startDate = pairA[0];\n\tconst endDate = pairB[0];\n\tlet gapSize = Math.floor(\n\t\tdayjs(endDate).diff(startDate, duration, true) / durationValue\n\t);\n\n\tif (gapSize > 0) return true;\n\treturn false;\n};\n\nconst valueFiller = (\n\tfillType,\n\t{ startValue, endValue, entryIndex, numEntries },\n\t{ overrideValue, dateFunction, date, flag }\n) => {\n\tif (\n\t\t[\"pad\", \"interpolate\", \"average\", \"dateFunction\", \"value\"].indexOf(\n\t\t\tfillType\n\t\t) === -1\n\t) {\n\t\tthrow new Error(\"fill Type not supported\");\n\t}\n\tlet value;\n\tif (fillType === \"pad\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\treturn [key, startValue[key]];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", \"pad\"];\n\t} else if (fillType === \"interpolate\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv =\n\t\t\t\t\tstartValue[key] +\n\t\t\t\t\t(entryIndex + 1) *\n\t\t\t\t\t\t((endValue[key] - startValue[key]) / (numEntries + 1));\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"average\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv = (startValue[key] + endValue[key]) / numEntries;\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"dateFunction\" && dateFunction) {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv = dateFunction(date);\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"value\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv;\n\t\t\t\tif (typeof overrideValue === \"number\") {\n\t\t\t\t\tnv = overrideValue;\n\t\t\t\t} else {\n\t\t\t\t\tnv = overrideValue[key];\n\t\t\t\t}\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\treturn [key, null];\n\t\t\t})\n\t\t);\n\t\tflag = [\"fill\"];\n\t}\n\treturn { ...value, flag };\n};\n\nconst gapFill = (\n\tfillType,\n\t[duration, durationValue],\n\t{ overrideValue, dateFunction, flag } = {}\n) => (pairA, pairB) => {\n\t// Fill values forward.\n\n\tconst startDate = dayjs(pairA[0]);\n\tconst endDate = dayjs(pairB[0]);\n\tlet gapSize = Math.floor(\n\t\tdayjs(endDate).diff(startDate, duration) / durationValue\n\t);\n\tconst numEntries = gapSize - 1;\n\tconst startValue = pairA[1];\n\tconst endValue = pairB[1];\n\tconst newEntries = [];\n\tfor (let entryIndex = 0; entryIndex < numEntries; ++entryIndex) {\n\t\tlet adjustment = valueFiller(\n\t\t\t\tfillType,\n\t\t\t\t{ startValue, endValue, entryIndex, numEntries },\n\t\t\t\t{\n\t\t\t\t\toverrideValue,\n\t\t\t\t\tdateFunction,\n\t\t\t\t\tflag\n\t\t\t\t}\n\t\t\t),\n\t\t\tdate = dayjs(startDate)\n\t\t\t\t.add((entryIndex + 1) * durationValue, duration)\n\t\t\t\t.toDate();\n\t\tlet e = [date.valueOf(), Object.assign({}, adjustment, { date })];\n\t\tnewEntries.push(e);\n\t}\n\n\treturn newEntries;\n};\n\n// Basic Fill Functions\nconst averageMonthlyMap = df =>\n\tnew Map(\n\t\tdf\n\t\t\t.group(\"month\")\n\t\t\t.select(group => ({\n\t\t\t\tmonth: group.first().date.month(),\n\t\t\t\tvalue: group\n\t\t\t\t\t.getSeries(\"value\")\n\t\t\t\t\t.where(v => v)\n\t\t\t\t\t.average()\n\t\t\t}))\n\t\t\t.toArray()\n\t\t\t.map(({ month, value }) => [month, value])\n\t);\nconst annualMonthlyAverageMap = df =>\n\tnew Map(\n\t\tdf\n\t\t\t.groupBy(row => row.date.year())\n\t\t\t.select(group => {\n\t\t\t\tconst date = group.first().date.startOf(\"year\");\n\t\t\t\tlet ts = new Timeseries(group).downsample([\"month\", 1], \"avg\");\n\t\t\t\tlet avg = ts.getSeries(\"value\").average();\n\t\t\t\tlet map = averageMonthlyMap(ts);\n\t\t\t\tmap.set(\"avg\", avg);\n\t\t\t\treturn [date.year(), map];\n\t\t\t})\n\t\t\t.toArray()\n\t);\nconst monthlyRollingAverageMap = (df, { years = 3, series = \"value\" } = {}) => {\n\tlet months = df\n\t\t.groupBy(row => row.date.startOf(\"month\").toDate())\n\t\t.select(group => {\n\t\t\tlet date = group.first().date.startOf(\"month\");\n\t\t\tlet value = group\n\t\t\t\t.getSeries(series)\n\t\t\t\t.where(v => v)\n\t\t\t\t.average();\n\t\t\treturn { date, value };\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => row.date.toDate())\n\t\t.bake();\n\tlet data = months\n\t\t.groupBy(row => row.date.month())\n\t\t.select(group => {\n\t\t\tlet averages = new Map(\n\t\t\t\tgroup\n\t\t\t\t\t.rollingWindow(years)\n\t\t\t\t\t.select(window => [\n\t\t\t\t\t\twindow.last().date.year(),\n\t\t\t\t\t\twindow.getSeries(series).average()\n\t\t\t\t\t])\n\t\t\t);\n\t\t\tlet na = group\n\t\t\t\t.where(row => !averages.has(row.date.year()))\n\t\t\t\t.forEach(row => {\n\t\t\t\t\tlet value =\n\t\t\t\t\t\tmonths.before(row.date.toDate()).count() > 0\n\t\t\t\t\t\t\t? months.before(row.date.toDate()).last()[series]\n\t\t\t\t\t\t\t: months.getSeries(series).average();\n\t\t\t\t\taverages.set(row.date.year(), value);\n\t\t\t\t});\n\n\t\t\tlet month = group.first().date.month();\n\t\t\treturn [month, averages];\n\t\t})\n\t\t.toArray();\n\treturn new Map(data);\n};\n\nconst fillMonthlyByMap = monthMap => row => monthMap.get(row.date.month());\nconst fillMonthlyBAnnualyMap = annualMonthlyMap => row =>\n\tannualMonthlyMap.get(row.date.month()).get(row.date.year());\n\nconst pad = (df, { validOnly = true, series = \"value\" } = {}) => row => {\n\tlet values = df\n\t\t.before(row.date.toDate())\n\t\t.getSeries(series)\n\t\t.where(v => v);\n\tlet value = values.count() > 0 ? values.last() : 0;\n\t// console.log(row.date.toDate(), value);\n\treturn value;\n};\nconst annualAverage = (\n\tdf,\n\t{ validOnly = true, series = \"value\", years = 3, defaultValue } = {}\n) => row => {\n\tlet subset = df\n\t\t.subset([\"date\", series])\n\t\t.after(row.date.subtract(years, \"year\").toDate())\n\t\t.before(row.date.toDate())\n\t\t.bake();\n\tlet values = subset\n\t\t.where(r => r.date.month() === row.date.month())\n\t\t.where(r => r.date.date() === row.date.date())\n\t\t.where(r => r.date.hour() === row.date.hour())\n\t\t.where(r => r.date.minute() === row.date.minute())\n\t\t.getSeries(series)\n\t\t.where(v => v);\n\n\tlet value;\n\tif (values.count() < years) {\n\t\tvalue = values\n\t\t\t.appendPair([\n\t\t\t\tnull,\n\t\t\t\tsubset\n\t\t\t\t\t.getSeries(series)\n\t\t\t\t\t.where(v => v)\n\t\t\t\t\t.average()\n\t\t\t])\n\t\t\t.average();\n\t} else {\n\t\tvalue = values.average();\n\t}\n\t// console.log(row.date.toDate(), values.toArray(), value);\n\treturn value;\n};\nexport {\n\tgapExists,\n\tgapFill,\n\taverageMonthlyMap,\n\tfillMonthlyByMap,\n\tpad,\n\tannualAverage,\n\tannualMonthlyAverageMap,\n\tmonthlyRollingAverageMap,\n\tfillMonthlyBAnnualyMap\n};\n","// Source: https://www.itl.nist.gov/div898/handbook/eda/section3/eda35h3.htm\n// https://vsp.pnnl.gov/help/Vsample/Rosners_Outlier_Test.htm\n// https://www.itl.nist.gov/div898/handbook/prc/section1/prc16.htm\n// https://www.math.ucla.edu/~tom/distributions/KolSmir2.html?\nimport { DataFrame } from \"data-forge\";\nimport {\n  sampleStandardDeviation,\n  mean as _mean,\n  max,\n  median as _median,\n  medianAbsoluteDeviation,\n  quantile\n} from \"simple-statistics\";\nimport { Studentt } from \"distributions\";\nimport dayjs from \"dayjs\";\n\nfunction rval(df) {\n  let values = df.deflate(row => row.x).toArray();\n  let std = sampleStandardDeviation(values);\n  let mean = _mean(values);\n  if (std === 0) {\n    let ndf = df.generateSeries({ ares: row => 0 });\n    return { R: 0, std, mean, df: ndf };\n  }\n  let ndf = new DataFrame({\n    values: values.map(x => ({\n      x,\n      ares: Math.abs(x - mean) / std\n    }))\n  });\n  let R = max(ndf.deflate(row => row.ares).toArray());\n  return { R, df: ndf, std, mean };\n}\n\nfunction pValue(n, i, alpha) {\n  let p = 1 - alpha / (2 * (n - i + 1));\n  return p;\n}\nfunction tValue(p, degreeOfFreedom) {\n  let qt = new Studentt(degreeOfFreedom);\n  let t = qt.inv(p);\n  return t;\n}\n//\nfunction lambdaTest(n, i, alpha) {\n  let p = pValue(n, i, alpha);\n  let df = n - i - 1;\n  let t = tValue(p, df);\n  let lambda =\n    (t * (n - i)) /\n    Math.sqrt((n - i - 1 + Math.pow(t, 2)) * (n - i + 1));\n  return { lambda, p, t };\n}\nfunction rosnerTest(dataset = [], k = 10, alpha = 0.05) {\n  let dataframe = new DataFrame({\n    values: dataset.map(x => ({ x }))\n  });\n  let n = dataframe.getSeries(\"x\").count();\n  let newdf;\n  let i = 1;\n  let outliers = [];\n  let trip = false;\n  while (i <= k) {\n    let pair = {};\n    let s = Date.now();\n    if (i === 1) {\n      let { R, df, mean, std } = rval(dataframe);\n      newdf = df.where(row => row.ares !== R);\n      pair = Object.assign({}, pair, {\n        mean,\n        std,\n        Value: df\n          .where(row => row.ares === R)\n          .getSeries(\"x\")\n          .first(),\n        R\n      });\n    } else {\n      let { R, df, mean, std } = rval(newdf);\n      newdf = df.where(row => row.ares !== R);\n      pair = Object.assign({}, pair, {\n        mean,\n        std,\n        Value: df\n          .where(row => row.ares === R)\n          .getSeries(\"x\")\n          .first(),\n        R\n      });\n    }\n    let { lambda, p, t } = lambdaTest(n, i, alpha);\n    pair = Object.assign({}, pair, { lambda });\n    outliers.push(pair);\n    if (trip && pair.R > pair.lambda) trip = false;\n    if (pair.R === 0) break;\n    if (pair.R < pair.lambda) {\n      if (trip) {\n        break;\n      } else {\n        trip = true;\n      }\n    }\n    i++;\n  }\n  outliers = new DataFrame(outliers)\n    .generateSeries({\n      outlier: row => row.R > row.lambda\n    })\n    .takeWhile(row => row.outlier);\n  let outlierValues = outliers\n    .where(row => row.Value > 0)\n    .deflate(row => row.Value);\n  let thresholds = {\n    lower: 0,\n    upper:\n      outlierValues.count() > 0 ? outlierValues.min() : Infinity\n  };\n  return {\n    outliers,\n    thresholds,\n    iterations: i\n  };\n}\nconst modz = (value, mad, median) => {\n  return (0.6745 * (value - median)) / mad;\n};\nfunction modifiedZScoreTest(values) {\n  let median = _median(values);\n  let mad = medianAbsoluteDeviation(values);\n  values = values\n    .sort((a, b) => b - a)\n    .filter(v => v > 0)\n    .map(v => [v, modz(v, mad, median)]);\n  let outliers = values.filter(\n    ([v, modz]) => Math.abs(modz) >= 3.5\n  );\n  let upper = Math.min(\n    ...[Infinity, ...outliers.map(v => v[0])]\n  );\n  // let score,\n  // \tvalue,\n  // \tthreshold = Infinity,\n  // \tindex = 0;\n  // do {\n  // \tvalue = values[index];\n  // \tscore = modz(value, mad, median);\n  // \tif (Math.abs(score) >= 3.5) threshold = value;\n  // } while (score >= 3.5);\n  return { thresholds: { upper, lower: 0 } };\n}\nfunction boxPlotTest(values) {\n  let q1 = quantile(values, 0.25);\n  let q3 = quantile(values, 0.75);\n  let iqr = q3 - q1;\n  return {\n    thresholds: {\n      lowerInner: q1 - 1.5 * iqr,\n      upperInner: q1 - 3 * iqr,\n      lowerOuter: q3 + 1.5 * iqr,\n      upperOuter: q3 + 3 * iqr\n    }\n  };\n}\nfunction calculateOutlierThresholds(\n  df,\n  { k, filterZeros = true } = {}\n) {\n  let values = df\n    .where(\n      row =>\n        row.flag === null ||\n        row.flag === undefined ||\n        Array.isArray(row.flag)\n    )\n    .where(row => !isNaN(row.value) && row.value !== null)\n    .getSeries(\"value\")\n    .bake();\n  if (filterZeros) values = values.where(value => value > 0);\n  if (!k) {\n    k =\n      values.count() < 1000\n        ? Math.floor(values.count() * 0.15)\n        : Math.min(...[1000, Math.floor(values.count() * 0.02)]);\n  }\n  if (values.count < 5) return {};\n  let { outliers, threshold } = rosnerTest(values.toArray(), k);\n  return { outliers, threshold };\n}\n\nfunction zeroCheck(df, threshold = 2) {\n  let zeroGroups = df\n    .variableWindow((a, b) => {\n      return a.value === b.value && a.value === 0;\n    })\n    .where(window => window.getIndex().count() >= threshold);\n  let zeroSummary = zeroGroups\n    .select(window => ({\n      start: window.first().date,\n      end: window.last().date,\n      count: window.count()\n    }))\n    .inflate(); // Series -> dataframe.\n  // .toArray()\n  return { zeroSummary, zeroGroups };\n}\n\nfunction zeroReplacement(df, threshold) {\n  let { zeroGroups } = zeroCheck(df, threshold);\n  zeroGroups.forEach(dff => {\n    dff = dff.transformSeries({\n      value: value => null,\n      flag: value => [\"zero\"]\n    });\n    df = DataFrame.merge([df, dff]);\n  });\n  return df;\n}\nfunction isOutlier(value, { lower, upper }) {\n  if (value < lower || value >= upper) {\n    return true;\n  }\n  return false;\n}\nfunction validMean(df) {\n  let values = df\n    .getSeries(\"value\")\n    .where(value => typeof value === \"number\");\n  return values.average();\n}\nfunction validMonthlyMeanMap(df) {\n  let dateComparison = row =>\n    dayjs(row.date)\n      .startOf(\"month\")\n      .month();\n\n  df = df\n    .where(row => typeof row.value === \"number\")\n    .groupBy(dateComparison)\n    .select(group => ({\n      month: new Date(group.first().date).getMonth(),\n      value: group.deflate(row => row.value).average()\n    }));\n  return new Map(\n    df.toArray().map(({ month, value }) => [month, value])\n  );\n}\n\nfunction quality(df) {\n  let count = df.getIndex().count();\n  let valid = df\n    .getSeries(\"flag\")\n    .where(\n      value =>\n        value === null ||\n        (Array.isArray(value) && value.length === 0)\n    )\n    .count();\n  let missing = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"missing\") !== -1)\n    .count();\n  let dirty = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"clean\") !== -1)\n    .count();\n  let zerod = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"zero\") !== -1)\n    .count();\n  let breakdown = {\n    valid: valid / count,\n    missing: missing / count,\n    invalid: (dirty + zerod) / count\n  };\n  let report = {\n    accuracy: (1 - dirty / count) * 4,\n    completeness: 4 * breakdown.valid,\n    consistency: 4 * ((count - missing - zerod) / count)\n  };\n  return { breakdown, report, count };\n}\n\nexport {\n  rosnerTest,\n  modifiedZScoreTest,\n  boxPlotTest,\n  calculateOutlierThresholds,\n  zeroReplacement,\n  isOutlier,\n  validMean,\n  validMonthlyMeanMap,\n  quality\n};\n","import dayjs from \"dayjs\";\nexport const annualScale = (start, end) =>\n\t365 / dayjs(end).diff(dayjs(start), \"day\");\nexport const calculateChange = (baseline, value) =>\n\t(value - baseline) / baseline;\n","import dayjs from \"dayjs\";\nimport dataForge from \"data-forge\";\nimport { msToInterval, intervalToMS } from \"./lib/Timeseries.interval\";\nimport isEqual from \"lodash/isEqual\";\nimport has from \"lodash/has\";\nimport get from \"lodash/get\";\nimport fromPairs from \"lodash/fromPairs\";\nimport {\n\tgapExists,\n\tgapFill,\n\taverageMonthlyMap,\n\tfillMonthlyByMap,\n\tpad,\n\tannualAverage,\n\tannualMonthlyAverageMap,\n\tmonthlyRollingAverageMap,\n\tfillMonthlyBAnnualyMap\n} from \"./lib/Timeseries.fill\";\nimport {\n\tckmeans,\n\tmax,\n\tmedianAbsoluteDeviation,\n\tquantile\n} from \"simple-statistics\";\n\nimport {\n\trosnerTest,\n\tboxPlotTest,\n\tmodifiedZScoreTest\n} from \"./lib/Timeseries.statistics\";\nimport { annualScale, calculateChange } from \"./lib/misc\";\nimport { zeroCheck } from \"./lib/Timeseries.zero\";\n\nexport default Timeseries;\n// Fill Options\nexport {\n\tannualAverage,\n\taverageMonthlyMap,\n\tannualMonthlyAverageMap,\n\tmonthlyRollingAverageMap,\n\tfillMonthlyBAnnualyMap,\n\tfillMonthlyByMap,\n\tpad\n};\nfunction Timeseries(data, options = {}) {\n\t// const { msIndex } = options;\n\tif (data instanceof Timeseries) {\n\t\treturn data;\n\t}\n\tif (data instanceof dataForge.DataFrame) {\n\t\tdata = data.toArray();\n\t}\n\n\tdata = data\n\t\t.map(({ date, ...others }) => ({ date: dayjs(date), ...others }))\n\t\t.sort((a, b) => a.date.valueOf() - b.date.valueOf());\n\tlet config = {\n\t\t// columns: ['date', 'value', 'raw', 'flag'],\n\t\tvalues: data,\n\t\tindex: data.map(({ date }) => date.toDate()),\n\t\tconsiderAllRows: true\n\t};\n\tdataForge.DataFrame.call(this, config);\n}\n\nTimeseries.prototype = Object.create(dataForge.DataFrame.prototype);\nTimeseries.prototype.constructor = Timeseries;\n\n// Getters\nfunction getValueColumns() {\n\treturn this.detectTypes()\n\t\t.where(row => row.Type === \"number\")\n\t\t.distinct(row => row.Column)\n\t\t.getSeries(\"Column\")\n\t\t.toArray();\n}\nfunction interval() {\n\tconst computeInterval = window => window.last() - window.first();\n\tconst intervals = this.getIndex()\n\t\t.window(2)\n\t\t.select(computeInterval)\n\t\t.detectValues()\n\t\t.orderBy(row => -row.Frequency);\n\t// .orderBy(row => row.Value);\n\n\tlet val = intervals.first().Value;\n\n\treturn msToInterval(val);\n}\n\nfunction dateRange(unit, adjustment) {\n\tlet start = dayjs(this.first().date),\n\t\tend = dayjs(this.last().date);\n\tif (adjustment) {\n\t\tstart = start.startOf(adjustment);\n\t\tend = end.endOf(adjustment);\n\t}\n\treturn end.diff(start, unit);\n}\nTimeseries.prototype.getValueColumns = getValueColumns;\nTimeseries.prototype.getInterval = interval;\nTimeseries.prototype.getDateRange = dateRange;\n\n// Methods\nfunction calculateThresholdOptions({\n\tk,\n\tfilterZeros = true,\n\tfilterNegative = true\n} = {}) {\n\tlet noflags = this.where(\n\t\trow =>\n\t\t\trow.flag === null ||\n\t\t\trow.flag === undefined ||\n\t\t\t(Array.isArray(row.flag) && row.flag.length === 0)\n\t)\n\t\t.where(row => !isNaN(row.value) && row.value !== null)\n\t\t.getSeries(\"value\");\n\tif (filterZeros) noflags = noflags.where(value => value !== 0);\n\tif (filterNegative) noflags = noflags.where(value => value > 0);\n\tif (!k) {\n\t\tk =\n\t\t\tnoflags.count() < 1000\n\t\t\t\t? Math.floor(noflags.count() * 0.15)\n\t\t\t\t: Math.min(...[1000, Math.floor(noflags.count() * 0.02)]);\n\t}\n\tif (noflags.count() < 5) return {};\n\tlet { thresholds: esd } = rosnerTest(noflags.toArray(), k);\n\tlet { thresholds: box } = boxPlotTest(noflags.toArray());\n\tlet { thresholds: modz } = modifiedZScoreTest(noflags.toArray());\n\treturn { esd, box, modz };\n}\n\nfunction getBestThreshold() {\n\ttry {\n\t\tlet thresholds = this.calculateThresholdOptions();\n\t\tconst thresholdGroups = ckmeans(\n\t\t\t[\n\t\t\t\tget(thresholds, \"esd.upper\", null),\n\t\t\t\tget(thresholds, \"modz.upper\", null),\n\t\t\t\tget(thresholds, \"box.lowerOuter\", null),\n\t\t\t\tget(thresholds, \"box.upperOuter\", null)\n\t\t\t].filter(v => v),\n\t\t\t2\n\t\t);\n\t\tlet threshold_actual = max(\n\t\t\tthresholdGroups.reduce((a, b) => (a.length > b.length ? a : b))\n\t\t);\n\t\treturn threshold_actual;\n\t} catch (error) {\n\t\tconsole.error(error);\n\t\tthrow new Error(\"Cannot determine threshold\");\n\t}\n}\n\nfunction calculateStatistics(options = {}) {\n\tconst {\n\t\tcolumn = \"value\",\n\t\tfilterZeros = false,\n\t\tfilterNegative = true\n\t} = options;\n\tlet series = this.deflate(row => row[column]).where(value => !isNaN(value));\n\tif (filterNegative) series = series.where(value => value >= 0);\n\tif (filterZeros) series = series.where(value => value !== 0);\n\tlet median = series.median();\n\tlet mean = series.average();\n\tlet count = series.count();\n\tlet std = series.std();\n\tlet min = series.min();\n\tlet max = series.max();\n\tlet mad = medianAbsoluteDeviation(series.toArray());\n\tlet q1 = quantile(series.toArray(), 0.25);\n\tlet q3 = quantile(series.toArray(), 0.75);\n\tlet iqr = q3 - q1;\n\tlet stats = {\n\t\tmedian,\n\t\tmean,\n\t\tcount,\n\t\tstd,\n\t\tmin,\n\t\tmax,\n\t\tmad,\n\t\tq1,\n\t\tq3,\n\t\tiqr\n\t};\n\treturn stats;\n}\n\nTimeseries.prototype.calculateStatistics = calculateStatistics;\nTimeseries.prototype.calculateThresholdOptions = calculateThresholdOptions;\nTimeseries.prototype.getBestThreshold = getBestThreshold;\n\n// Chainable Methods\nfunction transformAllSeries(adjustmentFunction, { exclude }) {\n\tlet df = this;\n\tlet columns = (columns = df\n\t\t.detectTypes()\n\t\t.where(row => row.Type === \"number\")\n\t\t.distinct(row => row.Column)\n\t\t.getSeries(\"Column\")\n\t\t.toArray());\n\tif (exclude && Array.isArray(exclude)) {\n\t\tcolumns = columns.filter(col => exclude.indexOf(col) === -1);\n\t}\n\tcolumns.forEach(col => {\n\t\tdf = df.transformSeries({\n\t\t\t[col]: value => {\n\t\t\t\tif (isNaN(value)) {\n\t\t\t\t\treturn value;\n\t\t\t\t} else {\n\t\t\t\t\treturn adjustmentFunction(value);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\treturn df;\n}\n\nTimeseries.prototype.transformAllSeries = transformAllSeries;\n\nfunction reset() {\n\tlet df = this.withSeries({\n\t\tvalue: row =>\n\t\t\trow.flag && Array.isArray(row.flag) && row.flag.length > 0\n\t\t\t\t? row.raw\n\t\t\t\t: row.value\n\t})\n\t\t.subset([\"date\", \"value\"])\n\t\t.where(row => !isNaN(row.value) && row.value !== null);\n\treturn new Timeseries(df);\n}\nTimeseries.prototype.reset = reset;\n\nfunction group(interval, toArray) {\n\tif ([\"hour\", \"day\", \"month\", \"year\"].indexOf(interval) === -1)\n\t\tthrow new Error(\"interval type not supported\");\n\tlet dateComparison = row => dayjs(row.date).startOf(interval);\n\tlet groups = this.groupBy(dateComparison);\n\treturn groups;\n}\n\nTimeseries.prototype.group = group;\n\nfunction removeOutliers({ series = \"value\", lower, upper } = {}) {\n\tif (lower > upper) throw new Error(\"thresholds invalid\");\n\tlet outlierCheck = (value, lower, upper) => value < lower || value > upper;\n\n\tlet outliers = this.where(row => outlierCheck(row[series], lower, upper))\n\t\t.generateSeries({\n\t\t\traw: row => row[series],\n\t\t\tflag: ({ flag = [] }) => [\"outlier\", ...flag]\n\t\t})\n\t\t.transformSeries({\n\t\t\t[series]: value => null\n\t\t});\n\n\tlet merged = this.merge(outliers);\n\treturn new Timeseries(merged);\n}\n\nTimeseries.prototype.removeOutliers = removeOutliers;\nTimeseries.prototype.clean = removeOutliers;\n\nfunction downsample([duration, value], fillType = \"sum\") {\n\tif ([\"hour\", \"day\", \"month\", \"year\"].indexOf(duration) === -1)\n\t\tthrow new Error(\"interval type not supported\");\n\tif ([\"sum\", \"avg\", \"median\"].indexOf(fillType) === -1) {\n\t\tthrow new Error(\"aggregation type not suppported, only:\");\n\t}\n\tlet dateComparison = row => row.date.startOf(duration);\n\tlet valueColumns = this.getValueColumns();\n\tif (value) {\n\t\tdateComparison = row => row.date.startOf(duration).add(value, duration);\n\t}\n\tlet df = this.groupBy(dateComparison)\n\t\t.select(group => {\n\t\t\tconst date = group.first().date.startOf(duration);\n\t\t\treturn {\n\t\t\t\tdate,\n\t\t\t\t...fromPairs([\n\t\t\t\t\t...valueColumns.map(col => {\n\t\t\t\t\t\tlet value;\n\t\t\t\t\t\tswitch (fillType) {\n\t\t\t\t\t\t\tcase \"median\":\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.median();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"avg\":\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.average();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t// sum\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.sum();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn [col, value];\n\t\t\t\t\t}),\n\t\t\t\t\t...group\n\t\t\t\t\t\t.getColumnNames()\n\t\t\t\t\t\t.filter(col => col !== \"date\")\n\t\t\t\t\t\t.filter(col => valueColumns.indexOf(col) === -1)\n\t\t\t\t\t\t.map(col => {\n\t\t\t\t\t\t\tlet value = group\n\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t.distinct()\n\t\t\t\t\t\t\t\t.toArray();\n\t\t\t\t\t\t\tif (value.length === 1) value = value[0];\n\t\t\t\t\t\t\treturn [col, value];\n\t\t\t\t\t\t})\n\t\t\t\t])\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => dayjs(row.date).toDate());\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.downsample = downsample;\n\nfunction upsample([duration, value], fillType = \"avg\") {\n\t// Dont use this b/c it has the raw and flag values\n\tlet df = this.fillGaps(\n\t\tgapExists([duration, value]),\n\t\tgapFill(fillType, [duration, value])\n\t);\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.upsample = upsample;\n\nfunction populate(value, type = \"avg\") {\n\tlet v;\n\tswitch (type) {\n\t\tcase \"fill\":\n\t\t\tv = value;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tv = value / this.count();\n\t\t\tbreak;\n\t}\n\tlet df = this.generateSeries({ value: row => v });\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.populate = populate;\n\nfunction reduceToValue(columnNames) {\n\tfunction chooseValue(row, columnNames = []) {\n\t\tlet values = columnNames.map(n => row[n]).filter(v => v);\n\t\treturn values[0] || 0;\n\t}\n\tlet df = this.generateSeries({\n\t\tvalue: row => chooseValue(row, columnNames)\n\t}).subset([\"date\", \"value\"]);\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.reduceToValue = reduceToValue;\n\n// Baseline Functions\n\nfunction rollingPercentChange(col = \"value\") {\n\tlet df = this;\n\tlet delta = df.withSeries(\"delta\", full.getSeries(\"value\").percentChange());\n\treturn new Timeseries(delta);\n}\n\nTimeseries.prototype.rollingPercentChange = rollingPercentChange;\nfunction baselinePercentChange(baselineDF) {\n\t// Only Change in Year\n\tif (!(baselineDF instanceof Timeseries))\n\t\tbaselineDF = new Timeseries(baselineDF);\n\tlet dfwb;\n\tif (baselineDF.count() > 1) {\n\t\tlet interval = this.getInterval();\n\t\tlet baselineInterval = baselineDF.interval;\n\t\tif (!isEqual(interval, baselineInterval)) {\n\t\t\tconsole.error(interval, baselineInterval);\n\t\t\tthrow new Error(\"baseline and data intervals do not match\");\n\t\t}\n\t\tlet indexer;\n\t\tswitch (interval[0]) {\n\t\t\tcase \"day\":\n\t\t\t\tindexer = date => `${date.month()}-${date.date()}`;\n\t\t\t\tbreak;\n\t\t\tcase \"month\":\n\t\t\t\tindexer = date => date.month();\n\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tindexer = date => 0;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tlet indexedBaseline = baselineDF.withIndex(row => indexer(row.date));\n\t\tlet getBaselineValue = index => {\n\t\t\tlet at = indexedBaseline.at(index);\n\t\t\tif (at && has(at, \"value\")) {\n\t\t\t\treturn at.value;\n\t\t\t} else {\n\t\t\t\treturn indexedBaseline.getSeries(\"value\").average();\n\t\t\t}\n\t\t};\n\t\tdfwb = this.generateSeries({\n\t\t\tbaseline: row => getBaselineValue(indexer(row.date))\n\t\t});\n\t} else {\n\t\tdfwb = this.generateSeries({\n\t\t\tbaseline: row => baselineDF.first().value\n\t\t});\n\t}\n\tdfwb = dfwb.generateSeries({\n\t\tdelta: row => calculateChange(row.baseline, row.value)\n\t});\n\treturn new Timeseries(dfwb);\n}\n\nTimeseries.prototype.baselinePercentChange = baselinePercentChange;\nTimeseries.prototype.addBaselineDelta = baselinePercentChange;\n\nfunction annualIntensity(normalizeValue = 1) {\n\tlet interval = this.getInterval();\n\tlet annual = this.groupBy(row => row.date.year())\n\t\t.select(group => {\n\t\t\tlet startDate = group.first().date;\n\t\t\tlet endDate = group\n\t\t\t\t.last()\n\t\t\t\t.date.add(interval[1] || 1, interval[0] || \"month\");\n\t\t\tlet scaler = annualScale(startDate, endDate);\n\t\t\treturn {\n\t\t\t\tstartDate,\n\t\t\t\tendDate,\n\t\t\t\t...fromPairs(\n\t\t\t\t\tthis.getValueColumns().map(col => [\n\t\t\t\t\t\tcol,\n\t\t\t\t\t\t(group\n\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t.where(v => v)\n\t\t\t\t\t\t\t.sum() *\n\t\t\t\t\t\t\tscaler) /\n\t\t\t\t\t\t\tnormalizeValue\n\t\t\t\t\t])\n\t\t\t\t)\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.renameSeries({ startDate: \"date\" })\n\t\t.dropSeries(\"endDate\");\n\treturn new Timeseries(annual);\n}\n\nTimeseries.prototype.annualIntensity = annualIntensity;\n\n// Fill Functions\n\nfunction fillMissing() {\n\tlet df = this;\n\tlet startDate = df.first().date.toDate(),\n\t\tendDate = df.last().date.toDate();\n\tlet interval = df.getInterval();\n\tlet bdf = Timeseries.blank(startDate, endDate, interval, \"missing\").withIndex(\n\t\trow => row.date.valueOf()\n\t);\n\tlet m = bdf.merge(df.withIndex(row => row.date.valueOf())).generateSeries({\n\t\tflag: row =>\n\t\t\trow.value === null || row.value === undefined ? row.flag : undefined\n\t});\n\tm = new Timeseries(m);\n\treturn m;\n}\nTimeseries.prototype.fillMissing = fillMissing;\n\nfunction fillNull({ series = \"value\", value, callback }) {\n\tconst seriesCheck = row => row[series] === null || row[series] === undefined;\n\tif (callback) {\n\t\tlet df = this.generateSeries({\n\t\t\tflag: row =>\n\t\t\t\tseriesCheck(row) ? [\"fill\", ...(row.flag || [])] : row.flag,\n\t\t\t[series]: row => (seriesCheck(row) ? callback(row) : row[series])\n\t\t});\n\t\treturn new Timeseries(df);\n\t} else if (value) {\n\t\tlet df = this.generateSeries({\n\t\t\tflag: row => (seriesCheck(row) ? [\"fill\", ...(row.flag || [])] : row.flag)\n\t\t}).transformSeries({\n\t\t\t[series]: currentValue =>\n\t\t\t\tcurrentValue === null || currentValue === undefined\n\t\t\t\t\t? value\n\t\t\t\t\t: currentValue\n\t\t});\n\t\treturn new Timeseries(df);\n\t} else {\n\t\treturn this;\n\t}\n}\nTimeseries.prototype.fillNull = fillNull;\n\nfunction zeroReplacement(threshold) {\n\tlet df = this;\n\tlet { zeroGroups } = zeroCheck(df, threshold);\n\tlet dfs = zeroGroups.toArray().map((zdf, i) => {\n\t\tzdf = zdf\n\t\t\t.transformSeries({\n\t\t\t\tvalue: () => null,\n\t\t\t\traw: () => 0,\n\t\t\t\tflag: value => [\"zero\", ...(value || [])]\n\t\t\t})\n\t\t\t.withIndex(row => new Date(row.date).valueOf());\n\t\treturn zdf;\n\t});\n\tlet merged = df.withIndex(row => row.date.valueOf()).merge(...dfs);\n\treturn new Timeseries(merged);\n}\nTimeseries.prototype.zeroReplacement = zeroReplacement;\n\nfunction monthlyWithQual() {\n\tlet interval = this.getInterval();\n\tlet ms = intervalToMS(interval);\n\tconst duration = \"month\";\n\tlet dateComparison = row =>\n\t\tdayjs(row.date)\n\t\t\t.startOf()\n\t\t\t.valueOf();\n\tlet ts = this.groupBy(dateComparison)\n\t\t.select(group => {\n\t\t\tconst date = dayjs(group.first().date)\n\t\t\t\t.startOf(duration)\n\t\t\t\t.toDate();\n\t\t\tlet fullCount = Math.floor(\n\t\t\t\tdayjs(date)\n\t\t\t\t\t.endOf(\"month\")\n\t\t\t\t\t.diff(dayjs(date), \"millisecond\") / ms\n\t\t\t);\n\t\t\tlet days = new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\n\t\t\tlet count = group\n\t\t\t\t.getSeries(\"value\")\n\t\t\t\t.where(v => v && v !== 0)\n\t\t\t\t.toArray().length;\n\t\t\tlet value = group\n\t\t\t\t.getSeries(\"value\")\n\t\t\t\t.where(v => !isNaN(v))\n\t\t\t\t.sum();\n\t\t\treturn {\n\t\t\t\tdate,\n\t\t\t\tvalue: isNaN(value) ? 0 : value,\n\t\t\t\tcount,\n\t\t\t\tfullCount,\n\t\t\t\tscore: count / fullCount\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => row.date.toDate());\n\treturn new Timeseries(ts);\n}\nTimeseries.prototype.monthlyWithQual = monthlyWithQual;\n\nfunction threeYearAverage(date, series = \"value\", defaultValue) {\n\tdate = dayjs(date);\n\tif (!defaultValue)\n\t\tdefaultValue = this.getSeries(series)\n\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t.average();\n\n\t// let months = df\n\t// \t.before(date.valueOf())\n\t// \t.where(row => dayjs(row.date).month() === date.month())\n\t// \t.where(row => row.score > 0.9)\n\t// \t.tail(3);\n\tlet months = this.before(date.toDate())\n\t\t.where(row => row.date.month() === date.month())\n\t\t.orderBy(row => dayjs(row.date))\n\t\t.tail(3);\n\t// .where(row => row.score > 0.9);\n\tif (months.count() > 0) {\n\t\tlet val = months\n\t\t\t.getSeries(series)\n\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t.average();\n\t\treturn val;\n\t} else {\n\t\treturn defaultValue;\n\t}\n}\nTimeseries.prototype.threeYearAverage = threeYearAverage;\n\nfunction averageFill() {\n\tlet df = this;\n\tlet avg = df\n\t\t// .where(row => row.score ?row.score >= 0.9)\n\t\t.getSeries(\"value\")\n\t\t.where(v => !isNaN(v) && v !== null)\n\t\t.average();\n\tlet monthlyAvg = df\n\t\t.generateSeries({\n\t\t\trollingAverage: row => df.threeYearAverage(row.date, \"value\", avg)\n\t\t})\n\t\t.generateSeries({\n\t\t\tflag: row => (row.value ? row.flag : [\"filled\", ...(row.flag || [])])\n\t\t})\n\t\t.generateSeries({\n\t\t\tvalue: row => (row.value ? row.value : row.rollingAverage)\n\t\t})\n\t\t.dropSeries([\"rollingAverage\"]);\n\treturn new Timeseries(monthlyAvg);\n}\n\nTimeseries.prototype.averageFill = averageFill;\n\n// Static Methods\nfunction blank(startDate, endDate, [duration, value = 1], flag) {\n\tif ([\"minute\", \"hour\", \"day\", \"month\", \"year\"].indexOf(duration) < 0) {\n\t\tconsole.error(interval);\n\t\tthrow new Error(\"interval type not supported\");\n\t}\n\tstartDate = dayjs(startDate);\n\tendDate = dayjs(endDate);\n\tlet dates = [startDate];\n\tlet interval = intervalToMS([duration, value]);\n\twhile (dates[dates.length - 1].valueOf() < endDate.valueOf()) {\n\t\tdates.push(dayjs(dates[dates.length - 1]).add(value, duration));\n\t}\n\tlet df = new Timeseries(dates.map(date => ({ date })));\n\n\tif (flag) {\n\t\tdf = new Timeseries(\n\t\t\tdf.generateSeries({\n\t\t\t\tflag: row => [flag]\n\t\t\t})\n\t\t);\n\t}\n\n\treturn df;\n}\nTimeseries.blank = blank;\nfunction aggregate(dataframes) {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df => new Timeseries(df));\n\tconst valueColumns = new Set(\n\t\tdataframes.map(df => df.getValueColumns()).reduce((a, b) => a.concat(b), [])\n\t);\n\tconst concatenated = dataForge.DataFrame.concat(dataframes)\n\t\t.groupBy(row => row.date)\n\t\t.select(group => {\n\t\t\tconst date = group.first().date;\n\t\t\tlet o = { date };\n\t\t\tvalueColumns.forEach(c => (o[c] = group.deflate(row => row[c]).sum()));\n\t\t\tgroup\n\t\t\t\t.getColumnNames()\n\t\t\t\t.filter(col => col !== \"date\")\n\t\t\t\t.filter(col => valueColumns.has(col) === -1)\n\t\t\t\t.forEach(col => {\n\t\t\t\t\tlet value = group\n\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t.distinct()\n\t\t\t\t\t\t.toArray();\n\t\t\t\t\tif (value.length === 1) value = value[0];\n\t\t\t\t\to[col] = value;\n\t\t\t\t\treturn;\n\t\t\t\t});\n\t\t\treturn o;\n\t\t})\n\t\t.inflate();\n\t// .toArray();\n\n\treturn new Timeseries(concatenated);\n}\nTimeseries.aggregate = aggregate;\nTimeseries.concat = dataframes => {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df =>\n\t\tnew Timeseries(df).withIndex(row => row.date.valueOf())\n\t);\n\tlet df = dataForge.DataFrame.concat(dataframes);\n\treturn new Timeseries(df);\n};\nTimeseries.merge = dataframes => {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df =>\n\t\tnew Timeseries(df).withIndex(row => row.date.valueOf())\n\t);\n\tlet df = dataForge.DataFrame.merge(dataframes);\n\treturn new Timeseries(df);\n};\n","import { DataFrame } from \"data-forge\";\n\nconst zerogrouping = dataframe => {\n  // group sequential\n  let df = dataframe.variableWindow(\n    (a, b) => a.value === b.value\n  );\n};\n\nfunction zeroCheck(df, threshold = 2) {\n  let zeroGroups = df\n    .variableWindow((a, b) => {\n      return a.value === b.value && a.value === 0;\n    })\n    .where(window => window.getIndex().count() >= threshold);\n  let zeroSummary = zeroGroups\n    .select(window => ({\n      start: window.first().date,\n      end: window.last().date,\n      count: window.count()\n    }))\n    .inflate(); // Series -> dataframe.\n  // .toArray()\n  return { zeroSummary, zeroGroups };\n}\n\nfunction zeroReplacement(df, threshold) {\n  let { zeroGroups } = zeroCheck(df, threshold);\n  let dfs = zeroGroups.toArray().map(zdf => {\n    zdf = zdf\n      .transformSeries({\n        value: () => null,\n        raw: 0,\n        flag: value => [\"zero\", ...(value || [])]\n      })\n      .withIndex(row => new Date(row.date).valueOf());\n    return zdf;\n  });\n  let merged = DataFrame.merge([df, ...dfs]);\n\n  return merged;\n}\nexport { zerogrouping, zeroReplacement, zeroCheck };\n"],"names":["intervalToMS","unit","value","start","dayjs","add","diff","valueFiller","fillType","startValue","endValue","entryIndex","numEntries","overrideValue","dateFunction","date","flag","indexOf","Error","fromPairs","toPairs","map","key","val","averageMonthlyMap","df","Map","group","select","month","first","getSeries","where","v","average","toArray","annualMonthlyAverageMap","groupBy","row","year","startOf","ts","Timeseries","downsample","avg","set","monthlyRollingAverageMap","years","series","months","toDate","inflate","withIndex","bake","data","averages","rollingWindow","window","last","has","forEach","before","count","fillMonthlyByMap","monthMap","get","fillMonthlyBAnnualyMap","annualMonthlyMap","pad","validOnly","values","annualAverage","subset","after","subtract","r","hour","minute","appendPair","rval","deflate","x","std","sampleStandardDeviation","mean","_mean","ndf","generateSeries","ares","R","DataFrame","Math","abs","max","lambdaTest","n","i","alpha","p","pValue","t","degreeOfFreedom","Studentt","inv","tValue","lambda","sqrt","pow","modz","mad","median","modifiedZScoreTest","_median","medianAbsoluteDeviation","outliers","sort","a","b","filter","thresholds","upper","min","Infinity","lower","calculateChange","baseline","options","dataForge","config","others","valueOf","index","considerAllRows","call","this","removeOutliers","outlierCheck","raw","transformSeries","[object Object]","merge","baselinePercentChange","baselineDF","dfwb","indexer","interval","getInterval","baselineInterval","isEqual","console","error","indexedBaseline","at","getBaselineValue","delta","prototype","Object","create","constructor","getValueColumns","detectTypes","Type","distinct","Column","ms","end","getIndex","detectValues","orderBy","Frequency","Value","ceil","getDateRange","adjustment","endOf","calculateStatistics","column","filterZeros","filterNegative","isNaN","q1","quantile","q3","iqr","calculateThresholdOptions","k","noflags","Array","isArray","length","floor","esd","dataset","newdf","dataframe","trip","pair","assign","push","outlierValues","outlier","takeWhile","iterations","rosnerTest","box","lowerInner","upperInner","lowerOuter","upperOuter","getBestThreshold","thresholdGroups","ckmeans","reduce","transformAllSeries","adjustmentFunction","exclude","columns","col","reset","withSeries","clean","duration","dateComparison","valueColumns","sum","getColumnNames","upsample","fillGaps","durationValue","pairA","pairB","startDate","gapExists","endDate","newEntries","e","gapFill","populate","type","reduceToValue","columnNames","chooseValue","rollingPercentChange","full","percentChange","addBaselineDelta","annualIntensity","normalizeValue","scaler","annualScale","renameSeries","dropSeries","fillMissing","m","blank","undefined","fillNull","callback","seriesCheck","currentValue","zeroReplacement","threshold","zeroGroups","variableWindow","zeroSummary","zeroCheck","dfs","zdf","Date","monthlyWithQual","fullCount","getFullYear","getMonth","getDate","score","threeYearAverage","defaultValue","tail","averageFill","rollingAverage","dates","aggregate","dataframes","Set","concat","o","c"],"mappings":"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"}
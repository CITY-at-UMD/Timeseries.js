{"version":3,"file":"index.modern.js","sources":["../src/lib/Timeseries.interval.js","../src/lib/Timeseries.fill.js","../src/lib/Timeseries.statistics.js","../src/lib/misc.js","../src/index.js"],"sourcesContent":["import dayjs from \"dayjs\";\n\nconst msToInterval = ms => {\n\tlet start = dayjs();\n\tlet end = dayjs().add(ms);\n\tif (end.diff(start, \"month\", true) >= 11) {\n\t\treturn [\"year\", Math.ceil(end.diff(start, \"year\", true))];\n\t} else if (end.diff(start, \"day\", true) >= 28) {\n\t\treturn [\"month\", Math.ceil(end.diff(start, \"month\", true))];\n\t} else if (end.diff(start, \"hour\", true) >= 23) {\n\t\treturn [\"day\", Math.ceil(end.diff(start, \"day\", true))];\n\t} else if (end.diff(start, \"minute\", true) >= 55) {\n\t\treturn [\"hour\", Math.ceil(end.diff(start, \"hour\", true))];\n\t} else {\n\t\treturn [\"minute\", end.diff(start, \"minute\")];\n\t}\n};\nconst intervalToMS = ([unit, value]) => {\n\tlet start = dayjs();\n\tlet end = dayjs().add(value, unit);\n\treturn end.diff(start);\n};\nfunction calculateInterval(df, startDate, endDate) {\n\tif (!startDate) startDate = df.first.date;\n\tif (!endDate) endDate = df.last.date;\n\tfunction computeInterval(window) {\n\t\treturn window.last() - window.first();\n\t}\n\tconst intervals = df\n\t\t.between(startDate, endDate)\n\t\t.getIndex()\n\t\t.window(2)\n\t\t.select(computeInterval)\n\t\t.detectValues()\n\t\t.orderBy(row => row.Frequency);\n\n\tlet val = intervals.last().Value;\n\treturn msToInterval(val);\n}\nexport { msToInterval, intervalToMS, calculateInterval };\n","import dayjs from \"dayjs\";\nimport fromPairs from \"lodash/fromPairs\";\nimport toPairs from \"lodash/toPairs\";\nimport { mean } from \"simple-statistics\";\nimport { Timeseries } from \"../index\";\nconst gapExists = ([duration, durationValue = 1]) => (pairA, pairB) => {\n\tconst startDate = pairA[0];\n\tconst endDate = pairB[0];\n\tlet gapSize = Math.floor(\n\t\tdayjs(endDate).diff(startDate, duration, true) / durationValue\n\t);\n\n\tif (gapSize > 0) return true;\n\treturn false;\n};\n\nconst valueFiller = (\n\tfillType,\n\t{ startValue, endValue, entryIndex, numEntries },\n\t{ overrideValue, dateFunction, date, flag }\n) => {\n\tif (\n\t\t[\"pad\", \"interpolate\", \"average\", \"dateFunction\", \"value\"].indexOf(\n\t\t\tfillType\n\t\t) === -1\n\t) {\n\t\tthrow new Error(\"fill Type not supported\");\n\t}\n\tlet value;\n\tif (fillType === \"pad\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\treturn [key, startValue[key]];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", \"pad\"];\n\t} else if (fillType === \"interpolate\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv =\n\t\t\t\t\tstartValue[key] +\n\t\t\t\t\t(entryIndex + 1) *\n\t\t\t\t\t\t((endValue[key] - startValue[key]) / (numEntries + 1));\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"average\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv = (startValue[key] + endValue[key]) / numEntries;\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"dateFunction\" && dateFunction) {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv = dateFunction(date);\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else if (fillType === \"value\") {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\tlet nv;\n\t\t\t\tif (typeof overrideValue === \"number\") {\n\t\t\t\t\tnv = overrideValue;\n\t\t\t\t} else {\n\t\t\t\t\tnv = overrideValue[key];\n\t\t\t\t}\n\t\t\t\treturn [key, nv];\n\t\t\t})\n\t\t);\n\t\tflag = flag ? flag : [\"fill\", fillType];\n\t} else {\n\t\tvalue = fromPairs(\n\t\t\ttoPairs(startValue).map(([key, val]) => {\n\t\t\t\treturn [key, null];\n\t\t\t})\n\t\t);\n\t\tflag = [\"fill\"];\n\t}\n\treturn { ...value, flag };\n};\n\nconst gapFill = (\n\tfillType,\n\t[duration, durationValue],\n\t{ overrideValue, dateFunction, flag } = {}\n) => (pairA, pairB) => {\n\t// Fill values forward.\n\n\tconst startDate = dayjs(pairA[0]);\n\tconst endDate = dayjs(pairB[0]);\n\tlet gapSize = Math.floor(\n\t\tdayjs(endDate).diff(startDate, duration) / durationValue\n\t);\n\tconst numEntries = gapSize - 1;\n\tconst startValue = pairA[1];\n\tconst endValue = pairB[1];\n\tconst newEntries = [];\n\tfor (let entryIndex = 0; entryIndex < numEntries; ++entryIndex) {\n\t\tlet adjustment = valueFiller(\n\t\t\t\tfillType,\n\t\t\t\t{ startValue, endValue, entryIndex, numEntries },\n\t\t\t\t{\n\t\t\t\t\toverrideValue,\n\t\t\t\t\tdateFunction,\n\t\t\t\t\tflag\n\t\t\t\t}\n\t\t\t),\n\t\t\tdate = dayjs(startDate)\n\t\t\t\t.add((entryIndex + 1) * durationValue, duration)\n\t\t\t\t.toDate();\n\t\tlet e = [date.valueOf(), Object.assign({}, adjustment, { date })];\n\t\tnewEntries.push(e);\n\t}\n\n\treturn newEntries;\n};\n\n// Basic Fill Functions\nconst averageMonthlyMap = df => {\n\tlet data = df.group(\"month\").select(group => ({\n\t\tmonth: group.first().date.month(),\n\t\tvalue: group\n\t\t\t.getSeries(\"value\")\n\t\t\t.where(v => v)\n\t\t\t.average()\n\t}));\n\tlet m = new Map(data.toArray().map(({ month, value }) => [month, value]));\n\tlet avg = data.getSeries(\"value\").average();\n\tm.set(\"default\", avg);\n\treturn m;\n};\n\nconst annualMonthlyAverageMap = df => {\n\tlet data = df\n\t\t.groupBy(row => row.date.year())\n\t\t.select(group => {\n\t\t\tconst date = group.first().date.startOf(\"year\");\n\t\t\tlet ts = new Timeseries(group).downsample([\"month\", 1], \"avg\");\n\t\t\tlet avg = ts.getSeries(\"value\").average();\n\t\t\tlet map = averageMonthlyMap(ts);\n\t\t\tmap.set(\"avg\", avg);\n\t\t\treturn [date.year(), map];\n\t\t});\n\tlet m = new Map(data.toArray());\n\t// let deafult =\n\treturn m;\n};\n\nconst monthlyRollingAverageMap = (\n\tdf,\n\t{ years = 3, series = \"value\", aggregator = \"average\", validOnly = true } = {}\n) => {\n\tlet months = df\n\t\t.groupBy(row => row.date.startOf(\"month\").toDate())\n\t\t.select(group => {\n\t\t\tlet date = group.first().date.startOf(\"month\");\n\t\t\tlet value = group\n\t\t\t\t.getSeries(series)\n\t\t\t\t.where(v => (validOnly ? Boolean(v) : true))\n\t\t\t\t.average();\n\t\t\treturn { date, value };\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => row.date.toDate())\n\t\t.bake();\n\tlet data = months\n\t\t.groupBy(row => row.date.month())\n\t\t.select(group => {\n\t\t\tlet values = new Map(\n\t\t\t\tgroup.rollingWindow(years).select(window => [\n\t\t\t\t\twindow.last().date.year(),\n\t\t\t\t\twindow\n\t\t\t\t\t\t.getSeries(series)\n\t\t\t\t\t\t.where(v => (validOnly ? Boolean(v) : true))\n\t\t\t\t\t\t.average() ||\n\t\t\t\t\t\tgroup\n\t\t\t\t\t\t\t.getSeries(series)\n\t\t\t\t\t\t\t.where(v => (validOnly ? Boolean(v) : true))\n\t\t\t\t\t\t\t.average()\n\t\t\t\t])\n\t\t\t);\n\t\t\tgroup\n\t\t\t\t.where(row => !values.has(row.date.year()))\n\t\t\t\t.forEach(row => {\n\t\t\t\t\tlet value =\n\t\t\t\t\t\tmonths.before(row.date.toDate()).count() > 0\n\t\t\t\t\t\t\t? months.before(row.date.toDate()).last()[series]\n\t\t\t\t\t\t\t: months.getSeries(series).average();\n\t\t\t\t\tvalues.set(row.date.year(), value);\n\t\t\t\t});\n\n\t\t\tlet month = group.first().date.month();\n\t\t\treturn [month, values];\n\t\t});\n\n\treturn new Map(data.toArray());\n};\n\nconst fillMonthlyByMap = monthMap => row => monthMap.get(row.date.month());\nconst fillMonthlyBAnnualyMap = annualMonthlyMap => row => {\n\tlet month = row.date.month(),\n\t\tyear = row.date.year();\n\tif (annualMonthlyMap.has(month)) {\n\t\tif (annualMonthlyMap.has(month)) {\n\t\t\treturn annualMonthlyMap.get(month).get(year);\n\t\t} else {\n\t\t\treturn mean([...annualMonthlyMap.get(month).values()]);\n\t\t}\n\t} else {\n\t\treturn mean(\n\t\t\t[...annualMonthlyMap.values()].map(m =>\n\t\t\t\t[...m.values()].reduce((a, b) => a.concat(b), [])\n\t\t\t)\n\t\t);\n\t}\n};\n\nconst pad = (df, { validOnly = true, series = \"value\" } = {}) => row => {\n\tlet values = df\n\t\t.before(row.date.toDate())\n\t\t.getSeries(series)\n\t\t.where(v => v);\n\tlet value = values.count() > 0 ? values.last() : 0;\n\treturn value;\n};\nconst annualAverage = (\n\tdf,\n\t{ validOnly = true, series = \"value\", years = 3, defaultValue } = {}\n) => row => {\n\tlet subset = df\n\t\t.subset([\"date\", series])\n\t\t.after(row.date.subtract(years, \"year\").toDate())\n\t\t.before(row.date.toDate())\n\t\t.bake();\n\tlet values = subset\n\t\t.where(r => r.date.month() === row.date.month())\n\t\t.where(r => r.date.date() === row.date.date())\n\t\t.where(r => r.date.hour() === row.date.hour())\n\t\t.where(r => r.date.minute() === row.date.minute())\n\t\t.getSeries(series)\n\t\t.where(v => v);\n\n\tlet value;\n\tif (values.count() < years) {\n\t\tvalue = values\n\t\t\t.appendPair([\n\t\t\t\tnull,\n\t\t\t\tsubset\n\t\t\t\t\t.getSeries(series)\n\t\t\t\t\t.where(v => v)\n\t\t\t\t\t.average()\n\t\t\t])\n\t\t\t.average();\n\t} else {\n\t\tvalue = values.average();\n\t}\n\treturn value;\n};\nexport {\n\tgapExists,\n\tgapFill,\n\taverageMonthlyMap,\n\tfillMonthlyByMap,\n\tpad,\n\tannualAverage,\n\tannualMonthlyAverageMap,\n\tmonthlyRollingAverageMap,\n\tfillMonthlyBAnnualyMap\n};\n","// Source: https://www.itl.nist.gov/div898/handbook/eda/section3/eda35h3.htm\n// https://vsp.pnnl.gov/help/Vsample/Rosners_Outlier_Test.htm\n// https://www.itl.nist.gov/div898/handbook/prc/section1/prc16.htm\n// https://www.math.ucla.edu/~tom/distributions/KolSmir2.html?\nimport { DataFrame } from \"data-forge\";\nimport {\n  sampleStandardDeviation,\n  mean as _mean,\n  max,\n  median as _median,\n  medianAbsoluteDeviation,\n  quantile\n} from \"simple-statistics\";\nimport { Studentt } from \"distributions\";\nimport dayjs from \"dayjs\";\n\nfunction rval(df) {\n  let values = df.deflate(row => row.x).toArray();\n  let std = sampleStandardDeviation(values);\n  let mean = _mean(values);\n  if (std === 0) {\n    let ndf = df.generateSeries({ ares: row => 0 });\n    return { R: 0, std, mean, df: ndf };\n  }\n  let ndf = new DataFrame({\n    values: values.map(x => ({\n      x,\n      ares: Math.abs(x - mean) / std\n    }))\n  });\n  let R = max(ndf.deflate(row => row.ares).toArray());\n  return { R, df: ndf, std, mean };\n}\n\nfunction pValue(n, i, alpha) {\n  let p = 1 - alpha / (2 * (n - i + 1));\n  return p;\n}\nfunction tValue(p, degreeOfFreedom) {\n  let qt = new Studentt(degreeOfFreedom);\n  let t = qt.inv(p);\n  return t;\n}\n//\nfunction lambdaTest(n, i, alpha) {\n  let p = pValue(n, i, alpha);\n  let df = n - i - 1;\n  let t = tValue(p, df);\n  let lambda =\n    (t * (n - i)) /\n    Math.sqrt((n - i - 1 + Math.pow(t, 2)) * (n - i + 1));\n  return { lambda, p, t };\n}\nfunction rosnerTest(dataset = [], k = 10, alpha = 0.05) {\n  let dataframe = new DataFrame({\n    values: dataset.map(x => ({ x }))\n  });\n  let n = dataframe.getSeries(\"x\").count();\n  let newdf;\n  let i = 1;\n  let outliers = [];\n  let trip = false;\n  while (i <= k) {\n    let pair = {};\n    let s = Date.now();\n    if (i === 1) {\n      let { R, df, mean, std } = rval(dataframe);\n      newdf = df.where(row => row.ares !== R);\n      pair = Object.assign({}, pair, {\n        mean,\n        std,\n        Value: df\n          .where(row => row.ares === R)\n          .getSeries(\"x\")\n          .first(),\n        R\n      });\n    } else {\n      let { R, df, mean, std } = rval(newdf);\n      newdf = df.where(row => row.ares !== R);\n      pair = Object.assign({}, pair, {\n        mean,\n        std,\n        Value: df\n          .where(row => row.ares === R)\n          .getSeries(\"x\")\n          .first(),\n        R\n      });\n    }\n    let { lambda, p, t } = lambdaTest(n, i, alpha);\n    pair = Object.assign({}, pair, { lambda });\n    outliers.push(pair);\n    if (trip && pair.R > pair.lambda) trip = false;\n    if (pair.R === 0) break;\n    if (pair.R < pair.lambda) {\n      if (trip) {\n        break;\n      } else {\n        trip = true;\n      }\n    }\n    i++;\n  }\n  outliers = new DataFrame(outliers)\n    .generateSeries({\n      outlier: row => row.R > row.lambda\n    })\n    .takeWhile(row => row.outlier);\n  let outlierValues = outliers\n    .where(row => row.Value > 0)\n    .deflate(row => row.Value);\n  let thresholds = {\n    lower: 0,\n    upper:\n      outlierValues.count() > 0 ? outlierValues.min() : Infinity\n  };\n  return {\n    outliers,\n    thresholds,\n    iterations: i\n  };\n}\nconst modz = (value, mad, median) => {\n  return (0.6745 * (value - median)) / mad;\n};\nfunction modifiedZScoreTest(values) {\n  let median = _median(values);\n  let mad = medianAbsoluteDeviation(values);\n  values = values\n    .sort((a, b) => b - a)\n    .filter(v => v > 0)\n    .map(v => [v, modz(v, mad, median)]);\n  let outliers = values.filter(\n    ([v, modz]) => Math.abs(modz) >= 3.5\n  );\n  let upper = Math.min(\n    ...[Infinity, ...outliers.map(v => v[0])]\n  );\n  // let score,\n  // \tvalue,\n  // \tthreshold = Infinity,\n  // \tindex = 0;\n  // do {\n  // \tvalue = values[index];\n  // \tscore = modz(value, mad, median);\n  // \tif (Math.abs(score) >= 3.5) threshold = value;\n  // } while (score >= 3.5);\n  return { thresholds: { upper, lower: 0 } };\n}\nfunction boxPlotTest(values) {\n  let q1 = quantile(values, 0.25);\n  let q3 = quantile(values, 0.75);\n  let iqr = q3 - q1;\n  return {\n    thresholds: {\n      lowerInner: q1 - 1.5 * iqr,\n      upperInner: q1 - 3 * iqr,\n      lowerOuter: q3 + 1.5 * iqr,\n      upperOuter: q3 + 3 * iqr\n    }\n  };\n}\nfunction calculateOutlierThresholds(\n  df,\n  { k, filterZeros = true } = {}\n) {\n  let values = df\n    .where(\n      row =>\n        row.flag === null ||\n        row.flag === undefined ||\n        Array.isArray(row.flag)\n    )\n    .where(row => !isNaN(row.value) && row.value !== null)\n    .getSeries(\"value\")\n    .bake();\n  if (filterZeros) values = values.where(value => value > 0);\n  if (!k) {\n    k =\n      values.count() < 1000\n        ? Math.floor(values.count() * 0.15)\n        : Math.min(...[1000, Math.floor(values.count() * 0.02)]);\n  }\n  if (values.count < 5) return {};\n  let { outliers, threshold } = rosnerTest(values.toArray(), k);\n  return { outliers, threshold };\n}\n\nfunction zeroCheck(df, threshold = 2) {\n  let zeroGroups = df\n    .variableWindow((a, b) => {\n      return a.value === b.value && a.value === 0;\n    })\n    .where(window => window.getIndex().count() >= threshold);\n  let zeroSummary = zeroGroups\n    .select(window => ({\n      start: window.first().date,\n      end: window.last().date,\n      count: window.count()\n    }))\n    .inflate(); // Series -> dataframe.\n  // .toArray()\n  return { zeroSummary, zeroGroups };\n}\n\nfunction zeroReplacement(df, threshold) {\n  let { zeroGroups } = zeroCheck(df, threshold);\n  zeroGroups.forEach(dff => {\n    dff = dff.transformSeries({\n      value: value => null,\n      flag: value => [\"zero\"]\n    });\n    df = DataFrame.merge([df, dff]);\n  });\n  return df;\n}\nfunction isOutlier(value, { lower, upper }) {\n  if (value < lower || value >= upper) {\n    return true;\n  }\n  return false;\n}\nfunction validMean(df) {\n  let values = df\n    .getSeries(\"value\")\n    .where(value => typeof value === \"number\");\n  return values.average();\n}\nfunction validMonthlyMeanMap(df) {\n  let dateComparison = row =>\n    dayjs(row.date)\n      .startOf(\"month\")\n      .month();\n\n  df = df\n    .where(row => typeof row.value === \"number\")\n    .groupBy(dateComparison)\n    .select(group => ({\n      month: new Date(group.first().date).getMonth(),\n      value: group.deflate(row => row.value).average()\n    }));\n  return new Map(\n    df.toArray().map(({ month, value }) => [month, value])\n  );\n}\n\nfunction quality(df) {\n  let count = df.getIndex().count();\n  let valid = df\n    .getSeries(\"flag\")\n    .where(\n      value =>\n        value === null ||\n        (Array.isArray(value) && value.length === 0)\n    )\n    .count();\n  let missing = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"missing\") !== -1)\n    .count();\n  let dirty = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"clean\") !== -1)\n    .count();\n  let zerod = df\n    .getSeries(\"flag\")\n    .where(value => Array.isArray(value))\n    .where(value => value.indexOf(\"zero\") !== -1)\n    .count();\n  let breakdown = {\n    valid: valid / count,\n    missing: missing / count,\n    invalid: (dirty + zerod) / count\n  };\n  let report = {\n    accuracy: (1 - dirty / count) * 4,\n    completeness: 4 * breakdown.valid,\n    consistency: 4 * ((count - missing - zerod) / count)\n  };\n  return { breakdown, report, count };\n}\n\nexport {\n  rosnerTest,\n  modifiedZScoreTest,\n  boxPlotTest,\n  calculateOutlierThresholds,\n  zeroReplacement,\n  isOutlier,\n  validMean,\n  validMonthlyMeanMap,\n  quality\n};\n","import dayjs from \"dayjs\";\nexport const annualScale = (start, end) =>\n\t365 / dayjs(end).diff(dayjs(start), \"day\");\nexport const calculateChange = (baseline, value) =>\n\t(value - baseline) / baseline;\n","import dayjs from \"dayjs\";\nimport dataForge from \"data-forge\";\nimport { msToInterval, intervalToMS } from \"./lib/Timeseries.interval\";\nimport isEqual from \"lodash/isEqual\";\nimport has from \"lodash/has\";\nimport get from \"lodash/get\";\nimport fromPairs from \"lodash/fromPairs\";\nimport {\n\tgapExists,\n\tgapFill,\n\taverageMonthlyMap,\n\tfillMonthlyByMap,\n\tpad,\n\tannualAverage,\n\tannualMonthlyAverageMap,\n\tmonthlyRollingAverageMap,\n\tfillMonthlyBAnnualyMap\n} from \"./lib/Timeseries.fill\";\nimport {\n\tckmeans,\n\tmax,\n\tmedianAbsoluteDeviation,\n\tquantile\n} from \"simple-statistics\";\n\nimport {\n\trosnerTest,\n\tboxPlotTest,\n\tmodifiedZScoreTest\n} from \"./lib/Timeseries.statistics\";\nimport { annualScale, calculateChange } from \"./lib/misc\";\n\n// export default ;\n// Fill Options\nexport {\n\tTimeseries,\n\tannualAverage,\n\taverageMonthlyMap,\n\tannualMonthlyAverageMap,\n\tmonthlyRollingAverageMap,\n\tfillMonthlyBAnnualyMap,\n\tfillMonthlyByMap,\n\tpad\n};\nfunction Timeseries(data = [], options = {}) {\n\t// const { msIndex } = options;\n\tif (data instanceof Timeseries) {\n\t\treturn data;\n\t}\n\tif (data instanceof dataForge.DataFrame) {\n\t\tdata = data.toArray();\n\t}\n\n\tdata = data\n\t\t.map(({ date, ...others }) => ({ date: dayjs(date), ...others }))\n\t\t.sort((a, b) => a.date.valueOf() - b.date.valueOf());\n\tlet config = {\n\t\t// columns: ['date', 'value', 'raw', 'flag'],\n\t\tvalues: data,\n\t\tindex: data.map(({ date }) => date.toDate()),\n\t\tconsiderAllRows: true\n\t};\n\tdataForge.DataFrame.call(this, config);\n}\n\nTimeseries.prototype = Object.create(dataForge.DataFrame.prototype);\nTimeseries.prototype.constructor = Timeseries;\n\n// Getters\nfunction getValueColumns() {\n\treturn this.detectTypes()\n\t\t.where(row => row.Type === \"number\")\n\t\t.distinct(row => row.Column)\n\t\t.getSeries(\"Column\")\n\t\t.toArray();\n}\nfunction interval() {\n\tconst computeInterval = window => window.last() - window.first();\n\tconst intervals = this.getIndex()\n\t\t.window(2)\n\t\t.select(computeInterval)\n\t\t.detectValues()\n\t\t.orderBy(row => -row.Frequency);\n\t// .orderBy(row => row.Value);\n\n\tlet val = intervals.first().Value;\n\n\treturn msToInterval(val);\n}\n\nfunction dateRange(unit, adjustment) {\n\tlet start = dayjs(this.first().date),\n\t\tend = dayjs(this.last().date);\n\tif (adjustment) {\n\t\tstart = start.startOf(adjustment);\n\t\tend = end.endOf(adjustment);\n\t}\n\treturn end.diff(start, unit);\n}\nTimeseries.prototype.getValueColumns = getValueColumns;\nTimeseries.prototype.getInterval = interval;\nTimeseries.prototype.getDateRange = dateRange;\n\n// Statistics\nfunction cvrsme(actual, simulated) {\n\tlet df = this.subset([actual, simulated])\n\t\t.resetIndex()\n\t\t.generateSeries({\n\t\t\tactual: row => row[actual] || 0,\n\t\t\tsimulated: row => row[simulated] || 0\n\t\t})\n\t\t.dropSeries([actual, simulated])\n\t\t.generateSeries({ diff: row => row.actual - row.simulated });\n\tlet n = df.count();\n\tlet p = 1.0;\n\tlet ybar = df.getSeries(\"actual\").sum() / n;\n\tlet v = Math.sqrt(df.getSeries(\"diff\").sum() / (n - p)) / ybar;\n\treturn v;\n}\nfunction nmbe(actual, simulated) {\n\tlet df = this.subset([actual, simulated])\n\t\t.resetIndex()\n\t\t.generateSeries({\n\t\t\tactual: row => row[actual] || 0,\n\t\t\tsimulated: row => row[simulated] || 0\n\t\t})\n\t\t.dropSeries([actual, simulated])\n\t\t.generateSeries({ diff: row => row.actual - row.simulated });\n\n\tlet n = df.count();\n\tlet p = 1.0;\n\tlet ybar = df.getSeries(\"actual\").sum() / n;\n\tlet b = df.getSeries(\"diff\").sum() / ((n - p) * ybar);\n\treturn b;\n}\nTimeseries.prototype.cvrsme = cvrsme;\nTimeseries.prototype.nmbe = nmbe;\n\n// Methods\nfunction calculateThresholdOptions({\n\tk,\n\tfilterZeros = true,\n\tfilterNegative = true\n} = {}) {\n\tlet noflags = this.where(\n\t\trow =>\n\t\t\trow.flag === null ||\n\t\t\trow.flag === undefined ||\n\t\t\t(Array.isArray(row.flag) && row.flag.length === 0)\n\t)\n\t\t.where(row => !isNaN(row.value) && row.value !== null)\n\t\t.getSeries(\"value\");\n\tif (filterZeros) noflags = noflags.where(value => value !== 0);\n\tif (filterNegative) noflags = noflags.where(value => value > 0);\n\tif (!k) {\n\t\tk =\n\t\t\tnoflags.count() < 1000\n\t\t\t\t? Math.floor(noflags.count() * 0.15)\n\t\t\t\t: Math.min(...[1000, Math.floor(noflags.count() * 0.02)]);\n\t}\n\tif (noflags.count() < 5) return {};\n\tlet { thresholds: esd } = rosnerTest(noflags.toArray(), k);\n\tlet { thresholds: box } = boxPlotTest(noflags.toArray());\n\tlet { thresholds: modz } = modifiedZScoreTest(noflags.toArray());\n\treturn { esd, box, modz };\n}\n\nfunction getBestThreshold() {\n\ttry {\n\t\tlet thresholds = this.calculateThresholdOptions();\n\t\tconst thresholdGroups = ckmeans(\n\t\t\t[\n\t\t\t\tget(thresholds, \"esd.upper\", null),\n\t\t\t\tget(thresholds, \"modz.upper\", null),\n\t\t\t\tget(thresholds, \"box.lowerOuter\", null),\n\t\t\t\tget(thresholds, \"box.upperOuter\", null)\n\t\t\t].filter(v => v),\n\t\t\t2\n\t\t);\n\t\tlet threshold_actual = max(\n\t\t\tthresholdGroups.reduce((a, b) => (a.length > b.length ? a : b))\n\t\t);\n\t\treturn threshold_actual;\n\t} catch (error) {\n\t\tconsole.error(error);\n\t\tthrow new Error(\"Cannot determine threshold\");\n\t}\n}\n\nfunction calculateStatistics(options = {}) {\n\tconst {\n\t\tcolumn = \"value\",\n\t\tfilterZeros = false,\n\t\tfilterNegative = true\n\t} = options;\n\tlet series = this.deflate(row => row[column]).where(value => !isNaN(value));\n\tif (filterNegative) series = series.where(value => value >= 0);\n\tif (filterZeros) series = series.where(value => value !== 0);\n\tlet median = series.median();\n\tlet mean = series.average();\n\tlet count = series.count();\n\tlet std = series.std();\n\tlet min = series.min();\n\tlet max = series.max();\n\tlet mad = medianAbsoluteDeviation(series.toArray());\n\tlet q1 = quantile(series.toArray(), 0.25);\n\tlet q3 = quantile(series.toArray(), 0.75);\n\tlet iqr = q3 - q1;\n\tlet stats = {\n\t\tmedian,\n\t\tmean,\n\t\tcount,\n\t\tstd,\n\t\tmin,\n\t\tmax,\n\t\tmad,\n\t\tq1,\n\t\tq3,\n\t\tiqr\n\t};\n\treturn stats;\n}\n\nTimeseries.prototype.calculateStatistics = calculateStatistics;\nTimeseries.prototype.calculateThresholdOptions = calculateThresholdOptions;\nTimeseries.prototype.getBestThreshold = getBestThreshold;\n\n// Chainable Methods\nfunction betweenDates(start, end) {\n\tstart = dayjs(start).toDate();\n\tend = dayjs(end).toDate();\n\tlet df = this.between(start, end);\n\treturn new Timeseries(df);\n}\nTimeseries.prototype.betweenDates = betweenDates;\n\nfunction transformAllSeries(adjustmentFunction, { exclude }) {\n\tlet df = this;\n\tlet columns = (columns = df\n\t\t.detectTypes()\n\t\t.where(row => row.Type === \"number\")\n\t\t.distinct(row => row.Column)\n\t\t.getSeries(\"Column\")\n\t\t.toArray());\n\tif (exclude && Array.isArray(exclude)) {\n\t\tcolumns = columns.filter(col => exclude.indexOf(col) === -1);\n\t}\n\tcolumns.forEach(col => {\n\t\tdf = df.transformSeries({\n\t\t\t[col]: value => {\n\t\t\t\tif (isNaN(value)) {\n\t\t\t\t\treturn value;\n\t\t\t\t} else {\n\t\t\t\t\treturn adjustmentFunction(value);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\treturn df;\n}\n\nTimeseries.prototype.transformAllSeries = transformAllSeries;\n\nfunction reset() {\n\tlet df = this.withSeries({\n\t\tvalue: row =>\n\t\t\trow.flag && Array.isArray(row.flag) && row.flag.length > 0\n\t\t\t\t? row.raw\n\t\t\t\t: row.value\n\t})\n\t\t.subset([\"date\", \"value\"])\n\t\t.where(row => !isNaN(row.value) && row.value !== null);\n\treturn new Timeseries(df);\n}\nTimeseries.prototype.reset = reset;\n\n// To and From Totalizers\nfunction fromTotalizer(col = \"value\", { acceptInitial = false } = {}) {\n\tlet array = this.subset([\"date\", col])\n\t\t.toArray()\n\t\t.map((v, i, arr) => {\n\t\t\tlet val = acceptInitial ? v[col] : null;\n\t\t\tif (arr[i - 1]) {\n\t\t\t\tval = v[col] - arr[i - 1][col];\n\t\t\t}\n\t\t\treturn { date: v.date, [col]: val };\n\t\t});\n\tlet ndf = new Timeseries(a);\n\treturn ndf;\n}\nfunction toTotalizer(col, { adjustInitial } = {}) {\n\tlet array = this.subset([\"date\", col])\n\t\t.toArray()\n\t\t.map((v, i, arr) => {\n\t\t\tlet val = arr\n\t\t\t\t.slice(0, i)\n\t\t\t\t.map(obj => obj[col])\n\t\t\t\t.reduce((a, b) => a + b, 0);\n\t\t\treturn { date: v.date, [col]: val };\n\t\t});\n\tlet ndf = new Timeseries(a);\n\treturn ndf;\n}\nTimeseries.prototype.fromTotalizer = fromTotalizer;\nTimeseries.prototype.toTotalizer = toTotalizer;\n\nfunction group(interval, toArray) {\n\tif ([\"hour\", \"day\", \"month\", \"year\"].indexOf(interval) === -1)\n\t\tthrow new Error(\"interval type not supported\");\n\tlet dateComparison = row => dayjs(row.date).startOf(interval);\n\tlet groups = this.groupBy(dateComparison);\n\treturn groups;\n}\n\nTimeseries.prototype.group = group;\n\nfunction removeOutliers({ series = \"value\", lower, upper } = {}) {\n\tif (lower > upper) throw new Error(\"thresholds invalid\");\n\tlet outlierCheck = (value, lower, upper) => value < lower || value > upper;\n\n\tlet outliers = this.where(row => outlierCheck(row[series], lower, upper))\n\t\t.generateSeries({\n\t\t\traw: row => row[series],\n\t\t\tflag: ({ flag = [] }) => [\"outlier\", ...flag]\n\t\t})\n\t\t.transformSeries({\n\t\t\t[series]: value => null\n\t\t});\n\n\tlet merged = this.merge(outliers);\n\treturn new Timeseries(merged);\n}\n\nTimeseries.prototype.removeOutliers = removeOutliers;\nTimeseries.prototype.clean = removeOutliers;\n\nfunction downsample([duration, value], fillType = \"sum\") {\n\tif ([\"hour\", \"day\", \"month\", \"year\"].indexOf(duration) === -1)\n\t\tthrow new Error(\"interval type not supported\");\n\tif ([\"sum\", \"avg\", \"median\"].indexOf(fillType) === -1) {\n\t\tthrow new Error(\"aggregation type not suppported, only:\");\n\t}\n\tlet dateComparison = row => row.date.startOf(duration);\n\tlet valueColumns = this.getValueColumns();\n\tif (value) {\n\t\tdateComparison = row => row.date.startOf(duration).add(value, duration);\n\t}\n\tlet df = this.groupBy(dateComparison)\n\t\t.select(group => {\n\t\t\tconst date = group.first().date.startOf(duration);\n\t\t\treturn {\n\t\t\t\tdate,\n\t\t\t\t...fromPairs([\n\t\t\t\t\t...valueColumns.map(col => {\n\t\t\t\t\t\tlet value;\n\t\t\t\t\t\tswitch (fillType) {\n\t\t\t\t\t\t\tcase \"median\":\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.median();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"avg\":\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.average();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t// sum\n\t\t\t\t\t\t\t\tvalue = group\n\t\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t\t.sum();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn [col, value];\n\t\t\t\t\t}),\n\t\t\t\t\t...group\n\t\t\t\t\t\t.getColumnNames()\n\t\t\t\t\t\t.filter(col => col !== \"date\")\n\t\t\t\t\t\t.filter(col => valueColumns.indexOf(col) === -1)\n\t\t\t\t\t\t.map(col => {\n\t\t\t\t\t\t\tlet value = group\n\t\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t\t.distinct()\n\t\t\t\t\t\t\t\t.toArray();\n\t\t\t\t\t\t\tif (value.length === 1) value = value[0];\n\t\t\t\t\t\t\treturn [col, value];\n\t\t\t\t\t\t})\n\t\t\t\t])\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => dayjs(row.date).toDate());\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.downsample = downsample;\nfunction downsampleClean([duration, value], threshold = 0.8) {\n\tif ([\"hour\", \"day\", \"month\", \"year\"].indexOf(duration) === -1)\n\t\tthrow new Error(\"interval type not supported\");\n\tlet dateComparison = row => row.date.startOf(duration);\n\tlet valueColumns = this.getValueColumns();\n\tif (value) {\n\t\tdateComparison = row => row.date.startOf(duration).add(value, duration);\n\t}\n\tlet df = this.groupBy(dateComparison)\n\t\t.select(group => {\n\t\t\tconst date = group.first().date.startOf(duration);\n\t\t\tlet quality = new Timeseries(group).dataQuality().setIndex(\"flag\");\n\t\t\tlet clean = quality.at(\"clean\").percent;\n\t\t\treturn {\n\t\t\t\tdate,\n\t\t\t\tvalue:\n\t\t\t\t\tclean >= threshold\n\t\t\t\t\t\t? group\n\t\t\t\t\t\t\t\t.deflate(row => row.value)\n\t\t\t\t\t\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t\t\t\t\t\t.sum()\n\t\t\t\t\t\t: null\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => dayjs(row.date).toDate());\n\treturn new Timeseries(df);\n}\nTimeseries.prototype.downsampleClean = downsampleClean;\nfunction upsample([duration, value], fillType = \"average\") {\n\t// Dont use this b/c it has the raw and flag values\n\tlet df = this;\n\tlet blank = Timeseries.blank(df.first().date, df.last().date, [\n\t\tduration,\n\t\tvalue\n\t]);\n\tconsole.log(blank.toString());\n\tlet n = Timeseries.merge([blank, df]).fillNull();\n\t// let df = this.fillGaps(\n\t// \tgapExists([duration, value]),\n\t// \tgapFill(fillType, [duration, value])\n\t// );\n\treturn new Timeseries(n);\n}\n\nTimeseries.prototype.upsample = upsample;\n\nfunction populate(value, type = \"average\") {\n\tlet v;\n\tswitch (type) {\n\t\tcase \"fill\":\n\t\t\tv = value;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tv = value / this.count();\n\t\t\tbreak;\n\t}\n\tlet df = this.generateSeries({ value: row => v });\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.populate = populate;\n\nfunction reduceToValue(columnNames) {\n\tfunction chooseValue(row, columnNames = []) {\n\t\tlet values = columnNames.map(n => row[n]).filter(v => v);\n\t\treturn values[0] || 0;\n\t}\n\tlet df = this.generateSeries({\n\t\tvalue: row => chooseValue(row, columnNames)\n\t}).subset([\"date\", \"value\"]);\n\treturn new Timeseries(df);\n}\n\nTimeseries.prototype.reduceToValue = reduceToValue;\n\nfunction cumulativeSum(columns) {\n\tif (!columns) columns = this.getValueColumns();\n\tif (columns & !Array.isArray(columns)) columns = [columns];\n\tlet df = this;\n\tconst cumulativeSum = sum => value => (sum += value);\n\tcolumns.forEach(s => {\n\t\tdf = df.withSeries(s, df.getSeries(s).select(cumulativeSum(0)));\n\t});\n\treturn new Timeseries(df);\n}\nTimeseries.prototype.cumulativeSum = cumulativeSum;\n\nfunction totalRows(series = [\"value\"], colname = \"total\") {\n\tlet ndf = this.generateSeries({\n\t\t[colname]: row => series.map(v => row[v] || 0).reduce((a, b) => a + b, 0)\n\t});\n\treturn new Timeseries(ndf);\n}\nTimeseries.prototype.totalRows = totalRows;\nTimeseries.prototype.totalRow = totalRows;\nTimeseries.prototype.totalColumns = totalRows;\n\n// Baseline Functions\nfunction rollingPercentChange(col = \"value\", decimal = true) {\n\tlet df = this;\n\tlet delta = df.withSeries(\"delta\", df.getSeries(\"value\").percentChange());\n\tif (decimal) delta = delta.transformSeries({ delta: value => value / 100 });\n\treturn new Timeseries(delta);\n}\n\nTimeseries.prototype.rollingPercentChange = rollingPercentChange;\nfunction baselinePercentChange(baselineDF) {\n\t// Only Change in Year\n\tif (!(baselineDF instanceof Timeseries))\n\t\tbaselineDF = new Timeseries(baselineDF);\n\tlet dfwb;\n\tif (baselineDF.count() > 1) {\n\t\tlet interval = this.getInterval();\n\t\tlet baselineInterval = baselineDF.interval;\n\t\tif (!isEqual(interval, baselineInterval)) {\n\t\t\tconsole.error(interval, baselineInterval);\n\t\t\tthrow new Error(\"baseline and data intervals do not match\");\n\t\t}\n\t\tlet indexer;\n\t\tswitch (interval[0]) {\n\t\t\tcase \"day\":\n\t\t\t\tindexer = date => `${date.month()}-${date.date()}`;\n\t\t\t\tbreak;\n\t\t\tcase \"month\":\n\t\t\t\tindexer = date => date.month();\n\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tindexer = date => 0;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tlet indexedBaseline = baselineDF.withIndex(row => indexer(row.date));\n\t\tlet getBaselineValue = index => {\n\t\t\tlet at = indexedBaseline.at(index);\n\t\t\tif (at && has(at, \"value\")) {\n\t\t\t\treturn at.value;\n\t\t\t} else {\n\t\t\t\treturn indexedBaseline.getSeries(\"value\").average();\n\t\t\t}\n\t\t};\n\t\tdfwb = this.generateSeries({\n\t\t\tbaseline: row => getBaselineValue(indexer(row.date))\n\t\t});\n\t} else {\n\t\tdfwb = this.generateSeries({\n\t\t\tbaseline: row => baselineDF.first().value\n\t\t});\n\t}\n\tdfwb = dfwb.generateSeries({\n\t\tdelta: row => calculateChange(row.baseline, row.value)\n\t});\n\treturn new Timeseries(dfwb);\n}\n\nTimeseries.prototype.baselinePercentChange = baselinePercentChange;\nTimeseries.prototype.addBaselineDelta = baselinePercentChange;\n\nfunction annualIntensity(normalizeValue = 1) {\n\tlet interval = this.getInterval();\n\tlet annual = this.groupBy(row => row.date.year())\n\t\t.select(group => {\n\t\t\tlet startDate = group.first().date;\n\t\t\tlet endDate = group\n\t\t\t\t.last()\n\t\t\t\t.date.add(interval[1] || 1, interval[0] || \"month\");\n\t\t\tlet scaler = annualScale(startDate, endDate);\n\t\t\treturn {\n\t\t\t\tstartDate,\n\t\t\t\tendDate,\n\t\t\t\t...fromPairs(\n\t\t\t\t\tthis.getValueColumns().map(col => [\n\t\t\t\t\t\tcol,\n\t\t\t\t\t\t(group\n\t\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t\t.where(v => v)\n\t\t\t\t\t\t\t.sum() *\n\t\t\t\t\t\t\tscaler) /\n\t\t\t\t\t\t\tnormalizeValue\n\t\t\t\t\t])\n\t\t\t\t)\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.renameSeries({ startDate: \"date\" })\n\t\t.dropSeries(\"endDate\");\n\treturn new Timeseries(annual);\n}\n\nTimeseries.prototype.annualIntensity = annualIntensity;\n\n// Fill Functions\n\nfunction fillMissing() {\n\tlet df = this;\n\tlet startDate = df.first().date.toDate(),\n\t\tendDate = df.last().date.toDate();\n\tlet interval = df.getInterval();\n\tlet bdf = Timeseries.blank(\n\t\tstartDate,\n\t\tendDate,\n\t\tinterval,\n\t\t\"missing\"\n\t).withIndex(row => row.date.valueOf());\n\tlet m = bdf.merge(df.withIndex(row => row.date.valueOf())).generateSeries({\n\t\tflag: row =>\n\t\t\trow.value === null || row.value === undefined ? row.flag : undefined\n\t});\n\tm = new Timeseries(m);\n\treturn m;\n}\nTimeseries.prototype.fillMissing = fillMissing;\n\nfunction fillNull({ series = \"value\", value, callback }) {\n\tconst seriesCheck = row => row[series] === null || row[series] === undefined;\n\tif (callback) {\n\t\tlet df = this.generateSeries({\n\t\t\tflag: row =>\n\t\t\t\tseriesCheck(row) ? [\"fill\", ...(row.flag || [])] : row.flag,\n\t\t\t[series]: row => (seriesCheck(row) ? callback(row) : row[series])\n\t\t});\n\t\treturn new Timeseries(df);\n\t} else if (value) {\n\t\tlet df = this.generateSeries({\n\t\t\tflag: row => (seriesCheck(row) ? [\"fill\", ...(row.flag || [])] : row.flag)\n\t\t}).transformSeries({\n\t\t\t[series]: currentValue =>\n\t\t\t\tcurrentValue === null || currentValue === undefined\n\t\t\t\t\t? value\n\t\t\t\t\t: currentValue\n\t\t});\n\t\treturn new Timeseries(df);\n\t} else {\n\t\treturn this;\n\t}\n}\nTimeseries.prototype.fillNull = fillNull;\n\nfunction zeroFaultDetection(thresholdInterval) {\n\tif (!Array.isArray(thresholdInterval))\n\t\tthresholdInterval = [thresholdInterval, 1];\n\tthresholdInterval = intervalToMS(thresholdInterval);\n\tlet df = this;\n\tlet zeroFaultDates = df\n\t\t.where(row => row.value === 0)\n\t\t.ensureSeries(\n\t\t\t\"interval\",\n\t\t\tdf\n\t\t\t\t.where(row => row.value === 0)\n\t\t\t\t.getSeries(\"date\")\n\t\t\t\t.amountChange()\n\t\t)\n\t\t.where(v => v.interval <= thresholdInterval)\n\t\t.subset([\"date\"])\n\t\t.generateSeries({ value: row => null, flag: row => [\"zeroFault\"] });\n\n\tlet zeroFaultDF = new Timeseries(this.merge(zeroFaultDates));\n\treturn zeroFaultDF;\n}\n\nTimeseries.prototype.zeroFaultDetection = zeroFaultDetection;\n\nfunction dataQuality() {\n\tlet count = this.count();\n\tlet withFlags = this.where(r => Array.isArray(r.flag) && r.flag.length > 0)\n\t\t.groupBy(r => r.flag.toString())\n\t\t.select(group => ({\n\t\t\tflag: group.first().flag,\n\t\t\tcount: group.count(),\n\t\t\tpercent: group.count() / count\n\t\t}))\n\t\t.inflate();\n\tlet good = this.where(\n\t\tr =>\n\t\t\tr.flag === undefined ||\n\t\t\tr.flag === null ||\n\t\t\t(Array.isArray(r.flag) && r.flag.length === 0)\n\t).count();\n\tlet quality = withFlags\n\t\t.appendPair([\n\t\t\twithFlags.count(),\n\t\t\t{ flag: \"clean\", count: good, percent: good / count }\n\t\t])\n\t\t.orderByDescending(row => row.count);\n\treturn quality;\n}\n\nTimeseries.prototype.dataQuality = dataQuality;\n\nfunction monthlyWithQual() {\n\tlet interval = this.getInterval();\n\tlet ms = intervalToMS(interval);\n\tconst duration = \"month\";\n\tlet dateComparison = row =>\n\t\tdayjs(row.date)\n\t\t\t.startOf()\n\t\t\t.valueOf();\n\tlet ts = this.groupBy(dateComparison)\n\t\t.select(group => {\n\t\t\tconst date = dayjs(group.first().date)\n\t\t\t\t.startOf(duration)\n\t\t\t\t.toDate();\n\t\t\tlet fullCount = Math.floor(\n\t\t\t\tdayjs(date)\n\t\t\t\t\t.endOf(\"month\")\n\t\t\t\t\t.diff(dayjs(date), \"millisecond\") / ms\n\t\t\t);\n\t\t\tlet days = new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\n\t\t\tlet count = group\n\t\t\t\t.getSeries(\"value\")\n\t\t\t\t.where(v => v && v !== 0)\n\t\t\t\t.toArray().length;\n\t\t\tlet value = group\n\t\t\t\t.getSeries(\"value\")\n\t\t\t\t.where(v => !isNaN(v))\n\t\t\t\t.sum();\n\t\t\treturn {\n\t\t\t\tdate,\n\t\t\t\tvalue: isNaN(value) ? 0 : value,\n\t\t\t\tcount,\n\t\t\t\tfullCount,\n\t\t\t\tscore: count / fullCount\n\t\t\t};\n\t\t})\n\t\t.inflate()\n\t\t.withIndex(row => row.date.toDate());\n\treturn new Timeseries(ts);\n}\nTimeseries.prototype.monthlyWithQual = monthlyWithQual;\n\nfunction threeYearAverage(date, series = \"value\", defaultValue) {\n\tdate = dayjs(date);\n\tif (!defaultValue)\n\t\tdefaultValue = this.getSeries(series)\n\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t.average();\n\n\t// let months = df\n\t// \t.before(date.valueOf())\n\t// \t.where(row => dayjs(row.date).month() === date.month())\n\t// \t.where(row => row.score > 0.9)\n\t// \t.tail(3);\n\tlet months = this.before(date.toDate())\n\t\t.where(row => row.date.month() === date.month())\n\t\t.orderBy(row => dayjs(row.date))\n\t\t.tail(3);\n\t// .where(row => row.score > 0.9);\n\tif (months.count() > 0) {\n\t\tlet val = months\n\t\t\t.getSeries(series)\n\t\t\t.where(v => !isNaN(v) && v !== null)\n\t\t\t.average();\n\t\treturn val;\n\t} else {\n\t\treturn defaultValue;\n\t}\n}\nTimeseries.prototype.threeYearAverage = threeYearAverage;\n\nfunction averageFill() {\n\tlet df = this;\n\tlet avg = df\n\t\t// .where(row => row.score ?row.score >= 0.9)\n\t\t.getSeries(\"value\")\n\t\t.where(v => !isNaN(v) && v !== null)\n\t\t.average();\n\tlet monthlyAvg = df\n\t\t.generateSeries({\n\t\t\trollingAverage: row => df.threeYearAverage(row.date, \"value\", avg)\n\t\t})\n\t\t.generateSeries({\n\t\t\tflag: row => (row.value ? row.flag : [\"filled\", ...(row.flag || [])])\n\t\t})\n\t\t.generateSeries({\n\t\t\tvalue: row => (row.value ? row.value : row.rollingAverage)\n\t\t})\n\t\t.dropSeries([\"rollingAverage\"]);\n\treturn new Timeseries(monthlyAvg);\n}\n\nTimeseries.prototype.averageFill = averageFill;\nfunction toArray() {\n\tconst values = [];\n\tfor (const value of this.getContent().values) {\n\t\tif (value !== undefined) {\n\t\t\tvalues.push(value);\n\t\t}\n\t}\n\treturn values.map(({ date, ...others }) => ({\n\t\tdate: date.toDate(),\n\t\t...others\n\t}));\n}\nTimeseries.prototype.toArray = toArray;\n\nfunction atDate(date) {\n\tif (this.none()) {\n\t\treturn undefined;\n\t}\n\tdate = dayjs(date).valueOf();\n\n\tfor (const pair of this.getContent().pairs) {\n\t\tif (pair[0].valueOf() === date) {\n\t\t\treturn pair[1];\n\t\t}\n\t}\n\treturn undefined;\n}\nTimeseries.prototype.atDate = atDate;\n\n// Static Methods\nfunction blank(startDate, endDate, [duration, value = 1], flag) {\n\tif ([\"minute\", \"hour\", \"day\", \"month\", \"year\"].indexOf(duration) < 0) {\n\t\tconsole.error(interval);\n\t\tthrow new Error(\"interval type not supported\");\n\t}\n\tstartDate = dayjs(startDate);\n\tendDate = dayjs(endDate);\n\tlet dates = [startDate];\n\tlet interval = intervalToMS([duration, value]);\n\twhile (dates[dates.length - 1].valueOf() < endDate.valueOf()) {\n\t\tdates.push(dayjs(dates[dates.length - 1]).add(value, duration));\n\t}\n\tlet df = new Timeseries(dates.map(date => ({ date })));\n\n\tif (flag) {\n\t\tdf = new Timeseries(\n\t\t\tdf.generateSeries({\n\t\t\t\tflag: row => [flag]\n\t\t\t})\n\t\t);\n\t}\n\n\treturn df;\n}\nTimeseries.blank = blank;\nfunction aggregate(dataframes) {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df => new Timeseries(df));\n\tconst valueColumns = new Set(\n\t\tdataframes.map(df => df.getValueColumns()).reduce((a, b) => a.concat(b), [])\n\t);\n\tconst concatenated = dataForge.DataFrame.concat(dataframes)\n\t\t.groupBy(row => row.date)\n\t\t.select(group => {\n\t\t\tconst date = group.first().date;\n\t\t\tlet o = { date };\n\t\t\tvalueColumns.forEach(c => (o[c] = group.deflate(row => row[c]).sum()));\n\t\t\tgroup\n\t\t\t\t.getColumnNames()\n\t\t\t\t.filter(col => col !== \"date\")\n\t\t\t\t.filter(col => valueColumns.has(col) === -1)\n\t\t\t\t.forEach(col => {\n\t\t\t\t\tlet value = group\n\t\t\t\t\t\t.deflate(row => row[col])\n\t\t\t\t\t\t.distinct()\n\t\t\t\t\t\t.toArray();\n\t\t\t\t\tif (value.length === 1) value = value[0];\n\t\t\t\t\to[col] = value;\n\t\t\t\t\treturn;\n\t\t\t\t});\n\t\t\treturn o;\n\t\t})\n\t\t.inflate();\n\treturn new Timeseries(concatenated);\n}\n\nTimeseries.aggregate = aggregate;\nTimeseries.concat = dataframes => {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df =>\n\t\tnew Timeseries(df).withIndex(row => row.date.valueOf())\n\t);\n\tlet df = dataForge.DataFrame.concat(dataframes);\n\treturn new Timeseries(df);\n};\nTimeseries.merge = dataframes => {\n\tif (!Array.isArray(dataframes)) dataframes = [dataframes];\n\tdataframes = dataframes.map(df =>\n\t\tnew Timeseries(df).withIndex(row => row.date.valueOf())\n\t);\n\tlet df = dataForge.DataFrame.merge(dataframes);\n\treturn new Timeseries(df);\n};\n"],"names":["intervalToMS","unit","value","start","dayjs","add","diff","averageMonthlyMap","df","data","group","select","month","first","date","getSeries","where","v","average","m","Map","toArray","map","avg","set","annualMonthlyAverageMap","groupBy","row","year","startOf","ts","Timeseries","downsample","monthlyRollingAverageMap","years","series","aggregator","validOnly","months","toDate","Boolean","inflate","withIndex","bake","values","rollingWindow","window","last","has","forEach","before","count","fillMonthlyByMap","monthMap","get","fillMonthlyBAnnualyMap","annualMonthlyMap","mean","reduce","a","b","concat","pad","annualAverage","subset","after","subtract","r","hour","minute","appendPair","rval","deflate","x","std","sampleStandardDeviation","_mean","ndf","generateSeries","ares","R","DataFrame","Math","abs","max","lambdaTest","n","i","alpha","p","pValue","t","degreeOfFreedom","Studentt","inv","tValue","lambda","sqrt","pow","modz","mad","median","modifiedZScoreTest","_median","medianAbsoluteDeviation","outliers","sort","filter","thresholds","upper","min","Infinity","lower","calculateChange","baseline","options","dataForge","config","others","valueOf","index","considerAllRows","call","this","removeOutliers","Error","outlierCheck","raw","flag","transformSeries","[object Object]","merge","totalRows","colname","baselinePercentChange","baselineDF","dfwb","indexer","interval","getInterval","baselineInterval","isEqual","console","error","indexedBaseline","at","getBaselineValue","delta","prototype","Object","create","constructor","getValueColumns","detectTypes","Type","distinct","Column","ms","end","getIndex","detectValues","orderBy","Frequency","Value","ceil","getDateRange","adjustment","endOf","cvrsme","actual","simulated","resetIndex","dropSeries","ybar","sum","nmbe","calculateStatistics","column","filterZeros","filterNegative","isNaN","q1","quantile","q3","iqr","calculateThresholdOptions","k","noflags","Array","isArray","length","floor","esd","dataset","newdf","dataframe","trip","pair","assign","push","outlierValues","outlier","takeWhile","iterations","rosnerTest","box","lowerInner","upperInner","lowerOuter","upperOuter","getBestThreshold","thresholdGroups","ckmeans","betweenDates","between","transformAllSeries","adjustmentFunction","exclude","columns","col","indexOf","reset","withSeries","fromTotalizer","acceptInitial","arr","val","toTotalizer","slice","obj","clean","fillType","duration","dateComparison","valueColumns","fromPairs","getColumnNames","downsampleClean","threshold","dataQuality","setIndex","percent","upsample","blank","log","toString","fillNull","populate","type","reduceToValue","columnNames","chooseValue","cumulativeSum","s","totalRow","totalColumns","rollingPercentChange","decimal","percentChange","addBaselineDelta","annualIntensity","normalizeValue","startDate","endDate","scaler","annualScale","renameSeries","fillMissing","undefined","callback","seriesCheck","currentValue","zeroFaultDetection","thresholdInterval","zeroFaultDates","ensureSeries","amountChange","withFlags","good","orderByDescending","monthlyWithQual","fullCount","Date","getFullYear","getMonth","getDate","score","threeYearAverage","defaultValue","tail","averageFill","rollingAverage","getContent","atDate","none","pairs","dates","aggregate","dataframes","Set","o","c"],"mappings":"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"}